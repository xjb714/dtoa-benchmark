#include "d2sci.h"

#include <immintrin.h> //simd
#include <cmath>
#include <stdint.h>
#include <cstring>
#include <iostream>

// unsigned long long getcycle()
// {
// 	unsigned long long low, high;
// 	__asm volatile("rdtsc" : "=a"(low), "=d"(high)); // x86
// 	return (high << 32) | low;
// }

// const unsigned long long powers_ten[687] = {0xbf29dcaba82fdeae, 0xeef453d6923bd65a, 0x9558b4661b6565f8, 0xbaaee17fa23ebf76, 0xe95a99df8ace6f54, 0x91d8a02bb6c10594, 0xb64ec836a47146fa, 0xe3e27a444d8d98b8, 0x8e6d8c6ab0787f73, 0xb208ef855c969f50, 0xde8b2b66b3bc4724, 0x8b16fb203055ac76, 0xaddcb9e83c6b1794, 0xd953e8624b85dd79, 0x87d4713d6f33aa6c, 0xa9c98d8ccb009506, 0xd43bf0effdc0ba48, 0x84a57695fe98746d, 0xa5ced43b7e3e9188, 0xcf42894a5dce35ea, 0x818995ce7aa0e1b2, 0xa1ebfb4219491a1f, 0xca66fa129f9b60a7, 0xfd00b897478238d1, 0x9e20735e8cb16382, 0xc5a890362fddbc63, 0xf712b443bbd52b7c, 0x9a6bb0aa55653b2d, 0xc1069cd4eabe89f9, 0xf148440a256e2c77, 0x96cd2a865764dbca, 0xbc807527ed3e12bd, 0xeba09271e88d976c, 0x93445b8731587ea3, 0xb8157268fdae9e4c, 0xe61acf033d1a45df, 0x8fd0c16206306bac, 0xb3c4f1ba87bc8697, 0xe0b62e2929aba83c, 0x8c71dcd9ba0b4926, 0xaf8e5410288e1b6f, 0xdb71e91432b1a24b, 0x892731ac9faf056f, 0xab70fe17c79ac6ca, 0xd64d3d9db981787d, 0x85f0468293f0eb4e, 0xa76c582338ed2622, 0xd1476e2c07286faa, 0x82cca4db847945ca, 0xa37fce126597973d, 0xcc5fc196fefd7d0c, 0xff77b1fcbebcdc4f, 0x9faacf3df73609b1, 0xc795830d75038c1e, 0xf97ae3d0d2446f25, 0x9becce62836ac577, 0xc2e801fb244576d5, 0xf3a20279ed56d48a, 0x9845418c345644d7, 0xbe5691ef416bd60c, 0xedec366b11c6cb8f, 0x94b3a202eb1c3f39, 0xb9e08a83a5e34f08, 0xe858ad248f5c22ca, 0x91376c36d99995be, 0xb58547448ffffb2e, 0xe2e69915b3fff9f9, 0x8dd01fad907ffc3c, 0xb1442798f49ffb4b, 0xdd95317f31c7fa1d, 0x8a7d3eef7f1cfc52, 0xad1c8eab5ee43b67, 0xd863b256369d4a41, 0x873e4f75e2224e68, 0xa90de3535aaae202, 0xd3515c2831559a83, 0x8412d9991ed58092, 0xa5178fff668ae0b6, 0xce5d73ff402d98e4, 0x80fa687f881c7f8e, 0xa139029f6a239f72, 0xc987434744ac874f, 0xfbe9141915d7a922, 0x9d71ac8fada6c9b5, 0xc4ce17b399107c23, 0xf6019da07f549b2b, 0x99c102844f94e0fb, 0xc0314325637a193a, 0xf03d93eebc589f88, 0x96267c7535b763b5, 0xbbb01b9283253ca3, 0xea9c227723ee8bcb, 0x92a1958a7675175f, 0xb749faed14125d37, 0xe51c79a85916f485, 0x8f31cc0937ae58d3, 0xb2fe3f0b8599ef08, 0xdfbdcece67006ac9, 0x8bd6a141006042be, 0xaecc49914078536d, 0xda7f5bf590966849, 0x888f99797a5e012d, 0xaab37fd7d8f58179, 0xd5605fcdcf32e1d7, 0x855c3be0a17fcd26, 0xa6b34ad8c9dfc070, 0xd0601d8efc57b08c, 0x823c12795db6ce57, 0xa2cb1717b52481ed, 0xcb7ddcdda26da269, 0xfe5d54150b090b03, 0x9efa548d26e5a6e2, 0xc6b8e9b0709f109a, 0xf867241c8cc6d4c1, 0x9b407691d7fc44f8, 0xc21094364dfb5637, 0xf294b943e17a2bc4, 0x979cf3ca6cec5b5b, 0xbd8430bd08277231, 0xece53cec4a314ebe, 0x940f4613ae5ed137, 0xb913179899f68584, 0xe757dd7ec07426e5, 0x9096ea6f3848984f, 0xb4bca50b065abe63, 0xe1ebce4dc7f16dfc, 0x8d3360f09cf6e4bd, 0xb080392cc4349ded, 0xdca04777f541c568, 0x89e42caaf9491b61, 0xac5d37d5b79b6239, 0xd77485cb25823ac7, 0x86a8d39ef77164bd, 0xa8530886b54dbdec, 0xd267caa862a12d67, 0x8380dea93da4bc60, 0xa46116538d0deb78, 0xcd795be870516656, 0x806bd9714632dff6, 0xa086cfcd97bf97f4, 0xc8a883c0fdaf7df0, 0xfad2a4b13d1b5d6c, 0x9cc3a6eec6311a64, 0xc3f490aa77bd60fd, 0xf4f1b4d515acb93c, 0x991711052d8bf3c5, 0xbf5cd54678eef0b7, 0xef340a98172aace5, 0x9580869f0e7aac0f, 0xbae0a846d2195713, 0xe998d258869facd7, 0x91ff83775423cc06, 0xb67f6455292cbf08, 0xe41f3d6a7377eeca, 0x8e938662882af53e, 0xb23867fb2a35b28e, 0xdec681f9f4c31f31, 0x8b3c113c38f9f37f, 0xae0b158b4738705f, 0xd98ddaee19068c76, 0x87f8a8d4cfa417ca, 0xa9f6d30a038d1dbc, 0xd47487cc8470652b, 0x84c8d4dfd2c63f3b, 0xa5fb0a17c777cf0a, 0xcf79cc9db955c2cc, 0x81ac1fe293d599c0, 0xa21727db38cb0030, 0xca9cf1d206fdc03c, 0xfd442e4688bd304b, 0x9e4a9cec15763e2f, 0xc5dd44271ad3cdba, 0xf7549530e188c129, 0x9a94dd3e8cf578ba, 0xc13a148e3032d6e8, 0xf18899b1bc3f8ca2, 0x96f5600f15a7b7e5, 0xbcb2b812db11a5de, 0xebdf661791d60f56, 0x936b9fcebb25c996, 0xb84687c269ef3bfb, 0xe65829b3046b0afa, 0x8ff71a0fe2c2e6dc, 0xb3f4e093db73a093, 0xe0f218b8d25088b8, 0x8c974f7383725573, 0xafbd2350644eead0, 0xdbac6c247d62a584, 0x894bc396ce5da772, 0xab9eb47c81f5114f, 0xd686619ba27255a3, 0x8613fd0145877586, 0xa798fc4196e952e7, 0xd17f3b51fca3a7a1, 0x82ef85133de648c5, 0xa3ab66580d5fdaf6, 0xcc963fee10b7d1b3, 0xffbbcfe994e5c620, 0x9fd561f1fd0f9bd4, 0xc7caba6e7c5382c9, 0xf9bd690a1b68637b, 0x9c1661a651213e2d, 0xc31bfa0fe5698db8, 0xf3e2f893dec3f126, 0x986ddb5c6b3a76b8, 0xbe89523386091466, 0xee2ba6c0678b597f, 0x94db483840b717f0, 0xba121a4650e4ddec, 0xe896a0d7e51e1566, 0x915e2486ef32cd60, 0xb5b5ada8aaff80b8, 0xe3231912d5bf60e6, 0x8df5efabc5979c90, 0xb1736b96b6fd83b4, 0xddd0467c64bce4a1, 0x8aa22c0dbef60ee4, 0xad4ab7112eb3929e, 0xd89d64d57a607745, 0x87625f056c7c4a8b, 0xa93af6c6c79b5d2e, 0xd389b47879823479, 0x843610cb4bf160cc, 0xa54394fe1eedb8ff, 0xce947a3da6a9273e, 0x811ccc668829b887, 0xa163ff802a3426a9, 0xc9bcff6034c13053, 0xfc2c3f3841f17c68, 0x9d9ba7832936edc1, 0xc5029163f384a931, 0xf64335bcf065d37d, 0x99ea0196163fa42e, 0xc06481fb9bcf8d3a, 0xf07da27a82c37088, 0x964e858c91ba2655, 0xbbe226efb628afeb, 0xeadab0aba3b2dbe5, 0x92c8ae6b464fc96f, 0xb77ada0617e3bbcb, 0xe55990879ddcaabe, 0x8f57fa54c2a9eab7, 0xb32df8e9f3546564, 0xdff9772470297ebd, 0x8bfbea76c619ef36, 0xaefae51477a06b04, 0xdab99e59958885c5, 0x88b402f7fd75539b, 0xaae103b5fcd2a882, 0xd59944a37c0752a2, 0x857fcae62d8493a5, 0xa6dfbd9fb8e5b88f, 0xd097ad07a71f26b2, 0x825ecc24c8737830, 0xa2f67f2dfa90563b, 0xcbb41ef979346bca, 0xfea126b7d78186bd, 0x9f24b832e6b0f436, 0xc6ede63fa05d3144, 0xf8a95fcf88747d94, 0x9b69dbe1b548ce7d, 0xc24452da229b021c, 0xf2d56790ab41c2a3, 0x97c560ba6b0919a6, 0xbdb6b8e905cb600f, 0xed246723473e3813, 0x9436c0760c86e30c, 0xb94470938fa89bcf, 0xe7958cb87392c2c3, 0x90bd77f3483bb9ba, 0xb4ecd5f01a4aa828, 0xe2280b6c20dd5232, 0x8d590723948a535f, 0xb0af48ec79ace837, 0xdcdb1b2798182245, 0x8a08f0f8bf0f156b, 0xac8b2d36eed2dac6, 0xd7adf884aa879177, 0x86ccbb52ea94baeb, 0xa87fea27a539e9a5, 0xd29fe4b18e88640f, 0x83a3eeeef9153e89, 0xa48ceaaab75a8e2b, 0xcdb02555653131b6, 0x808e17555f3ebf12, 0xa0b19d2ab70e6ed6, 0xc8de047564d20a8c, 0xfb158592be068d2f, 0x9ced737bb6c4183d, 0xc428d05aa4751e4d, 0xf53304714d9265e0, 0x993fe2c6d07b7fac, 0xbf8fdb78849a5f97, 0xef73d256a5c0f77d, 0x95a8637627989aae, 0xbb127c53b17ec159, 0xe9d71b689dde71b0, 0x9226712162ab070e, 0xb6b00d69bb55c8d1, 0xe45c10c42a2b3b06, 0x8eb98a7a9a5b04e3, 0xb267ed1940f1c61c, 0xdf01e85f912e37a3, 0x8b61313bbabce2c6, 0xae397d8aa96c1b78, 0xd9c7dced53c72256, 0x881cea14545c7575, 0xaa242499697392d3, 0xd4ad2dbfc3d07788, 0x84ec3c97da624ab5, 0xa6274bbdd0fadd62, 0xcfb11ead453994ba, 0x81ceb32c4b43fcf5, 0xa2425ff75e14fc32, 0xcad2f7f5359a3b3e, 0xfd87b5f28300ca0e, 0x9e74d1b791e07e48, 0xc612062576589ddb, 0xf79687aed3eec551, 0x9abe14cd44753b53, 0xc16d9a0095928a27, 0xf1c90080baf72cb1, 0x971da05074da7bef, 0xbce5086492111aeb, 0xec1e4a7db69561a5, 0x9392ee8e921d5d07, 0xb877aa3236a4b449, 0xe69594bec44de15b, 0x901d7cf73ab0acd9, 0xb424dc35095cd80f, 0xe12e13424bb40e13, 0x8cbccc096f5088cc, 0xafebff0bcb24aaff, 0xdbe6fecebdedd5bf, 0x89705f4136b4a597, 0xabcc77118461cefd, 0xd6bf94d5e57a42bc, 0x8637bd05af6c69b6, 0xa7c5ac471b478423, 0xd1b71758e219652c, 0x83126e978d4fdf3b, 0xa3d70a3d70a3d70a, 0xcccccccccccccccd, 0x8000000000000000, 0xa000000000000000, 0xc800000000000000, 0xfa00000000000000, 0x9c40000000000000, 0xc350000000000000, 0xf424000000000000, 0x9896800000000000, 0xbebc200000000000, 0xee6b280000000000, 0x9502f90000000000, 0xba43b74000000000, 0xe8d4a51000000000, 0x9184e72a00000000, 0xb5e620f480000000, 0xe35fa931a0000000, 0x8e1bc9bf04000000, 0xb1a2bc2ec5000000, 0xde0b6b3a76400000, 0x8ac7230489e80000, 0xad78ebc5ac620000, 0xd8d726b7177a8000, 0x878678326eac9000, 0xa968163f0a57b400, 0xd3c21bcecceda100, 0x84595161401484a0, 0xa56fa5b99019a5c8, 0xcecb8f27f4200f3a, 0x813f3978f8940984, 0xa18f07d736b90be5, 0xc9f2c9cd04674edf, 0xfc6f7c4045812296, 0x9dc5ada82b70b59e, 0xc5371912364ce305, 0xf684df56c3e01bc7, 0x9a130b963a6c115c, 0xc097ce7bc90715b3, 0xf0bdc21abb48db20, 0x96769950b50d88f4, 0xbc143fa4e250eb31, 0xeb194f8e1ae525fd, 0x92efd1b8d0cf37be, 0xb7abc627050305ae, 0xe596b7b0c643c719, 0x8f7e32ce7bea5c70, 0xb35dbf821ae4f38c, 0xe0352f62a19e306f, 0x8c213d9da502de45, 0xaf298d050e4395d7, 0xdaf3f04651d47b4c, 0x88d8762bf324cd10, 0xab0e93b6efee0054, 0xd5d238a4abe98068, 0x85a36366eb71f041, 0xa70c3c40a64e6c52, 0xd0cf4b50cfe20766, 0x82818f1281ed44a0, 0xa321f2d7226895c8, 0xcbea6f8ceb02bb3a, 0xfee50b7025c36a08, 0x9f4f2726179a2245, 0xc722f0ef9d80aad6, 0xf8ebad2b84e0d58c, 0x9b934c3b330c8577, 0xc2781f49ffcfa6d5, 0xf316271c7fc3908b, 0x97edd871cfda3a57, 0xbde94e8e43d0c8ec, 0xed63a231d4c4fb27, 0x945e455f24fb1cf9, 0xb975d6b6ee39e437, 0xe7d34c64a9c85d44, 0x90e40fbeea1d3a4b, 0xb51d13aea4a488dd, 0xe264589a4dcdab15, 0x8d7eb76070a08aed, 0xb0de65388cc8ada8, 0xdd15fe86affad912, 0x8a2dbf142dfcc7ab, 0xacb92ed9397bf996, 0xd7e77a8f87daf7fc, 0x86f0ac99b4e8dafd, 0xa8acd7c0222311bd, 0xd2d80db02aabd62c, 0x83c7088e1aab65db, 0xa4b8cab1a1563f52, 0xcde6fd5e09abcf27, 0x80b05e5ac60b6178, 0xa0dc75f1778e39d6, 0xc913936dd571c84c, 0xfb5878494ace3a5f, 0x9d174b2dcec0e47b, 0xc45d1df942711d9a, 0xf5746577930d6501, 0x9968bf6abbe85f20, 0xbfc2ef456ae276e9, 0xefb3ab16c59b14a3, 0x95d04aee3b80ece6, 0xbb445da9ca61281f, 0xea1575143cf97227, 0x924d692ca61be758, 0xb6e0c377cfa2e12e, 0xe498f455c38b997a, 0x8edf98b59a373fec, 0xb2977ee300c50fe7, 0xdf3d5e9bc0f653e1, 0x8b865b215899f46d, 0xae67f1e9aec07188, 0xda01ee641a708dea, 0x884134fe908658b2, 0xaa51823e34a7eedf, 0xd4e5e2cdc1d1ea96, 0x850fadc09923329e, 0xa6539930bf6bff46, 0xcfe87f7cef46ff17, 0x81f14fae158c5f6e, 0xa26da3999aef774a, 0xcb090c8001ab551c, 0xfdcb4fa002162a63, 0x9e9f11c4014dda7e, 0xc646d63501a1511e, 0xf7d88bc24209a565, 0x9ae757596946075f, 0xc1a12d2fc3978937, 0xf209787bb47d6b85, 0x9745eb4d50ce6333, 0xbd176620a501fc00, 0xec5d3fa8ce427b00, 0x93ba47c980e98ce0, 0xb8a8d9bbe123f018, 0xe6d3102ad96cec1e, 0x9043ea1ac7e41393, 0xb454e4a179dd1877, 0xe16a1dc9d8545e95, 0x8ce2529e2734bb1d, 0xb01ae745b101e9e4, 0xdc21a1171d42645d, 0x899504ae72497eba, 0xabfa45da0edbde69, 0xd6f8d7509292d603, 0x865b86925b9bc5c2, 0xa7f26836f282b733, 0xd1ef0244af2364ff, 0x8335616aed761f1f, 0xa402b9c5a8d3a6e7, 0xcd036837130890a1, 0x802221226be55a65, 0xa02aa96b06deb0fe, 0xc83553c5c8965d3d, 0xfa42a8b73abbf48d, 0x9c69a97284b578d8, 0xc38413cf25e2d70e, 0xf46518c2ef5b8cd1, 0x98bf2f79d5993803, 0xbeeefb584aff8604, 0xeeaaba2e5dbf6785, 0x952ab45cfa97a0b3, 0xba756174393d88e0, 0xe912b9d1478ceb17, 0x91abb422ccb812ef, 0xb616a12b7fe617aa, 0xe39c49765fdf9d95, 0x8e41ade9fbebc27d, 0xb1d219647ae6b31c, 0xde469fbd99a05fe3, 0x8aec23d680043bee, 0xada72ccc20054aea, 0xd910f7ff28069da4, 0x87aa9aff79042287, 0xa99541bf57452b28, 0xd3fa922f2d1675f2, 0x847c9b5d7c2e09b7, 0xa59bc234db398c25, 0xcf02b2c21207ef2f, 0x8161afb94b44f57d, 0xa1ba1ba79e1632dc, 0xca28a291859bbf93, 0xfcb2cb35e702af78, 0x9defbf01b061adab, 0xc56baec21c7a1916, 0xf6c69a72a3989f5c, 0x9a3c2087a63f6399, 0xc0cb28a98fcf3c80, 0xf0fdf2d3f3c30b9f, 0x969eb7c47859e744, 0xbc4665b596706115, 0xeb57ff22fc0c795a, 0x9316ff75dd87cbd8, 0xb7dcbf5354e9bece, 0xe5d3ef282a242e82, 0x8fa475791a569d11, 0xb38d92d760ec4455, 0xe070f78d3927556b, 0x8c469ab843b89563, 0xaf58416654a6babb, 0xdb2e51bfe9d0696a, 0x88fcf317f22241e2, 0xab3c2fddeeaad25b, 0xd60b3bd56a5586f2, 0x85c7056562757457, 0xa738c6bebb12d16d, 0xd106f86e69d785c8, 0x82a45b450226b39d, 0xa34d721642b06084, 0xcc20ce9bd35c78a5, 0xff290242c83396ce, 0x9f79a169bd203e41, 0xc75809c42c684dd1, 0xf92e0c3537826146, 0x9bbcc7a142b17ccc, 0xc2abf989935ddbfe, 0xf356f7ebf83552fe, 0x98165af37b2153df, 0xbe1bf1b059e9a8d6, 0xeda2ee1c7064130c, 0x9485d4d1c63e8be8, 0xb9a74a0637ce2ee1, 0xe8111c87c5c1ba9a, 0x910ab1d4db9914a0, 0xb54d5e4a127f59c8, 0xe2a0b5dc971f303a, 0x8da471a9de737e24, 0xb10d8e1456105dad, 0xdd50f1996b947519, 0x8a5296ffe33cc930, 0xace73cbfdc0bfb7b, 0xd8210befd30efa5a, 0x8714a775e3e95c78, 0xa8d9d1535ce3b396, 0xd31045a8341ca07c, 0x83ea2b892091e44e, 0xa4e4b66b68b65d61, 0xce1de40642e3f4b9, 0x80d2ae83e9ce78f4, 0xa1075a24e4421731, 0xc94930ae1d529cfd, 0xfb9b7cd9a4a7443c, 0x9d412e0806e88aa6, 0xc491798a08a2ad4f, 0xf5b5d7ec8acb58a3, 0x9991a6f3d6bf1766, 0xbff610b0cc6edd3f, 0xeff394dcff8a948f, 0x95f83d0a1fb69cd9, 0xbb764c4ca7a44410, 0xea53df5fd18d5514, 0x92746b9be2f8552c, 0xb7118682dbb66a77, 0xe4d5e82392a40515, 0x8f05b1163ba6832d, 0xb2c71d5bca9023f8, 0xdf78e4b2bd342cf7, 0x8bab8eefb6409c1a, 0xae9672aba3d0c321, 0xda3c0f568cc4f3e9, 0x8865899617fb1871, 0xaa7eebfb9df9de8e, 0xd51ea6fa85785631, 0x8533285c936b35df, 0xa67ff273b8460357, 0xd01fef10a657842c, 0x8213f56a67f6b29c, 0xa298f2c501f45f43, 0xcb3f2f7642717713, 0xfe0efb53d30dd4d8, 0x9ec95d1463e8a507, 0xc67bb4597ce2ce49, 0xf81aa16fdc1b81db, 0x9b10a4e5e9913129, 0xc1d4ce1f63f57d73, 0xf24a01a73cf2dcd0, 0x976e41088617ca02, 0xbd49d14aa79dbc82, 0xec9c459d51852ba3, 0x93e1ab8252f33b46, 0xb8da1662e7b00a17, 0xe7109bfba19c0c9d, 0x906a617d450187e2, 0xb484f9dc9641e9db, 0xe1a63853bbd26451, 0x8d07e33455637eb3, 0xb049dc016abc5e60, 0xdc5c5301c56b75f7, 0x89b9b3e11b6329bb, 0xac2820d9623bf429, 0xd732290fbacaf134, 0x867f59a9d4bed6c0, 0xa81f301449ee8c70, 0xd226fc195c6a2f8c, 0x83585d8fd9c25db8, 0xa42e74f3d032f526, 0xcd3a1230c43fb26f, 0x80444b5e7aa7cf85, 0xa0555e361951c367, 0xc86ab5c39fa63441, 0xfa856334878fc151, 0x9c935e00d4b9d8d2, 0xc3b8358109e84f07, 0xf4a642e14c6262c9, 0x98e7e9cccfbd7dbe, 0xbf21e44003acdd2d, 0xeeea5d5004981478, 0x95527a5202df0ccb, 0xbaa718e68396cffe, 0xe950df20247c83fd, 0x91d28b7416cdd27e, 0xb6472e511c81471e, 0xe3d8f9e563a198e5, 0x8e679c2f5e44ff8f, 0xb201833b35d63f73, 0xde81e40a034bcf50, 0x8b112e86420f6192, 0xadd57a27d29339f6, 0xd94ad8b1c7380874, 0x87cec76f1c830549, 0xa9c2794ae3a3c69b, 0xd433179d9c8cb841, 0x849feec281d7f329, 0xa5c7ea73224deff3, 0xcf39e50feae16bf0, 0x81842f29f2cce376, 0xa1e53af46f801c53, 0xca5e89b18b602368, 0xfcf62c1dee382c42, 0x9e19db92b4e31ba9, 0xc5a05277621be294, 0xf70867153aa2db39, 0x9a65406d44a5c903, 0xc0fe908895cf3b44, 0xf13e34aabb430a15, 0x96c6e0eab509e64d, 0xbc789925624c5fe1, 0xeb96bf6ebadf77d9, 0x933e37a534cbaae8, 0xb80dc58e81fe95a1, 0xe61136f2227e3b0a, 0x8fcac257558ee4e6, 0xb3bd72ed2af29e20, 0xe0accfa875af45a8, 0x8c6c01c9498d8b89, 0xaf87023b9bf0ee6b, 0xdb68c2ca82ed2a06, 0x892179be91d43a44, 0xab69d82e364948d4};

const unsigned long long powers_ten_reverse[687] = {0xab69d82e364948d4, 0x892179be91d43a44, 0xdb68c2ca82ed2a06, 0xaf87023b9bf0ee6b, 0x8c6c01c9498d8b89, 0xe0accfa875af45a8, 0xb3bd72ed2af29e20, 0x8fcac257558ee4e6, 0xe61136f2227e3b0a, 0xb80dc58e81fe95a1, 0x933e37a534cbaae8, 0xeb96bf6ebadf77d9, 0xbc789925624c5fe1, 0x96c6e0eab509e64d, 0xf13e34aabb430a15, 0xc0fe908895cf3b44, 0x9a65406d44a5c903, 0xf70867153aa2db39, 0xc5a05277621be294, 0x9e19db92b4e31ba9, 0xfcf62c1dee382c42, 0xca5e89b18b602368, 0xa1e53af46f801c53, 0x81842f29f2cce376, 0xcf39e50feae16bf0, 0xa5c7ea73224deff3, 0x849feec281d7f329, 0xd433179d9c8cb841, 0xa9c2794ae3a3c69b, 0x87cec76f1c830549, 0xd94ad8b1c7380874, 0xadd57a27d29339f6, 0x8b112e86420f6192, 0xde81e40a034bcf50, 0xb201833b35d63f73, 0x8e679c2f5e44ff8f, 0xe3d8f9e563a198e5, 0xb6472e511c81471e, 0x91d28b7416cdd27e, 0xe950df20247c83fd, 0xbaa718e68396cffe, 0x95527a5202df0ccb, 0xeeea5d5004981478, 0xbf21e44003acdd2d, 0x98e7e9cccfbd7dbe, 0xf4a642e14c6262c9, 0xc3b8358109e84f07, 0x9c935e00d4b9d8d2, 0xfa856334878fc151, 0xc86ab5c39fa63441, 0xa0555e361951c367, 0x80444b5e7aa7cf85, 0xcd3a1230c43fb26f, 0xa42e74f3d032f526, 0x83585d8fd9c25db8, 0xd226fc195c6a2f8c, 0xa81f301449ee8c70, 0x867f59a9d4bed6c0, 0xd732290fbacaf134, 0xac2820d9623bf429, 0x89b9b3e11b6329bb, 0xdc5c5301c56b75f7, 0xb049dc016abc5e60, 0x8d07e33455637eb3, 0xe1a63853bbd26451, 0xb484f9dc9641e9db, 0x906a617d450187e2, 0xe7109bfba19c0c9d, 0xb8da1662e7b00a17, 0x93e1ab8252f33b46, 0xec9c459d51852ba3, 0xbd49d14aa79dbc82, 0x976e41088617ca02, 0xf24a01a73cf2dcd0, 0xc1d4ce1f63f57d73, 0x9b10a4e5e9913129, 0xf81aa16fdc1b81db, 0xc67bb4597ce2ce49, 0x9ec95d1463e8a507, 0xfe0efb53d30dd4d8, 0xcb3f2f7642717713, 0xa298f2c501f45f43, 0x8213f56a67f6b29c, 0xd01fef10a657842c, 0xa67ff273b8460357, 0x8533285c936b35df, 0xd51ea6fa85785631, 0xaa7eebfb9df9de8e, 0x8865899617fb1871, 0xda3c0f568cc4f3e9, 0xae9672aba3d0c321, 0x8bab8eefb6409c1a, 0xdf78e4b2bd342cf7, 0xb2c71d5bca9023f8, 0x8f05b1163ba6832d, 0xe4d5e82392a40515, 0xb7118682dbb66a77, 0x92746b9be2f8552c, 0xea53df5fd18d5514, 0xbb764c4ca7a44410, 0x95f83d0a1fb69cd9, 0xeff394dcff8a948f, 0xbff610b0cc6edd3f, 0x9991a6f3d6bf1766, 0xf5b5d7ec8acb58a3, 0xc491798a08a2ad4f, 0x9d412e0806e88aa6, 0xfb9b7cd9a4a7443c, 0xc94930ae1d529cfd, 0xa1075a24e4421731, 0x80d2ae83e9ce78f4, 0xce1de40642e3f4b9, 0xa4e4b66b68b65d61, 0x83ea2b892091e44e, 0xd31045a8341ca07c, 0xa8d9d1535ce3b396, 0x8714a775e3e95c78, 0xd8210befd30efa5a, 0xace73cbfdc0bfb7b, 0x8a5296ffe33cc930, 0xdd50f1996b947519, 0xb10d8e1456105dad, 0x8da471a9de737e24, 0xe2a0b5dc971f303a, 0xb54d5e4a127f59c8, 0x910ab1d4db9914a0, 0xe8111c87c5c1ba9a, 0xb9a74a0637ce2ee1, 0x9485d4d1c63e8be8, 0xeda2ee1c7064130c, 0xbe1bf1b059e9a8d6, 0x98165af37b2153df, 0xf356f7ebf83552fe, 0xc2abf989935ddbfe, 0x9bbcc7a142b17ccc, 0xf92e0c3537826146, 0xc75809c42c684dd1, 0x9f79a169bd203e41, 0xff290242c83396ce, 0xcc20ce9bd35c78a5, 0xa34d721642b06084, 0x82a45b450226b39d, 0xd106f86e69d785c8, 0xa738c6bebb12d16d, 0x85c7056562757457, 0xd60b3bd56a5586f2, 0xab3c2fddeeaad25b, 0x88fcf317f22241e2, 0xdb2e51bfe9d0696a, 0xaf58416654a6babb, 0x8c469ab843b89563, 0xe070f78d3927556b, 0xb38d92d760ec4455, 0x8fa475791a569d11, 0xe5d3ef282a242e82, 0xb7dcbf5354e9bece, 0x9316ff75dd87cbd8, 0xeb57ff22fc0c795a, 0xbc4665b596706115, 0x969eb7c47859e744, 0xf0fdf2d3f3c30b9f, 0xc0cb28a98fcf3c80, 0x9a3c2087a63f6399, 0xf6c69a72a3989f5c, 0xc56baec21c7a1916, 0x9defbf01b061adab, 0xfcb2cb35e702af78, 0xca28a291859bbf93, 0xa1ba1ba79e1632dc, 0x8161afb94b44f57d, 0xcf02b2c21207ef2f, 0xa59bc234db398c25, 0x847c9b5d7c2e09b7, 0xd3fa922f2d1675f2, 0xa99541bf57452b28, 0x87aa9aff79042287, 0xd910f7ff28069da4, 0xada72ccc20054aea, 0x8aec23d680043bee, 0xde469fbd99a05fe3, 0xb1d219647ae6b31c, 0x8e41ade9fbebc27d, 0xe39c49765fdf9d95, 0xb616a12b7fe617aa, 0x91abb422ccb812ef, 0xe912b9d1478ceb17, 0xba756174393d88e0, 0x952ab45cfa97a0b3, 0xeeaaba2e5dbf6785, 0xbeeefb584aff8604, 0x98bf2f79d5993803, 0xf46518c2ef5b8cd1, 0xc38413cf25e2d70e, 0x9c69a97284b578d8, 0xfa42a8b73abbf48d, 0xc83553c5c8965d3d, 0xa02aa96b06deb0fe, 0x802221226be55a65, 0xcd036837130890a1, 0xa402b9c5a8d3a6e7, 0x8335616aed761f1f, 0xd1ef0244af2364ff, 0xa7f26836f282b733, 0x865b86925b9bc5c2, 0xd6f8d7509292d603, 0xabfa45da0edbde69, 0x899504ae72497eba, 0xdc21a1171d42645d, 0xb01ae745b101e9e4, 0x8ce2529e2734bb1d, 0xe16a1dc9d8545e95, 0xb454e4a179dd1877, 0x9043ea1ac7e41393, 0xe6d3102ad96cec1e, 0xb8a8d9bbe123f018, 0x93ba47c980e98ce0, 0xec5d3fa8ce427b00, 0xbd176620a501fc00, 0x9745eb4d50ce6333, 0xf209787bb47d6b85, 0xc1a12d2fc3978937, 0x9ae757596946075f, 0xf7d88bc24209a565, 0xc646d63501a1511e, 0x9e9f11c4014dda7e, 0xfdcb4fa002162a63, 0xcb090c8001ab551c, 0xa26da3999aef774a, 0x81f14fae158c5f6e, 0xcfe87f7cef46ff17, 0xa6539930bf6bff46, 0x850fadc09923329e, 0xd4e5e2cdc1d1ea96, 0xaa51823e34a7eedf, 0x884134fe908658b2, 0xda01ee641a708dea, 0xae67f1e9aec07188, 0x8b865b215899f46d, 0xdf3d5e9bc0f653e1, 0xb2977ee300c50fe7, 0x8edf98b59a373fec, 0xe498f455c38b997a, 0xb6e0c377cfa2e12e, 0x924d692ca61be758, 0xea1575143cf97227, 0xbb445da9ca61281f, 0x95d04aee3b80ece6, 0xefb3ab16c59b14a3, 0xbfc2ef456ae276e9, 0x9968bf6abbe85f20, 0xf5746577930d6501, 0xc45d1df942711d9a, 0x9d174b2dcec0e47b, 0xfb5878494ace3a5f, 0xc913936dd571c84c, 0xa0dc75f1778e39d6, 0x80b05e5ac60b6178, 0xcde6fd5e09abcf27, 0xa4b8cab1a1563f52, 0x83c7088e1aab65db, 0xd2d80db02aabd62c, 0xa8acd7c0222311bd, 0x86f0ac99b4e8dafd, 0xd7e77a8f87daf7fc, 0xacb92ed9397bf996, 0x8a2dbf142dfcc7ab, 0xdd15fe86affad912, 0xb0de65388cc8ada8, 0x8d7eb76070a08aed, 0xe264589a4dcdab15, 0xb51d13aea4a488dd, 0x90e40fbeea1d3a4b, 0xe7d34c64a9c85d44, 0xb975d6b6ee39e437, 0x945e455f24fb1cf9, 0xed63a231d4c4fb27, 0xbde94e8e43d0c8ec, 0x97edd871cfda3a57, 0xf316271c7fc3908b, 0xc2781f49ffcfa6d5, 0x9b934c3b330c8577, 0xf8ebad2b84e0d58c, 0xc722f0ef9d80aad6, 0x9f4f2726179a2245, 0xfee50b7025c36a08, 0xcbea6f8ceb02bb3a, 0xa321f2d7226895c8, 0x82818f1281ed44a0, 0xd0cf4b50cfe20766, 0xa70c3c40a64e6c52, 0x85a36366eb71f041, 0xd5d238a4abe98068, 0xab0e93b6efee0054, 0x88d8762bf324cd10, 0xdaf3f04651d47b4c, 0xaf298d050e4395d7, 0x8c213d9da502de45, 0xe0352f62a19e306f, 0xb35dbf821ae4f38c, 0x8f7e32ce7bea5c70, 0xe596b7b0c643c719, 0xb7abc627050305ae, 0x92efd1b8d0cf37be, 0xeb194f8e1ae525fd, 0xbc143fa4e250eb31, 0x96769950b50d88f4, 0xf0bdc21abb48db20, 0xc097ce7bc90715b3, 0x9a130b963a6c115c, 0xf684df56c3e01bc7, 0xc5371912364ce305, 0x9dc5ada82b70b59e, 0xfc6f7c4045812296, 0xc9f2c9cd04674edf, 0xa18f07d736b90be5, 0x813f3978f8940984, 0xcecb8f27f4200f3a, 0xa56fa5b99019a5c8, 0x84595161401484a0, 0xd3c21bcecceda100, 0xa968163f0a57b400, 0x878678326eac9000, 0xd8d726b7177a8000, 0xad78ebc5ac620000, 0x8ac7230489e80000, 0xde0b6b3a76400000, 0xb1a2bc2ec5000000, 0x8e1bc9bf04000000, 0xe35fa931a0000000, 0xb5e620f480000000, 0x9184e72a00000000, 0xe8d4a51000000000, 0xba43b74000000000, 0x9502f90000000000, 0xee6b280000000000, 0xbebc200000000000, 0x9896800000000000, 0xf424000000000000, 0xc350000000000000, 0x9c40000000000000, 0xfa00000000000000, 0xc800000000000000, 0xa000000000000000, 0x8000000000000000, 0xcccccccccccccccd, 0xa3d70a3d70a3d70a, 0x83126e978d4fdf3b, 0xd1b71758e219652c, 0xa7c5ac471b478423, 0x8637bd05af6c69b6, 0xd6bf94d5e57a42bc, 0xabcc77118461cefd, 0x89705f4136b4a597, 0xdbe6fecebdedd5bf, 0xafebff0bcb24aaff, 0x8cbccc096f5088cc, 0xe12e13424bb40e13, 0xb424dc35095cd80f, 0x901d7cf73ab0acd9, 0xe69594bec44de15b, 0xb877aa3236a4b449, 0x9392ee8e921d5d07, 0xec1e4a7db69561a5, 0xbce5086492111aeb, 0x971da05074da7bef, 0xf1c90080baf72cb1, 0xc16d9a0095928a27, 0x9abe14cd44753b53, 0xf79687aed3eec551, 0xc612062576589ddb, 0x9e74d1b791e07e48, 0xfd87b5f28300ca0e, 0xcad2f7f5359a3b3e, 0xa2425ff75e14fc32, 0x81ceb32c4b43fcf5, 0xcfb11ead453994ba, 0xa6274bbdd0fadd62, 0x84ec3c97da624ab5, 0xd4ad2dbfc3d07788, 0xaa242499697392d3, 0x881cea14545c7575, 0xd9c7dced53c72256, 0xae397d8aa96c1b78, 0x8b61313bbabce2c6, 0xdf01e85f912e37a3, 0xb267ed1940f1c61c, 0x8eb98a7a9a5b04e3, 0xe45c10c42a2b3b06, 0xb6b00d69bb55c8d1, 0x9226712162ab070e, 0xe9d71b689dde71b0, 0xbb127c53b17ec159, 0x95a8637627989aae, 0xef73d256a5c0f77d, 0xbf8fdb78849a5f97, 0x993fe2c6d07b7fac, 0xf53304714d9265e0, 0xc428d05aa4751e4d, 0x9ced737bb6c4183d, 0xfb158592be068d2f, 0xc8de047564d20a8c, 0xa0b19d2ab70e6ed6, 0x808e17555f3ebf12, 0xcdb02555653131b6, 0xa48ceaaab75a8e2b, 0x83a3eeeef9153e89, 0xd29fe4b18e88640f, 0xa87fea27a539e9a5, 0x86ccbb52ea94baeb, 0xd7adf884aa879177, 0xac8b2d36eed2dac6, 0x8a08f0f8bf0f156b, 0xdcdb1b2798182245, 0xb0af48ec79ace837, 0x8d590723948a535f, 0xe2280b6c20dd5232, 0xb4ecd5f01a4aa828, 0x90bd77f3483bb9ba, 0xe7958cb87392c2c3, 0xb94470938fa89bcf, 0x9436c0760c86e30c, 0xed246723473e3813, 0xbdb6b8e905cb600f, 0x97c560ba6b0919a6, 0xf2d56790ab41c2a3, 0xc24452da229b021c, 0x9b69dbe1b548ce7d, 0xf8a95fcf88747d94, 0xc6ede63fa05d3144, 0x9f24b832e6b0f436, 0xfea126b7d78186bd, 0xcbb41ef979346bca, 0xa2f67f2dfa90563b, 0x825ecc24c8737830, 0xd097ad07a71f26b2, 0xa6dfbd9fb8e5b88f, 0x857fcae62d8493a5, 0xd59944a37c0752a2, 0xaae103b5fcd2a882, 0x88b402f7fd75539b, 0xdab99e59958885c5, 0xaefae51477a06b04, 0x8bfbea76c619ef36, 0xdff9772470297ebd, 0xb32df8e9f3546564, 0x8f57fa54c2a9eab7, 0xe55990879ddcaabe, 0xb77ada0617e3bbcb, 0x92c8ae6b464fc96f, 0xeadab0aba3b2dbe5, 0xbbe226efb628afeb, 0x964e858c91ba2655, 0xf07da27a82c37088, 0xc06481fb9bcf8d3a, 0x99ea0196163fa42e, 0xf64335bcf065d37d, 0xc5029163f384a931, 0x9d9ba7832936edc1, 0xfc2c3f3841f17c68, 0xc9bcff6034c13053, 0xa163ff802a3426a9, 0x811ccc668829b887, 0xce947a3da6a9273e, 0xa54394fe1eedb8ff, 0x843610cb4bf160cc, 0xd389b47879823479, 0xa93af6c6c79b5d2e, 0x87625f056c7c4a8b, 0xd89d64d57a607745, 0xad4ab7112eb3929e, 0x8aa22c0dbef60ee4, 0xddd0467c64bce4a1, 0xb1736b96b6fd83b4, 0x8df5efabc5979c90, 0xe3231912d5bf60e6, 0xb5b5ada8aaff80b8, 0x915e2486ef32cd60, 0xe896a0d7e51e1566, 0xba121a4650e4ddec, 0x94db483840b717f0, 0xee2ba6c0678b597f, 0xbe89523386091466, 0x986ddb5c6b3a76b8, 0xf3e2f893dec3f126, 0xc31bfa0fe5698db8, 0x9c1661a651213e2d, 0xf9bd690a1b68637b, 0xc7caba6e7c5382c9, 0x9fd561f1fd0f9bd4, 0xffbbcfe994e5c620, 0xcc963fee10b7d1b3, 0xa3ab66580d5fdaf6, 0x82ef85133de648c5, 0xd17f3b51fca3a7a1, 0xa798fc4196e952e7, 0x8613fd0145877586, 0xd686619ba27255a3, 0xab9eb47c81f5114f, 0x894bc396ce5da772, 0xdbac6c247d62a584, 0xafbd2350644eead0, 0x8c974f7383725573, 0xe0f218b8d25088b8, 0xb3f4e093db73a093, 0x8ff71a0fe2c2e6dc, 0xe65829b3046b0afa, 0xb84687c269ef3bfb, 0x936b9fcebb25c996, 0xebdf661791d60f56, 0xbcb2b812db11a5de, 0x96f5600f15a7b7e5, 0xf18899b1bc3f8ca2, 0xc13a148e3032d6e8, 0x9a94dd3e8cf578ba, 0xf7549530e188c129, 0xc5dd44271ad3cdba, 0x9e4a9cec15763e2f, 0xfd442e4688bd304b, 0xca9cf1d206fdc03c, 0xa21727db38cb0030, 0x81ac1fe293d599c0, 0xcf79cc9db955c2cc, 0xa5fb0a17c777cf0a, 0x84c8d4dfd2c63f3b, 0xd47487cc8470652b, 0xa9f6d30a038d1dbc, 0x87f8a8d4cfa417ca, 0xd98ddaee19068c76, 0xae0b158b4738705f, 0x8b3c113c38f9f37f, 0xdec681f9f4c31f31, 0xb23867fb2a35b28e, 0x8e938662882af53e, 0xe41f3d6a7377eeca, 0xb67f6455292cbf08, 0x91ff83775423cc06, 0xe998d258869facd7, 0xbae0a846d2195713, 0x9580869f0e7aac0f, 0xef340a98172aace5, 0xbf5cd54678eef0b7, 0x991711052d8bf3c5, 0xf4f1b4d515acb93c, 0xc3f490aa77bd60fd, 0x9cc3a6eec6311a64, 0xfad2a4b13d1b5d6c, 0xc8a883c0fdaf7df0, 0xa086cfcd97bf97f4, 0x806bd9714632dff6, 0xcd795be870516656, 0xa46116538d0deb78, 0x8380dea93da4bc60, 0xd267caa862a12d67, 0xa8530886b54dbdec, 0x86a8d39ef77164bd, 0xd77485cb25823ac7, 0xac5d37d5b79b6239, 0x89e42caaf9491b61, 0xdca04777f541c568, 0xb080392cc4349ded, 0x8d3360f09cf6e4bd, 0xe1ebce4dc7f16dfc, 0xb4bca50b065abe63, 0x9096ea6f3848984f, 0xe757dd7ec07426e5, 0xb913179899f68584, 0x940f4613ae5ed137, 0xece53cec4a314ebe, 0xbd8430bd08277231, 0x979cf3ca6cec5b5b, 0xf294b943e17a2bc4, 0xc21094364dfb5637, 0x9b407691d7fc44f8, 0xf867241c8cc6d4c1, 0xc6b8e9b0709f109a, 0x9efa548d26e5a6e2, 0xfe5d54150b090b03, 0xcb7ddcdda26da269, 0xa2cb1717b52481ed, 0x823c12795db6ce57, 0xd0601d8efc57b08c, 0xa6b34ad8c9dfc070, 0x855c3be0a17fcd26, 0xd5605fcdcf32e1d7, 0xaab37fd7d8f58179, 0x888f99797a5e012d, 0xda7f5bf590966849, 0xaecc49914078536d, 0x8bd6a141006042be, 0xdfbdcece67006ac9, 0xb2fe3f0b8599ef08, 0x8f31cc0937ae58d3, 0xe51c79a85916f485, 0xb749faed14125d37, 0x92a1958a7675175f, 0xea9c227723ee8bcb, 0xbbb01b9283253ca3, 0x96267c7535b763b5, 0xf03d93eebc589f88, 0xc0314325637a193a, 0x99c102844f94e0fb, 0xf6019da07f549b2b, 0xc4ce17b399107c23, 0x9d71ac8fada6c9b5, 0xfbe9141915d7a922, 0xc987434744ac874f, 0xa139029f6a239f72, 0x80fa687f881c7f8e, 0xce5d73ff402d98e4, 0xa5178fff668ae0b6, 0x8412d9991ed58092, 0xd3515c2831559a83, 0xa90de3535aaae202, 0x873e4f75e2224e68, 0xd863b256369d4a41, 0xad1c8eab5ee43b67, 0x8a7d3eef7f1cfc52, 0xdd95317f31c7fa1d, 0xb1442798f49ffb4b, 0x8dd01fad907ffc3c, 0xe2e69915b3fff9f9, 0xb58547448ffffb2e, 0x91376c36d99995be, 0xe858ad248f5c22ca, 0xb9e08a83a5e34f08, 0x94b3a202eb1c3f39, 0xedec366b11c6cb8f, 0xbe5691ef416bd60c, 0x9845418c345644d7, 0xf3a20279ed56d48a, 0xc2e801fb244576d5, 0x9becce62836ac577, 0xf97ae3d0d2446f25, 0xc795830d75038c1e, 0x9faacf3df73609b1, 0xff77b1fcbebcdc4f, 0xcc5fc196fefd7d0c, 0xa37fce126597973d, 0x82cca4db847945ca, 0xd1476e2c07286faa, 0xa76c582338ed2622, 0x85f0468293f0eb4e, 0xd64d3d9db981787d, 0xab70fe17c79ac6ca, 0x892731ac9faf056f, 0xdb71e91432b1a24b, 0xaf8e5410288e1b6f, 0x8c71dcd9ba0b4926, 0xe0b62e2929aba83c, 0xb3c4f1ba87bc8697, 0x8fd0c16206306bac, 0xe61acf033d1a45df, 0xb8157268fdae9e4c, 0x93445b8731587ea3, 0xeba09271e88d976c, 0xbc807527ed3e12bd, 0x96cd2a865764dbca, 0xf148440a256e2c77, 0xc1069cd4eabe89f9, 0x9a6bb0aa55653b2d, 0xf712b443bbd52b7c, 0xc5a890362fddbc63, 0x9e20735e8cb16382, 0xfd00b897478238d1, 0xca66fa129f9b60a7, 0xa1ebfb4219491a1f, 0x818995ce7aa0e1b2, 0xcf42894a5dce35ea, 0xa5ced43b7e3e9188, 0x84a57695fe98746d, 0xd43bf0effdc0ba48, 0xa9c98d8ccb009506, 0x87d4713d6f33aa6c, 0xd953e8624b85dd79, 0xaddcb9e83c6b1794, 0x8b16fb203055ac76, 0xde8b2b66b3bc4724, 0xb208ef855c969f50, 0x8e6d8c6ab0787f73, 0xe3e27a444d8d98b8, 0xb64ec836a47146fa, 0x91d8a02bb6c10594, 0xe95a99df8ace6f54, 0xbaaee17fa23ebf76, 0x9558b4661b6565f8, 0xeef453d6923bd65a, 0xbf29dcaba82fdeae};

const double _10en[324 * 2 + 1] = {0, 1e-323, 1e-322, 1e-321, 1e-320, 1e-319, 1e-318, 1e-317, 1e-316, 1e-315, 1e-314, 1e-313, 1e-312, 1e-311, 1e-310, 1e-309, 1e-308, 1e-307, 1e-306, 1e-305, 1e-304, 1e-303, 1e-302, 1e-301, 1e-300, 1e-299, 1e-298, 1e-297, 1e-296, 1e-295, 1e-294, 1e-293, 1e-292, 1e-291, 1e-290, 1e-289, 1e-288, 1e-287, 1e-286, 1e-285, 1e-284, 1e-283, 1e-282, 1e-281, 1e-280, 1e-279, 1e-278, 1e-277, 1e-276, 1e-275, 1e-274, 1e-273, 1e-272, 1e-271, 1e-270, 1e-269, 1e-268, 1e-267, 1e-266, 1e-265, 1e-264, 1e-263, 1e-262, 1e-261, 1e-260, 1e-259, 1e-258, 1e-257, 1e-256, 1e-255, 1e-254, 1e-253, 1e-252, 1e-251, 1e-250, 1e-249, 1e-248, 1e-247, 1e-246, 1e-245, 1e-244, 1e-243, 1e-242, 1e-241, 1e-240, 1e-239, 1e-238, 1e-237, 1e-236, 1e-235, 1e-234, 1e-233, 1e-232, 1e-231, 1e-230, 1e-229, 1e-228, 1e-227, 1e-226, 1e-225, 1e-224, 1e-223, 1e-222, 1e-221, 1e-220, 1e-219, 1e-218, 1e-217, 1e-216, 1e-215, 1e-214, 1e-213, 1e-212, 1e-211, 1e-210, 1e-209, 1e-208, 1e-207, 1e-206, 1e-205, 1e-204, 1e-203, 1e-202, 1e-201, 1e-200, 1e-199, 1e-198, 1e-197, 1e-196, 1e-195, 1e-194, 1e-193, 1e-192, 1e-191, 1e-190, 1e-189, 1e-188, 1e-187, 1e-186, 1e-185, 1e-184, 1e-183, 1e-182, 1e-181, 1e-180, 1e-179, 1e-178, 1e-177, 1e-176, 1e-175, 1e-174, 1e-173, 1e-172, 1e-171, 1e-170, 1e-169, 1e-168, 1e-167, 1e-166, 1e-165, 1e-164, 1e-163, 1e-162, 1e-161, 1e-160, 1e-159, 1e-158, 1e-157, 1e-156, 1e-155, 1e-154, 1e-153, 1e-152, 1e-151, 1e-150, 1e-149, 1e-148, 1e-147, 1e-146, 1e-145, 1e-144, 1e-143, 1e-142, 1e-141, 1e-140, 1e-139, 1e-138, 1e-137, 1e-136, 1e-135, 1e-134, 1e-133, 1e-132, 1e-131, 1e-130, 1e-129, 1e-128, 1e-127, 1e-126, 1e-125, 1e-124, 1e-123, 1e-122, 1e-121, 1e-120, 1e-119, 1e-118, 1e-117, 1e-116, 1e-115, 1e-114, 1e-113, 1e-112, 1e-111, 1e-110, 1e-109, 1e-108, 1e-107, 1e-106, 1e-105, 1e-104, 1e-103, 1e-102, 1e-101, 1e-100, 1e-99, 1e-98, 1e-97, 1e-96, 1e-95, 1e-94, 1e-93, 1e-92, 1e-91, 1e-90, 1e-89, 1e-88, 1e-87, 1e-86, 1e-85, 1e-84, 1e-83, 1e-82, 1e-81, 1e-80, 1e-79, 1e-78, 1e-77, 1e-76, 1e-75, 1e-74, 1e-73, 1e-72, 1e-71, 1e-70, 1e-69, 1e-68, 1e-67, 1e-66, 1e-65, 1e-64, 1e-63, 1e-62, 1e-61, 1e-60, 1e-59, 1e-58, 1e-57, 1e-56, 1e-55, 1e-54, 1e-53, 1e-52, 1e-51, 1e-50, 1e-49, 1e-48, 1e-47, 1e-46, 1e-45, 1e-44, 1e-43, 1e-42, 1e-41, 1e-40, 1e-39, 1e-38, 1e-37, 1e-36, 1e-35, 1e-34, 1e-33, 1e-32, 1e-31, 1e-30, 1e-29, 1e-28, 1e-27, 1e-26, 1e-25, 1e-24, 1e-23, 1e-22, 1e-21, 1e-20, 1e-19, 1e-18, 1e-17, 1e-16, 1e-15, 1e-14, 1e-13, 1e-12, 1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19, 1e20, 1e21, 1e22, 1e23, 1e24, 1e25, 1e26, 1e27, 1e28, 1e29, 1e30, 1e31, 1e32, 1e33, 1e34, 1e35, 1e36, 1e37, 1e38, 1e39, 1e40, 1e41, 1e42, 1e43, 1e44, 1e45, 1e46, 1e47, 1e48, 1e49, 1e50, 1e51, 1e52, 1e53, 1e54, 1e55, 1e56, 1e57, 1e58, 1e59, 1e60, 1e61, 1e62, 1e63, 1e64, 1e65, 1e66, 1e67, 1e68, 1e69, 1e70, 1e71, 1e72, 1e73, 1e74, 1e75, 1e76, 1e77, 1e78, 1e79, 1e80, 1e81, 1e82, 1e83, 1e84, 1e85, 1e86, 1e87, 1e88, 1e89, 1e90, 1e91, 1e92, 1e93, 1e94, 1e95, 1e96, 1e97, 1e98, 1e99, 1e100, 1e101, 1e102, 1e103, 1e104, 1e105, 1e106, 1e107, 1e108, 1e109, 1e110, 1e111, 1e112, 1e113, 1e114, 1e115, 1e116, 1e117, 1e118, 1e119, 1e120, 1e121, 1e122, 1e123, 1e124, 1e125, 1e126, 1e127, 1e128, 1e129, 1e130, 1e131, 1e132, 1e133, 1e134, 1e135, 1e136, 1e137, 1e138, 1e139, 1e140, 1e141, 1e142, 1e143, 1e144, 1e145, 1e146, 1e147, 1e148, 1e149, 1e150, 1e151, 1e152, 1e153, 1e154, 1e155, 1e156, 1e157, 1e158, 1e159, 1e160, 1e161, 1e162, 1e163, 1e164, 1e165, 1e166, 1e167, 1e168, 1e169, 1e170, 1e171, 1e172, 1e173, 1e174, 1e175, 1e176, 1e177, 1e178, 1e179, 1e180, 1e181, 1e182, 1e183, 1e184, 1e185, 1e186, 1e187, 1e188, 1e189, 1e190, 1e191, 1e192, 1e193, 1e194, 1e195, 1e196, 1e197, 1e198, 1e199, 1e200, 1e201, 1e202, 1e203, 1e204, 1e205, 1e206, 1e207, 1e208, 1e209, 1e210, 1e211, 1e212, 1e213, 1e214, 1e215, 1e216, 1e217, 1e218, 1e219, 1e220, 1e221, 1e222, 1e223, 1e224, 1e225, 1e226, 1e227, 1e228, 1e229, 1e230, 1e231, 1e232, 1e233, 1e234, 1e235, 1e236, 1e237, 1e238, 1e239, 1e240, 1e241, 1e242, 1e243, 1e244, 1e245, 1e246, 1e247, 1e248, 1e249, 1e250, 1e251, 1e252, 1e253, 1e254, 1e255, 1e256, 1e257, 1e258, 1e259, 1e260, 1e261, 1e262, 1e263, 1e264, 1e265, 1e266, 1e267, 1e268, 1e269, 1e270, 1e271, 1e272, 1e273, 1e274, 1e275, 1e276, 1e277, 1e278, 1e279, 1e280, 1e281, 1e282, 1e283, 1e284, 1e285, 1e286, 1e287, 1e288, 1e289, 1e290, 1e291, 1e292, 1e293, 1e294, 1e295, 1e296, 1e297, 1e298, 1e299, 1e300, 1e301, 1e302, 1e303, 1e304, 1e305, 1e306, 1e307, 1e308, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16};

const int digit_000_999[1000] = {808463920, 825241136, 842018352, 858795568, 875572784, 892350000, 909127216, 925904432, 942681648, 959458864, 808529456, 825306672, 842083888, 858861104, 875638320, 892415536, 909192752, 925969968, 942747184, 959524400, 808594992, 825372208, 842149424, 858926640, 875703856, 892481072, 909258288, 926035504, 942812720, 959589936, 808660528, 825437744, 842214960, 858992176, 875769392, 892546608, 909323824, 926101040, 942878256, 959655472, 808726064, 825503280, 842280496, 859057712, 875834928, 892612144, 909389360, 926166576, 942943792, 959721008, 808791600, 825568816, 842346032, 859123248, 875900464, 892677680, 909454896, 926232112, 943009328, 959786544, 808857136, 825634352, 842411568, 859188784, 875966000, 892743216, 909520432, 926297648, 943074864, 959852080, 808922672, 825699888, 842477104, 859254320, 876031536, 892808752, 909585968, 926363184, 943140400, 959917616, 808988208, 825765424, 842542640, 859319856, 876097072, 892874288, 909651504, 926428720, 943205936, 959983152, 809053744, 825830960, 842608176, 859385392, 876162608, 892939824, 909717040, 926494256, 943271472, 960048688, 808463921, 825241137, 842018353, 858795569, 875572785, 892350001, 909127217, 925904433, 942681649, 959458865, 808529457, 825306673, 842083889, 858861105, 875638321, 892415537, 909192753, 925969969, 942747185, 959524401, 808594993, 825372209, 842149425, 858926641, 875703857, 892481073, 909258289, 926035505, 942812721, 959589937, 808660529, 825437745, 842214961, 858992177, 875769393, 892546609, 909323825, 926101041, 942878257, 959655473, 808726065, 825503281, 842280497, 859057713, 875834929, 892612145, 909389361, 926166577, 942943793, 959721009, 808791601, 825568817, 842346033, 859123249, 875900465, 892677681, 909454897, 926232113, 943009329, 959786545, 808857137, 825634353, 842411569, 859188785, 875966001, 892743217, 909520433, 926297649, 943074865, 959852081, 808922673, 825699889, 842477105, 859254321, 876031537, 892808753, 909585969, 926363185, 943140401, 959917617, 808988209, 825765425, 842542641, 859319857, 876097073, 892874289, 909651505, 926428721, 943205937, 959983153, 809053745, 825830961, 842608177, 859385393, 876162609, 892939825, 909717041, 926494257, 943271473, 960048689, 808463922, 825241138, 842018354, 858795570, 875572786, 892350002, 909127218, 925904434, 942681650, 959458866, 808529458, 825306674, 842083890, 858861106, 875638322, 892415538, 909192754, 925969970, 942747186, 959524402, 808594994, 825372210, 842149426, 858926642, 875703858, 892481074, 909258290, 926035506, 942812722, 959589938, 808660530, 825437746, 842214962, 858992178, 875769394, 892546610, 909323826, 926101042, 942878258, 959655474, 808726066, 825503282, 842280498, 859057714, 875834930, 892612146, 909389362, 926166578, 942943794, 959721010, 808791602, 825568818, 842346034, 859123250, 875900466, 892677682, 909454898, 926232114, 943009330, 959786546, 808857138, 825634354, 842411570, 859188786, 875966002, 892743218, 909520434, 926297650, 943074866, 959852082, 808922674, 825699890, 842477106, 859254322, 876031538, 892808754, 909585970, 926363186, 943140402, 959917618, 808988210, 825765426, 842542642, 859319858, 876097074, 892874290, 909651506, 926428722, 943205938, 959983154, 809053746, 825830962, 842608178, 859385394, 876162610, 892939826, 909717042, 926494258, 943271474, 960048690, 808463923, 825241139, 842018355, 858795571, 875572787, 892350003, 909127219, 925904435, 942681651, 959458867, 808529459, 825306675, 842083891, 858861107, 875638323, 892415539, 909192755, 925969971, 942747187, 959524403, 808594995, 825372211, 842149427, 858926643, 875703859, 892481075, 909258291, 926035507, 942812723, 959589939, 808660531, 825437747, 842214963, 858992179, 875769395, 892546611, 909323827, 926101043, 942878259, 959655475, 808726067, 825503283, 842280499, 859057715, 875834931, 892612147, 909389363, 926166579, 942943795, 959721011, 808791603, 825568819, 842346035, 859123251, 875900467, 892677683, 909454899, 926232115, 943009331, 959786547, 808857139, 825634355, 842411571, 859188787, 875966003, 892743219, 909520435, 926297651, 943074867, 959852083, 808922675, 825699891, 842477107, 859254323, 876031539, 892808755, 909585971, 926363187, 943140403, 959917619, 808988211, 825765427, 842542643, 859319859, 876097075, 892874291, 909651507, 926428723, 943205939, 959983155, 809053747, 825830963, 842608179, 859385395, 876162611, 892939827, 909717043, 926494259, 943271475, 960048691, 808463924, 825241140, 842018356, 858795572, 875572788, 892350004, 909127220, 925904436, 942681652, 959458868, 808529460, 825306676, 842083892, 858861108, 875638324, 892415540, 909192756, 925969972, 942747188, 959524404, 808594996, 825372212, 842149428, 858926644, 875703860, 892481076, 909258292, 926035508, 942812724, 959589940, 808660532, 825437748, 842214964, 858992180, 875769396, 892546612, 909323828, 926101044, 942878260, 959655476, 808726068, 825503284, 842280500, 859057716, 875834932, 892612148, 909389364, 926166580, 942943796, 959721012, 808791604, 825568820, 842346036, 859123252, 875900468, 892677684, 909454900, 926232116, 943009332, 959786548, 808857140, 825634356, 842411572, 859188788, 875966004, 892743220, 909520436, 926297652, 943074868, 959852084, 808922676, 825699892, 842477108, 859254324, 876031540, 892808756, 909585972, 926363188, 943140404, 959917620, 808988212, 825765428, 842542644, 859319860, 876097076, 892874292, 909651508, 926428724, 943205940, 959983156, 809053748, 825830964, 842608180, 859385396, 876162612, 892939828, 909717044, 926494260, 943271476, 960048692, 808463925, 825241141, 842018357, 858795573, 875572789, 892350005, 909127221, 925904437, 942681653, 959458869, 808529461, 825306677, 842083893, 858861109, 875638325, 892415541, 909192757, 925969973, 942747189, 959524405, 808594997, 825372213, 842149429, 858926645, 875703861, 892481077, 909258293, 926035509, 942812725, 959589941, 808660533, 825437749, 842214965, 858992181, 875769397, 892546613, 909323829, 926101045, 942878261, 959655477, 808726069, 825503285, 842280501, 859057717, 875834933, 892612149, 909389365, 926166581, 942943797, 959721013, 808791605, 825568821, 842346037, 859123253, 875900469, 892677685, 909454901, 926232117, 943009333, 959786549, 808857141, 825634357, 842411573, 859188789, 875966005, 892743221, 909520437, 926297653, 943074869, 959852085, 808922677, 825699893, 842477109, 859254325, 876031541, 892808757, 909585973, 926363189, 943140405, 959917621, 808988213, 825765429, 842542645, 859319861, 876097077, 892874293, 909651509, 926428725, 943205941, 959983157, 809053749, 825830965, 842608181, 859385397, 876162613, 892939829, 909717045, 926494261, 943271477, 960048693, 808463926, 825241142, 842018358, 858795574, 875572790, 892350006, 909127222, 925904438, 942681654, 959458870, 808529462, 825306678, 842083894, 858861110, 875638326, 892415542, 909192758, 925969974, 942747190, 959524406, 808594998, 825372214, 842149430, 858926646, 875703862, 892481078, 909258294, 926035510, 942812726, 959589942, 808660534, 825437750, 842214966, 858992182, 875769398, 892546614, 909323830, 926101046, 942878262, 959655478, 808726070, 825503286, 842280502, 859057718, 875834934, 892612150, 909389366, 926166582, 942943798, 959721014, 808791606, 825568822, 842346038, 859123254, 875900470, 892677686, 909454902, 926232118, 943009334, 959786550, 808857142, 825634358, 842411574, 859188790, 875966006, 892743222, 909520438, 926297654, 943074870, 959852086, 808922678, 825699894, 842477110, 859254326, 876031542, 892808758, 909585974, 926363190, 943140406, 959917622, 808988214, 825765430, 842542646, 859319862, 876097078, 892874294, 909651510, 926428726, 943205942, 959983158, 809053750, 825830966, 842608182, 859385398, 876162614, 892939830, 909717046, 926494262, 943271478, 960048694, 808463927, 825241143, 842018359, 858795575, 875572791, 892350007, 909127223, 925904439, 942681655, 959458871, 808529463, 825306679, 842083895, 858861111, 875638327, 892415543, 909192759, 925969975, 942747191, 959524407, 808594999, 825372215, 842149431, 858926647, 875703863, 892481079, 909258295, 926035511, 942812727, 959589943, 808660535, 825437751, 842214967, 858992183, 875769399, 892546615, 909323831, 926101047, 942878263, 959655479, 808726071, 825503287, 842280503, 859057719, 875834935, 892612151, 909389367, 926166583, 942943799, 959721015, 808791607, 825568823, 842346039, 859123255, 875900471, 892677687, 909454903, 926232119, 943009335, 959786551, 808857143, 825634359, 842411575, 859188791, 875966007, 892743223, 909520439, 926297655, 943074871, 959852087, 808922679, 825699895, 842477111, 859254327, 876031543, 892808759, 909585975, 926363191, 943140407, 959917623, 808988215, 825765431, 842542647, 859319863, 876097079, 892874295, 909651511, 926428727, 943205943, 959983159, 809053751, 825830967, 842608183, 859385399, 876162615, 892939831, 909717047, 926494263, 943271479, 960048695, 808463928, 825241144, 842018360, 858795576, 875572792, 892350008, 909127224, 925904440, 942681656, 959458872, 808529464, 825306680, 842083896, 858861112, 875638328, 892415544, 909192760, 925969976, 942747192, 959524408, 808595000, 825372216, 842149432, 858926648, 875703864, 892481080, 909258296, 926035512, 942812728, 959589944, 808660536, 825437752, 842214968, 858992184, 875769400, 892546616, 909323832, 926101048, 942878264, 959655480, 808726072, 825503288, 842280504, 859057720, 875834936, 892612152, 909389368, 926166584, 942943800, 959721016, 808791608, 825568824, 842346040, 859123256, 875900472, 892677688, 909454904, 926232120, 943009336, 959786552, 808857144, 825634360, 842411576, 859188792, 875966008, 892743224, 909520440, 926297656, 943074872, 959852088, 808922680, 825699896, 842477112, 859254328, 876031544, 892808760, 909585976, 926363192, 943140408, 959917624, 808988216, 825765432, 842542648, 859319864, 876097080, 892874296, 909651512, 926428728, 943205944, 959983160, 809053752, 825830968, 842608184, 859385400, 876162616, 892939832, 909717048, 926494264, 943271480, 960048696, 808463929, 825241145, 842018361, 858795577, 875572793, 892350009, 909127225, 925904441, 942681657, 959458873, 808529465, 825306681, 842083897, 858861113, 875638329, 892415545, 909192761, 925969977, 942747193, 959524409, 808595001, 825372217, 842149433, 858926649, 875703865, 892481081, 909258297, 926035513, 942812729, 959589945, 808660537, 825437753, 842214969, 858992185, 875769401, 892546617, 909323833, 926101049, 942878265, 959655481, 808726073, 825503289, 842280505, 859057721, 875834937, 892612153, 909389369, 926166585, 942943801, 959721017, 808791609, 825568825, 842346041, 859123257, 875900473, 892677689, 909454905, 926232121, 943009337, 959786553, 808857145, 825634361, 842411577, 859188793, 875966009, 892743225, 909520441, 926297657, 943074873, 959852089, 808922681, 825699897, 842477113, 859254329, 876031545, 892808761, 909585977, 926363193, 943140409, 959917625, 808988217, 825765433, 842542649, 859319865, 876097081, 892874297, 909651513, 926428729, 943205945, 959983161, 809053753, 825830969, 842608185, 859385401, 876162617, 892939833, 909717049, 926494265, 943271481, 960048697};

const long long exp_result3[324 + 308 + 1] = {0x3432332d65, 0x3332332d65, 0x3232332d65, 0x3132332d65, 0x3032332d65, 0x3931332d65, 0x3831332d65, 0x3731332d65, 0x3631332d65, 0x3531332d65, 0x3431332d65, 0x3331332d65, 0x3231332d65, 0x3131332d65, 0x3031332d65, 0x3930332d65, 0x3830332d65, 0x3730332d65, 0x3630332d65, 0x3530332d65, 0x3430332d65, 0x3330332d65, 0x3230332d65, 0x3130332d65, 0x3030332d65, 0x3939322d65, 0x3839322d65, 0x3739322d65, 0x3639322d65, 0x3539322d65, 0x3439322d65, 0x3339322d65, 0x3239322d65, 0x3139322d65, 0x3039322d65, 0x3938322d65, 0x3838322d65, 0x3738322d65, 0x3638322d65, 0x3538322d65, 0x3438322d65, 0x3338322d65, 0x3238322d65, 0x3138322d65, 0x3038322d65, 0x3937322d65, 0x3837322d65, 0x3737322d65, 0x3637322d65, 0x3537322d65, 0x3437322d65, 0x3337322d65, 0x3237322d65, 0x3137322d65, 0x3037322d65, 0x3936322d65, 0x3836322d65, 0x3736322d65, 0x3636322d65, 0x3536322d65, 0x3436322d65, 0x3336322d65, 0x3236322d65, 0x3136322d65, 0x3036322d65, 0x3935322d65, 0x3835322d65, 0x3735322d65, 0x3635322d65, 0x3535322d65, 0x3435322d65, 0x3335322d65, 0x3235322d65, 0x3135322d65, 0x3035322d65, 0x3934322d65, 0x3834322d65, 0x3734322d65, 0x3634322d65, 0x3534322d65, 0x3434322d65, 0x3334322d65, 0x3234322d65, 0x3134322d65, 0x3034322d65, 0x3933322d65, 0x3833322d65, 0x3733322d65, 0x3633322d65, 0x3533322d65, 0x3433322d65, 0x3333322d65, 0x3233322d65, 0x3133322d65, 0x3033322d65, 0x3932322d65, 0x3832322d65, 0x3732322d65, 0x3632322d65, 0x3532322d65, 0x3432322d65, 0x3332322d65, 0x3232322d65, 0x3132322d65, 0x3032322d65, 0x3931322d65, 0x3831322d65, 0x3731322d65, 0x3631322d65, 0x3531322d65, 0x3431322d65, 0x3331322d65, 0x3231322d65, 0x3131322d65, 0x3031322d65, 0x3930322d65, 0x3830322d65, 0x3730322d65, 0x3630322d65, 0x3530322d65, 0x3430322d65, 0x3330322d65, 0x3230322d65, 0x3130322d65, 0x3030322d65, 0x3939312d65, 0x3839312d65, 0x3739312d65, 0x3639312d65, 0x3539312d65, 0x3439312d65, 0x3339312d65, 0x3239312d65, 0x3139312d65, 0x3039312d65, 0x3938312d65, 0x3838312d65, 0x3738312d65, 0x3638312d65, 0x3538312d65, 0x3438312d65, 0x3338312d65, 0x3238312d65, 0x3138312d65, 0x3038312d65, 0x3937312d65, 0x3837312d65, 0x3737312d65, 0x3637312d65, 0x3537312d65, 0x3437312d65, 0x3337312d65, 0x3237312d65, 0x3137312d65, 0x3037312d65, 0x3936312d65, 0x3836312d65, 0x3736312d65, 0x3636312d65, 0x3536312d65, 0x3436312d65, 0x3336312d65, 0x3236312d65, 0x3136312d65, 0x3036312d65, 0x3935312d65, 0x3835312d65, 0x3735312d65, 0x3635312d65, 0x3535312d65, 0x3435312d65, 0x3335312d65, 0x3235312d65, 0x3135312d65, 0x3035312d65, 0x3934312d65, 0x3834312d65, 0x3734312d65, 0x3634312d65, 0x3534312d65, 0x3434312d65, 0x3334312d65, 0x3234312d65, 0x3134312d65, 0x3034312d65, 0x3933312d65, 0x3833312d65, 0x3733312d65, 0x3633312d65, 0x3533312d65, 0x3433312d65, 0x3333312d65, 0x3233312d65, 0x3133312d65, 0x3033312d65, 0x3932312d65, 0x3832312d65, 0x3732312d65, 0x3632312d65, 0x3532312d65, 0x3432312d65, 0x3332312d65, 0x3232312d65, 0x3132312d65, 0x3032312d65, 0x3931312d65, 0x3831312d65, 0x3731312d65, 0x3631312d65, 0x3531312d65, 0x3431312d65, 0x3331312d65, 0x3231312d65, 0x3131312d65, 0x3031312d65, 0x3930312d65, 0x3830312d65, 0x3730312d65, 0x3630312d65, 0x3530312d65, 0x3430312d65, 0x3330312d65, 0x3230312d65, 0x3130312d65, 0x3030312d65, 0x39392d65, 0x38392d65, 0x37392d65, 0x36392d65, 0x35392d65, 0x34392d65, 0x33392d65, 0x32392d65, 0x31392d65, 0x30392d65, 0x39382d65, 0x38382d65, 0x37382d65, 0x36382d65, 0x35382d65, 0x34382d65, 0x33382d65, 0x32382d65, 0x31382d65, 0x30382d65, 0x39372d65, 0x38372d65, 0x37372d65, 0x36372d65, 0x35372d65, 0x34372d65, 0x33372d65, 0x32372d65, 0x31372d65, 0x30372d65, 0x39362d65, 0x38362d65, 0x37362d65, 0x36362d65, 0x35362d65, 0x34362d65, 0x33362d65, 0x32362d65, 0x31362d65, 0x30362d65, 0x39352d65, 0x38352d65, 0x37352d65, 0x36352d65, 0x35352d65, 0x34352d65, 0x33352d65, 0x32352d65, 0x31352d65, 0x30352d65, 0x39342d65, 0x38342d65, 0x37342d65, 0x36342d65, 0x35342d65, 0x34342d65, 0x33342d65, 0x32342d65, 0x31342d65, 0x30342d65, 0x39332d65, 0x38332d65, 0x37332d65, 0x36332d65, 0x35332d65, 0x34332d65, 0x33332d65, 0x32332d65, 0x31332d65, 0x30332d65, 0x39322d65, 0x38322d65, 0x37322d65, 0x36322d65, 0x35322d65, 0x34322d65, 0x33322d65, 0x32322d65, 0x31322d65, 0x30322d65, 0x39312d65, 0x38312d65, 0x37312d65, 0x36312d65, 0x35312d65, 0x34312d65, 0x33312d65, 0x32312d65, 0x31312d65, 0x30312d65, 0x39302d65, 0x38302d65, 0x37302d65, 0x36302d65, 0x35302d65, 0x34302d65, 0x33302d65, 0x32302d65, 0x31302d65, 0x30302b65, 0x31302b65, 0x32302b65, 0x33302b65, 0x34302b65, 0x35302b65, 0x36302b65, 0x37302b65, 0x38302b65, 0x39302b65, 0x30312b65, 0x31312b65, 0x32312b65, 0x33312b65, 0x34312b65, 0x35312b65, 0x36312b65, 0x37312b65, 0x38312b65, 0x39312b65, 0x30322b65, 0x31322b65, 0x32322b65, 0x33322b65, 0x34322b65, 0x35322b65, 0x36322b65, 0x37322b65, 0x38322b65, 0x39322b65, 0x30332b65, 0x31332b65, 0x32332b65, 0x33332b65, 0x34332b65, 0x35332b65, 0x36332b65, 0x37332b65, 0x38332b65, 0x39332b65, 0x30342b65, 0x31342b65, 0x32342b65, 0x33342b65, 0x34342b65, 0x35342b65, 0x36342b65, 0x37342b65, 0x38342b65, 0x39342b65, 0x30352b65, 0x31352b65, 0x32352b65, 0x33352b65, 0x34352b65, 0x35352b65, 0x36352b65, 0x37352b65, 0x38352b65, 0x39352b65, 0x30362b65, 0x31362b65, 0x32362b65, 0x33362b65, 0x34362b65, 0x35362b65, 0x36362b65, 0x37362b65, 0x38362b65, 0x39362b65, 0x30372b65, 0x31372b65, 0x32372b65, 0x33372b65, 0x34372b65, 0x35372b65, 0x36372b65, 0x37372b65, 0x38372b65, 0x39372b65, 0x30382b65, 0x31382b65, 0x32382b65, 0x33382b65, 0x34382b65, 0x35382b65, 0x36382b65, 0x37382b65, 0x38382b65, 0x39382b65, 0x30392b65, 0x31392b65, 0x32392b65, 0x33392b65, 0x34392b65, 0x35392b65, 0x36392b65, 0x37392b65, 0x38392b65, 0x39392b65, 0x3030312b65, 0x3130312b65, 0x3230312b65, 0x3330312b65, 0x3430312b65, 0x3530312b65, 0x3630312b65, 0x3730312b65, 0x3830312b65, 0x3930312b65, 0x3031312b65, 0x3131312b65, 0x3231312b65, 0x3331312b65, 0x3431312b65, 0x3531312b65, 0x3631312b65, 0x3731312b65, 0x3831312b65, 0x3931312b65, 0x3032312b65, 0x3132312b65, 0x3232312b65, 0x3332312b65, 0x3432312b65, 0x3532312b65, 0x3632312b65, 0x3732312b65, 0x3832312b65, 0x3932312b65, 0x3033312b65, 0x3133312b65, 0x3233312b65, 0x3333312b65, 0x3433312b65, 0x3533312b65, 0x3633312b65, 0x3733312b65, 0x3833312b65, 0x3933312b65, 0x3034312b65, 0x3134312b65, 0x3234312b65, 0x3334312b65, 0x3434312b65, 0x3534312b65, 0x3634312b65, 0x3734312b65, 0x3834312b65, 0x3934312b65, 0x3035312b65, 0x3135312b65, 0x3235312b65, 0x3335312b65, 0x3435312b65, 0x3535312b65, 0x3635312b65, 0x3735312b65, 0x3835312b65, 0x3935312b65, 0x3036312b65, 0x3136312b65, 0x3236312b65, 0x3336312b65, 0x3436312b65, 0x3536312b65, 0x3636312b65, 0x3736312b65, 0x3836312b65, 0x3936312b65, 0x3037312b65, 0x3137312b65, 0x3237312b65, 0x3337312b65, 0x3437312b65, 0x3537312b65, 0x3637312b65, 0x3737312b65, 0x3837312b65, 0x3937312b65, 0x3038312b65, 0x3138312b65, 0x3238312b65, 0x3338312b65, 0x3438312b65, 0x3538312b65, 0x3638312b65, 0x3738312b65, 0x3838312b65, 0x3938312b65, 0x3039312b65, 0x3139312b65, 0x3239312b65, 0x3339312b65, 0x3439312b65, 0x3539312b65, 0x3639312b65, 0x3739312b65, 0x3839312b65, 0x3939312b65, 0x3030322b65, 0x3130322b65, 0x3230322b65, 0x3330322b65, 0x3430322b65, 0x3530322b65, 0x3630322b65, 0x3730322b65, 0x3830322b65, 0x3930322b65, 0x3031322b65, 0x3131322b65, 0x3231322b65, 0x3331322b65, 0x3431322b65, 0x3531322b65, 0x3631322b65, 0x3731322b65, 0x3831322b65, 0x3931322b65, 0x3032322b65, 0x3132322b65, 0x3232322b65, 0x3332322b65, 0x3432322b65, 0x3532322b65, 0x3632322b65, 0x3732322b65, 0x3832322b65, 0x3932322b65, 0x3033322b65, 0x3133322b65, 0x3233322b65, 0x3333322b65, 0x3433322b65, 0x3533322b65, 0x3633322b65, 0x3733322b65, 0x3833322b65, 0x3933322b65, 0x3034322b65, 0x3134322b65, 0x3234322b65, 0x3334322b65, 0x3434322b65, 0x3534322b65, 0x3634322b65, 0x3734322b65, 0x3834322b65, 0x3934322b65, 0x3035322b65, 0x3135322b65, 0x3235322b65, 0x3335322b65, 0x3435322b65, 0x3535322b65, 0x3635322b65, 0x3735322b65, 0x3835322b65, 0x3935322b65, 0x3036322b65, 0x3136322b65, 0x3236322b65, 0x3336322b65, 0x3436322b65, 0x3536322b65, 0x3636322b65, 0x3736322b65, 0x3836322b65, 0x3936322b65, 0x3037322b65, 0x3137322b65, 0x3237322b65, 0x3337322b65, 0x3437322b65, 0x3537322b65, 0x3637322b65, 0x3737322b65, 0x3837322b65, 0x3937322b65, 0x3038322b65, 0x3138322b65, 0x3238322b65, 0x3338322b65, 0x3438322b65, 0x3538322b65, 0x3638322b65, 0x3738322b65, 0x3838322b65, 0x3938322b65, 0x3039322b65, 0x3139322b65, 0x3239322b65, 0x3339322b65, 0x3439322b65, 0x3539322b65, 0x3639322b65, 0x3739322b65, 0x3839322b65, 0x3939322b65, 0x3030332b65, 0x3130332b65, 0x3230332b65, 0x3330332b65, 0x3430332b65, 0x3530332b65, 0x3630332b65, 0x3730332b65, 0x3830332b65};

const unsigned long long seq_exp_result3[324 + 308 + 1] = {0x2d0a3432332d65, 0x2d0a3332332d65, 0x2d0a3232332d65, 0x2d0a3132332d65, 0x2d0a3032332d65, 0x2d0a3931332d65, 0x2d0a3831332d65, 0x2d0a3731332d65, 0x2d0a3631332d65, 0x2d0a3531332d65, 0x2d0a3431332d65, 0x2d0a3331332d65, 0x2d0a3231332d65, 0x2d0a3131332d65, 0x2d0a3031332d65, 0x2d0a3930332d65, 0x2d0a3830332d65, 0x2d0a3730332d65, 0x2d0a3630332d65, 0x2d0a3530332d65, 0x2d0a3430332d65, 0x2d0a3330332d65, 0x2d0a3230332d65, 0x2d0a3130332d65, 0x2d0a3030332d65, 0x2d0a3939322d65, 0x2d0a3839322d65, 0x2d0a3739322d65, 0x2d0a3639322d65, 0x2d0a3539322d65, 0x2d0a3439322d65, 0x2d0a3339322d65, 0x2d0a3239322d65, 0x2d0a3139322d65, 0x2d0a3039322d65, 0x2d0a3938322d65, 0x2d0a3838322d65, 0x2d0a3738322d65, 0x2d0a3638322d65, 0x2d0a3538322d65, 0x2d0a3438322d65, 0x2d0a3338322d65, 0x2d0a3238322d65, 0x2d0a3138322d65, 0x2d0a3038322d65, 0x2d0a3937322d65, 0x2d0a3837322d65, 0x2d0a3737322d65, 0x2d0a3637322d65, 0x2d0a3537322d65, 0x2d0a3437322d65, 0x2d0a3337322d65, 0x2d0a3237322d65, 0x2d0a3137322d65, 0x2d0a3037322d65, 0x2d0a3936322d65, 0x2d0a3836322d65, 0x2d0a3736322d65, 0x2d0a3636322d65, 0x2d0a3536322d65, 0x2d0a3436322d65, 0x2d0a3336322d65, 0x2d0a3236322d65, 0x2d0a3136322d65, 0x2d0a3036322d65, 0x2d0a3935322d65, 0x2d0a3835322d65, 0x2d0a3735322d65, 0x2d0a3635322d65, 0x2d0a3535322d65, 0x2d0a3435322d65, 0x2d0a3335322d65, 0x2d0a3235322d65, 0x2d0a3135322d65, 0x2d0a3035322d65, 0x2d0a3934322d65, 0x2d0a3834322d65, 0x2d0a3734322d65, 0x2d0a3634322d65, 0x2d0a3534322d65, 0x2d0a3434322d65, 0x2d0a3334322d65, 0x2d0a3234322d65, 0x2d0a3134322d65, 0x2d0a3034322d65, 0x2d0a3933322d65, 0x2d0a3833322d65, 0x2d0a3733322d65, 0x2d0a3633322d65, 0x2d0a3533322d65, 0x2d0a3433322d65, 0x2d0a3333322d65, 0x2d0a3233322d65, 0x2d0a3133322d65, 0x2d0a3033322d65, 0x2d0a3932322d65, 0x2d0a3832322d65, 0x2d0a3732322d65, 0x2d0a3632322d65, 0x2d0a3532322d65, 0x2d0a3432322d65, 0x2d0a3332322d65, 0x2d0a3232322d65, 0x2d0a3132322d65, 0x2d0a3032322d65, 0x2d0a3931322d65, 0x2d0a3831322d65, 0x2d0a3731322d65, 0x2d0a3631322d65, 0x2d0a3531322d65, 0x2d0a3431322d65, 0x2d0a3331322d65, 0x2d0a3231322d65, 0x2d0a3131322d65, 0x2d0a3031322d65, 0x2d0a3930322d65, 0x2d0a3830322d65, 0x2d0a3730322d65, 0x2d0a3630322d65, 0x2d0a3530322d65, 0x2d0a3430322d65, 0x2d0a3330322d65, 0x2d0a3230322d65, 0x2d0a3130322d65, 0x2d0a3030322d65, 0x2d0a3939312d65, 0x2d0a3839312d65, 0x2d0a3739312d65, 0x2d0a3639312d65, 0x2d0a3539312d65, 0x2d0a3439312d65, 0x2d0a3339312d65, 0x2d0a3239312d65, 0x2d0a3139312d65, 0x2d0a3039312d65, 0x2d0a3938312d65, 0x2d0a3838312d65, 0x2d0a3738312d65, 0x2d0a3638312d65, 0x2d0a3538312d65, 0x2d0a3438312d65, 0x2d0a3338312d65, 0x2d0a3238312d65, 0x2d0a3138312d65, 0x2d0a3038312d65, 0x2d0a3937312d65, 0x2d0a3837312d65, 0x2d0a3737312d65, 0x2d0a3637312d65, 0x2d0a3537312d65, 0x2d0a3437312d65, 0x2d0a3337312d65, 0x2d0a3237312d65, 0x2d0a3137312d65, 0x2d0a3037312d65, 0x2d0a3936312d65, 0x2d0a3836312d65, 0x2d0a3736312d65, 0x2d0a3636312d65, 0x2d0a3536312d65, 0x2d0a3436312d65, 0x2d0a3336312d65, 0x2d0a3236312d65, 0x2d0a3136312d65, 0x2d0a3036312d65, 0x2d0a3935312d65, 0x2d0a3835312d65, 0x2d0a3735312d65, 0x2d0a3635312d65, 0x2d0a3535312d65, 0x2d0a3435312d65, 0x2d0a3335312d65, 0x2d0a3235312d65, 0x2d0a3135312d65, 0x2d0a3035312d65, 0x2d0a3934312d65, 0x2d0a3834312d65, 0x2d0a3734312d65, 0x2d0a3634312d65, 0x2d0a3534312d65, 0x2d0a3434312d65, 0x2d0a3334312d65, 0x2d0a3234312d65, 0x2d0a3134312d65, 0x2d0a3034312d65, 0x2d0a3933312d65, 0x2d0a3833312d65, 0x2d0a3733312d65, 0x2d0a3633312d65, 0x2d0a3533312d65, 0x2d0a3433312d65, 0x2d0a3333312d65, 0x2d0a3233312d65, 0x2d0a3133312d65, 0x2d0a3033312d65, 0x2d0a3932312d65, 0x2d0a3832312d65, 0x2d0a3732312d65, 0x2d0a3632312d65, 0x2d0a3532312d65, 0x2d0a3432312d65, 0x2d0a3332312d65, 0x2d0a3232312d65, 0x2d0a3132312d65, 0x2d0a3032312d65, 0x2d0a3931312d65, 0x2d0a3831312d65, 0x2d0a3731312d65, 0x2d0a3631312d65, 0x2d0a3531312d65, 0x2d0a3431312d65, 0x2d0a3331312d65, 0x2d0a3231312d65, 0x2d0a3131312d65, 0x2d0a3031312d65, 0x2d0a3930312d65, 0x2d0a3830312d65, 0x2d0a3730312d65, 0x2d0a3630312d65, 0x2d0a3530312d65, 0x2d0a3430312d65, 0x2d0a3330312d65, 0x2d0a3230312d65, 0x2d0a3130312d65, 0x2d0a3030312d65, 0x2d0a2039392d65, 0x2d0a2038392d65, 0x2d0a2037392d65, 0x2d0a2036392d65, 0x2d0a2035392d65, 0x2d0a2034392d65, 0x2d0a2033392d65, 0x2d0a2032392d65, 0x2d0a2031392d65, 0x2d0a2030392d65, 0x2d0a2039382d65, 0x2d0a2038382d65, 0x2d0a2037382d65, 0x2d0a2036382d65, 0x2d0a2035382d65, 0x2d0a2034382d65, 0x2d0a2033382d65, 0x2d0a2032382d65, 0x2d0a2031382d65, 0x2d0a2030382d65, 0x2d0a2039372d65, 0x2d0a2038372d65, 0x2d0a2037372d65, 0x2d0a2036372d65, 0x2d0a2035372d65, 0x2d0a2034372d65, 0x2d0a2033372d65, 0x2d0a2032372d65, 0x2d0a2031372d65, 0x2d0a2030372d65, 0x2d0a2039362d65, 0x2d0a2038362d65, 0x2d0a2037362d65, 0x2d0a2036362d65, 0x2d0a2035362d65, 0x2d0a2034362d65, 0x2d0a2033362d65, 0x2d0a2032362d65, 0x2d0a2031362d65, 0x2d0a2030362d65, 0x2d0a2039352d65, 0x2d0a2038352d65, 0x2d0a2037352d65, 0x2d0a2036352d65, 0x2d0a2035352d65, 0x2d0a2034352d65, 0x2d0a2033352d65, 0x2d0a2032352d65, 0x2d0a2031352d65, 0x2d0a2030352d65, 0x2d0a2039342d65, 0x2d0a2038342d65, 0x2d0a2037342d65, 0x2d0a2036342d65, 0x2d0a2035342d65, 0x2d0a2034342d65, 0x2d0a2033342d65, 0x2d0a2032342d65, 0x2d0a2031342d65, 0x2d0a2030342d65, 0x2d0a2039332d65, 0x2d0a2038332d65, 0x2d0a2037332d65, 0x2d0a2036332d65, 0x2d0a2035332d65, 0x2d0a2034332d65, 0x2d0a2033332d65, 0x2d0a2032332d65, 0x2d0a2031332d65, 0x2d0a2030332d65, 0x2d0a2039322d65, 0x2d0a2038322d65, 0x2d0a2037322d65, 0x2d0a2036322d65, 0x2d0a2035322d65, 0x2d0a2034322d65, 0x2d0a2033322d65, 0x2d0a2032322d65, 0x2d0a2031322d65, 0x2d0a2030322d65, 0x2d0a2039312d65, 0x2d0a2038312d65, 0x2d0a2037312d65, 0x2d0a2036312d65, 0x2d0a2035312d65, 0x2d0a2034312d65, 0x2d0a2033312d65, 0x2d0a2032312d65, 0x2d0a2031312d65, 0x2d0a2030312d65, 0x2d0a2039302d65, 0x2d0a2038302d65, 0x2d0a2037302d65, 0x2d0a2036302d65, 0x2d0a2035302d65, 0x2d0a2034302d65, 0x2d0a2033302d65, 0x2d0a2032302d65, 0x2d0a2031302d65, 0x2d0a2030302b65, 0x2d0a2031302b65, 0x2d0a2032302b65, 0x2d0a2033302b65, 0x2d0a2034302b65, 0x2d0a2035302b65, 0x2d0a2036302b65, 0x2d0a2037302b65, 0x2d0a2038302b65, 0x2d0a2039302b65, 0x2d0a2030312b65, 0x2d0a2031312b65, 0x2d0a2032312b65, 0x2d0a2033312b65, 0x2d0a2034312b65, 0x2d0a2035312b65, 0x2d0a2036312b65, 0x2d0a2037312b65, 0x2d0a2038312b65, 0x2d0a2039312b65, 0x2d0a2030322b65, 0x2d0a2031322b65, 0x2d0a2032322b65, 0x2d0a2033322b65, 0x2d0a2034322b65, 0x2d0a2035322b65, 0x2d0a2036322b65, 0x2d0a2037322b65, 0x2d0a2038322b65, 0x2d0a2039322b65, 0x2d0a2030332b65, 0x2d0a2031332b65, 0x2d0a2032332b65, 0x2d0a2033332b65, 0x2d0a2034332b65, 0x2d0a2035332b65, 0x2d0a2036332b65, 0x2d0a2037332b65, 0x2d0a2038332b65, 0x2d0a2039332b65, 0x2d0a2030342b65, 0x2d0a2031342b65, 0x2d0a2032342b65, 0x2d0a2033342b65, 0x2d0a2034342b65, 0x2d0a2035342b65, 0x2d0a2036342b65, 0x2d0a2037342b65, 0x2d0a2038342b65, 0x2d0a2039342b65, 0x2d0a2030352b65, 0x2d0a2031352b65, 0x2d0a2032352b65, 0x2d0a2033352b65, 0x2d0a2034352b65, 0x2d0a2035352b65, 0x2d0a2036352b65, 0x2d0a2037352b65, 0x2d0a2038352b65, 0x2d0a2039352b65, 0x2d0a2030362b65, 0x2d0a2031362b65, 0x2d0a2032362b65, 0x2d0a2033362b65, 0x2d0a2034362b65, 0x2d0a2035362b65, 0x2d0a2036362b65, 0x2d0a2037362b65, 0x2d0a2038362b65, 0x2d0a2039362b65, 0x2d0a2030372b65, 0x2d0a2031372b65, 0x2d0a2032372b65, 0x2d0a2033372b65, 0x2d0a2034372b65, 0x2d0a2035372b65, 0x2d0a2036372b65, 0x2d0a2037372b65, 0x2d0a2038372b65, 0x2d0a2039372b65, 0x2d0a2030382b65, 0x2d0a2031382b65, 0x2d0a2032382b65, 0x2d0a2033382b65, 0x2d0a2034382b65, 0x2d0a2035382b65, 0x2d0a2036382b65, 0x2d0a2037382b65, 0x2d0a2038382b65, 0x2d0a2039382b65, 0x2d0a2030392b65, 0x2d0a2031392b65, 0x2d0a2032392b65, 0x2d0a2033392b65, 0x2d0a2034392b65, 0x2d0a2035392b65, 0x2d0a2036392b65, 0x2d0a2037392b65, 0x2d0a2038392b65, 0x2d0a2039392b65, 0x2d0a3030312b65, 0x2d0a3130312b65, 0x2d0a3230312b65, 0x2d0a3330312b65, 0x2d0a3430312b65, 0x2d0a3530312b65, 0x2d0a3630312b65, 0x2d0a3730312b65, 0x2d0a3830312b65, 0x2d0a3930312b65, 0x2d0a3031312b65, 0x2d0a3131312b65, 0x2d0a3231312b65, 0x2d0a3331312b65, 0x2d0a3431312b65, 0x2d0a3531312b65, 0x2d0a3631312b65, 0x2d0a3731312b65, 0x2d0a3831312b65, 0x2d0a3931312b65, 0x2d0a3032312b65, 0x2d0a3132312b65, 0x2d0a3232312b65, 0x2d0a3332312b65, 0x2d0a3432312b65, 0x2d0a3532312b65, 0x2d0a3632312b65, 0x2d0a3732312b65, 0x2d0a3832312b65, 0x2d0a3932312b65, 0x2d0a3033312b65, 0x2d0a3133312b65, 0x2d0a3233312b65, 0x2d0a3333312b65, 0x2d0a3433312b65, 0x2d0a3533312b65, 0x2d0a3633312b65, 0x2d0a3733312b65, 0x2d0a3833312b65, 0x2d0a3933312b65, 0x2d0a3034312b65, 0x2d0a3134312b65, 0x2d0a3234312b65, 0x2d0a3334312b65, 0x2d0a3434312b65, 0x2d0a3534312b65, 0x2d0a3634312b65, 0x2d0a3734312b65, 0x2d0a3834312b65, 0x2d0a3934312b65, 0x2d0a3035312b65, 0x2d0a3135312b65, 0x2d0a3235312b65, 0x2d0a3335312b65, 0x2d0a3435312b65, 0x2d0a3535312b65, 0x2d0a3635312b65, 0x2d0a3735312b65, 0x2d0a3835312b65, 0x2d0a3935312b65, 0x2d0a3036312b65, 0x2d0a3136312b65, 0x2d0a3236312b65, 0x2d0a3336312b65, 0x2d0a3436312b65, 0x2d0a3536312b65, 0x2d0a3636312b65, 0x2d0a3736312b65, 0x2d0a3836312b65, 0x2d0a3936312b65, 0x2d0a3037312b65, 0x2d0a3137312b65, 0x2d0a3237312b65, 0x2d0a3337312b65, 0x2d0a3437312b65, 0x2d0a3537312b65, 0x2d0a3637312b65, 0x2d0a3737312b65, 0x2d0a3837312b65, 0x2d0a3937312b65, 0x2d0a3038312b65, 0x2d0a3138312b65, 0x2d0a3238312b65, 0x2d0a3338312b65, 0x2d0a3438312b65, 0x2d0a3538312b65, 0x2d0a3638312b65, 0x2d0a3738312b65, 0x2d0a3838312b65, 0x2d0a3938312b65, 0x2d0a3039312b65, 0x2d0a3139312b65, 0x2d0a3239312b65, 0x2d0a3339312b65, 0x2d0a3439312b65, 0x2d0a3539312b65, 0x2d0a3639312b65, 0x2d0a3739312b65, 0x2d0a3839312b65, 0x2d0a3939312b65, 0x2d0a3030322b65, 0x2d0a3130322b65, 0x2d0a3230322b65, 0x2d0a3330322b65, 0x2d0a3430322b65, 0x2d0a3530322b65, 0x2d0a3630322b65, 0x2d0a3730322b65, 0x2d0a3830322b65, 0x2d0a3930322b65, 0x2d0a3031322b65, 0x2d0a3131322b65, 0x2d0a3231322b65, 0x2d0a3331322b65, 0x2d0a3431322b65, 0x2d0a3531322b65, 0x2d0a3631322b65, 0x2d0a3731322b65, 0x2d0a3831322b65, 0x2d0a3931322b65, 0x2d0a3032322b65, 0x2d0a3132322b65, 0x2d0a3232322b65, 0x2d0a3332322b65, 0x2d0a3432322b65, 0x2d0a3532322b65, 0x2d0a3632322b65, 0x2d0a3732322b65, 0x2d0a3832322b65, 0x2d0a3932322b65, 0x2d0a3033322b65, 0x2d0a3133322b65, 0x2d0a3233322b65, 0x2d0a3333322b65, 0x2d0a3433322b65, 0x2d0a3533322b65, 0x2d0a3633322b65, 0x2d0a3733322b65, 0x2d0a3833322b65, 0x2d0a3933322b65, 0x2d0a3034322b65, 0x2d0a3134322b65, 0x2d0a3234322b65, 0x2d0a3334322b65, 0x2d0a3434322b65, 0x2d0a3534322b65, 0x2d0a3634322b65, 0x2d0a3734322b65, 0x2d0a3834322b65, 0x2d0a3934322b65, 0x2d0a3035322b65, 0x2d0a3135322b65, 0x2d0a3235322b65, 0x2d0a3335322b65, 0x2d0a3435322b65, 0x2d0a3535322b65, 0x2d0a3635322b65, 0x2d0a3735322b65, 0x2d0a3835322b65, 0x2d0a3935322b65, 0x2d0a3036322b65, 0x2d0a3136322b65, 0x2d0a3236322b65, 0x2d0a3336322b65, 0x2d0a3436322b65, 0x2d0a3536322b65, 0x2d0a3636322b65, 0x2d0a3736322b65, 0x2d0a3836322b65, 0x2d0a3936322b65, 0x2d0a3037322b65, 0x2d0a3137322b65, 0x2d0a3237322b65, 0x2d0a3337322b65, 0x2d0a3437322b65, 0x2d0a3537322b65, 0x2d0a3637322b65, 0x2d0a3737322b65, 0x2d0a3837322b65, 0x2d0a3937322b65, 0x2d0a3038322b65, 0x2d0a3138322b65, 0x2d0a3238322b65, 0x2d0a3338322b65, 0x2d0a3438322b65, 0x2d0a3538322b65, 0x2d0a3638322b65, 0x2d0a3738322b65, 0x2d0a3838322b65, 0x2d0a3938322b65, 0x2d0a3039322b65, 0x2d0a3139322b65, 0x2d0a3239322b65, 0x2d0a3339322b65, 0x2d0a3439322b65, 0x2d0a3539322b65, 0x2d0a3639322b65, 0x2d0a3739322b65, 0x2d0a3839322b65, 0x2d0a3939322b65, 0x2d0a3030332b65, 0x2d0a3130332b65, 0x2d0a3230332b65, 0x2d0a3330332b65, 0x2d0a3430332b65, 0x2d0a3530332b65, 0x2d0a3630332b65, 0x2d0a3730332b65, 0x2d0a3830332b65};

const int digit1000e[1000] = {1697656880, 1697722416, 1697787952, 1697853488, 1697919024, 1697984560, 1698050096, 1698115632, 1698181168, 1698246704, 1697657136, 1697722672, 1697788208, 1697853744, 1697919280, 1697984816, 1698050352, 1698115888, 1698181424, 1698246960, 1697657392, 1697722928, 1697788464, 1697854000, 1697919536, 1697985072, 1698050608, 1698116144, 1698181680, 1698247216, 1697657648, 1697723184, 1697788720, 1697854256, 1697919792, 1697985328, 1698050864, 1698116400, 1698181936, 1698247472, 1697657904, 1697723440, 1697788976, 1697854512, 1697920048, 1697985584, 1698051120, 1698116656, 1698182192, 1698247728, 1697658160, 1697723696, 1697789232, 1697854768, 1697920304, 1697985840, 1698051376, 1698116912, 1698182448, 1698247984, 1697658416, 1697723952, 1697789488, 1697855024, 1697920560, 1697986096, 1698051632, 1698117168, 1698182704, 1698248240, 1697658672, 1697724208, 1697789744, 1697855280, 1697920816, 1697986352, 1698051888, 1698117424, 1698182960, 1698248496, 1697658928, 1697724464, 1697790000, 1697855536, 1697921072, 1697986608, 1698052144, 1698117680, 1698183216, 1698248752, 1697659184, 1697724720, 1697790256, 1697855792, 1697921328, 1697986864, 1698052400, 1698117936, 1698183472, 1698249008, 1697656881, 1697722417, 1697787953, 1697853489, 1697919025, 1697984561, 1698050097, 1698115633, 1698181169, 1698246705, 1697657137, 1697722673, 1697788209, 1697853745, 1697919281, 1697984817, 1698050353, 1698115889, 1698181425, 1698246961, 1697657393, 1697722929, 1697788465, 1697854001, 1697919537, 1697985073, 1698050609, 1698116145, 1698181681, 1698247217, 1697657649, 1697723185, 1697788721, 1697854257, 1697919793, 1697985329, 1698050865, 1698116401, 1698181937, 1698247473, 1697657905, 1697723441, 1697788977, 1697854513, 1697920049, 1697985585, 1698051121, 1698116657, 1698182193, 1698247729, 1697658161, 1697723697, 1697789233, 1697854769, 1697920305, 1697985841, 1698051377, 1698116913, 1698182449, 1698247985, 1697658417, 1697723953, 1697789489, 1697855025, 1697920561, 1697986097, 1698051633, 1698117169, 1698182705, 1698248241, 1697658673, 1697724209, 1697789745, 1697855281, 1697920817, 1697986353, 1698051889, 1698117425, 1698182961, 1698248497, 1697658929, 1697724465, 1697790001, 1697855537, 1697921073, 1697986609, 1698052145, 1698117681, 1698183217, 1698248753, 1697659185, 1697724721, 1697790257, 1697855793, 1697921329, 1697986865, 1698052401, 1698117937, 1698183473, 1698249009, 1697656882, 1697722418, 1697787954, 1697853490, 1697919026, 1697984562, 1698050098, 1698115634, 1698181170, 1698246706, 1697657138, 1697722674, 1697788210, 1697853746, 1697919282, 1697984818, 1698050354, 1698115890, 1698181426, 1698246962, 1697657394, 1697722930, 1697788466, 1697854002, 1697919538, 1697985074, 1698050610, 1698116146, 1698181682, 1698247218, 1697657650, 1697723186, 1697788722, 1697854258, 1697919794, 1697985330, 1698050866, 1698116402, 1698181938, 1698247474, 1697657906, 1697723442, 1697788978, 1697854514, 1697920050, 1697985586, 1698051122, 1698116658, 1698182194, 1698247730, 1697658162, 1697723698, 1697789234, 1697854770, 1697920306, 1697985842, 1698051378, 1698116914, 1698182450, 1698247986, 1697658418, 1697723954, 1697789490, 1697855026, 1697920562, 1697986098, 1698051634, 1698117170, 1698182706, 1698248242, 1697658674, 1697724210, 1697789746, 1697855282, 1697920818, 1697986354, 1698051890, 1698117426, 1698182962, 1698248498, 1697658930, 1697724466, 1697790002, 1697855538, 1697921074, 1697986610, 1698052146, 1698117682, 1698183218, 1698248754, 1697659186, 1697724722, 1697790258, 1697855794, 1697921330, 1697986866, 1698052402, 1698117938, 1698183474, 1698249010, 1697656883, 1697722419, 1697787955, 1697853491, 1697919027, 1697984563, 1698050099, 1698115635, 1698181171, 1698246707, 1697657139, 1697722675, 1697788211, 1697853747, 1697919283, 1697984819, 1698050355, 1698115891, 1698181427, 1698246963, 1697657395, 1697722931, 1697788467, 1697854003, 1697919539, 1697985075, 1698050611, 1698116147, 1698181683, 1698247219, 1697657651, 1697723187, 1697788723, 1697854259, 1697919795, 1697985331, 1698050867, 1698116403, 1698181939, 1698247475, 1697657907, 1697723443, 1697788979, 1697854515, 1697920051, 1697985587, 1698051123, 1698116659, 1698182195, 1698247731, 1697658163, 1697723699, 1697789235, 1697854771, 1697920307, 1697985843, 1698051379, 1698116915, 1698182451, 1698247987, 1697658419, 1697723955, 1697789491, 1697855027, 1697920563, 1697986099, 1698051635, 1698117171, 1698182707, 1698248243, 1697658675, 1697724211, 1697789747, 1697855283, 1697920819, 1697986355, 1698051891, 1698117427, 1698182963, 1698248499, 1697658931, 1697724467, 1697790003, 1697855539, 1697921075, 1697986611, 1698052147, 1698117683, 1698183219, 1698248755, 1697659187, 1697724723, 1697790259, 1697855795, 1697921331, 1697986867, 1698052403, 1698117939, 1698183475, 1698249011, 1697656884, 1697722420, 1697787956, 1697853492, 1697919028, 1697984564, 1698050100, 1698115636, 1698181172, 1698246708, 1697657140, 1697722676, 1697788212, 1697853748, 1697919284, 1697984820, 1698050356, 1698115892, 1698181428, 1698246964, 1697657396, 1697722932, 1697788468, 1697854004, 1697919540, 1697985076, 1698050612, 1698116148, 1698181684, 1698247220, 1697657652, 1697723188, 1697788724, 1697854260, 1697919796, 1697985332, 1698050868, 1698116404, 1698181940, 1698247476, 1697657908, 1697723444, 1697788980, 1697854516, 1697920052, 1697985588, 1698051124, 1698116660, 1698182196, 1698247732, 1697658164, 1697723700, 1697789236, 1697854772, 1697920308, 1697985844, 1698051380, 1698116916, 1698182452, 1698247988, 1697658420, 1697723956, 1697789492, 1697855028, 1697920564, 1697986100, 1698051636, 1698117172, 1698182708, 1698248244, 1697658676, 1697724212, 1697789748, 1697855284, 1697920820, 1697986356, 1698051892, 1698117428, 1698182964, 1698248500, 1697658932, 1697724468, 1697790004, 1697855540, 1697921076, 1697986612, 1698052148, 1698117684, 1698183220, 1698248756, 1697659188, 1697724724, 1697790260, 1697855796, 1697921332, 1697986868, 1698052404, 1698117940, 1698183476, 1698249012, 1697656885, 1697722421, 1697787957, 1697853493, 1697919029, 1697984565, 1698050101, 1698115637, 1698181173, 1698246709, 1697657141, 1697722677, 1697788213, 1697853749, 1697919285, 1697984821, 1698050357, 1698115893, 1698181429, 1698246965, 1697657397, 1697722933, 1697788469, 1697854005, 1697919541, 1697985077, 1698050613, 1698116149, 1698181685, 1698247221, 1697657653, 1697723189, 1697788725, 1697854261, 1697919797, 1697985333, 1698050869, 1698116405, 1698181941, 1698247477, 1697657909, 1697723445, 1697788981, 1697854517, 1697920053, 1697985589, 1698051125, 1698116661, 1698182197, 1698247733, 1697658165, 1697723701, 1697789237, 1697854773, 1697920309, 1697985845, 1698051381, 1698116917, 1698182453, 1698247989, 1697658421, 1697723957, 1697789493, 1697855029, 1697920565, 1697986101, 1698051637, 1698117173, 1698182709, 1698248245, 1697658677, 1697724213, 1697789749, 1697855285, 1697920821, 1697986357, 1698051893, 1698117429, 1698182965, 1698248501, 1697658933, 1697724469, 1697790005, 1697855541, 1697921077, 1697986613, 1698052149, 1698117685, 1698183221, 1698248757, 1697659189, 1697724725, 1697790261, 1697855797, 1697921333, 1697986869, 1698052405, 1698117941, 1698183477, 1698249013, 1697656886, 1697722422, 1697787958, 1697853494, 1697919030, 1697984566, 1698050102, 1698115638, 1698181174, 1698246710, 1697657142, 1697722678, 1697788214, 1697853750, 1697919286, 1697984822, 1698050358, 1698115894, 1698181430, 1698246966, 1697657398, 1697722934, 1697788470, 1697854006, 1697919542, 1697985078, 1698050614, 1698116150, 1698181686, 1698247222, 1697657654, 1697723190, 1697788726, 1697854262, 1697919798, 1697985334, 1698050870, 1698116406, 1698181942, 1698247478, 1697657910, 1697723446, 1697788982, 1697854518, 1697920054, 1697985590, 1698051126, 1698116662, 1698182198, 1698247734, 1697658166, 1697723702, 1697789238, 1697854774, 1697920310, 1697985846, 1698051382, 1698116918, 1698182454, 1698247990, 1697658422, 1697723958, 1697789494, 1697855030, 1697920566, 1697986102, 1698051638, 1698117174, 1698182710, 1698248246, 1697658678, 1697724214, 1697789750, 1697855286, 1697920822, 1697986358, 1698051894, 1698117430, 1698182966, 1698248502, 1697658934, 1697724470, 1697790006, 1697855542, 1697921078, 1697986614, 1698052150, 1698117686, 1698183222, 1698248758, 1697659190, 1697724726, 1697790262, 1697855798, 1697921334, 1697986870, 1698052406, 1698117942, 1698183478, 1698249014, 1697656887, 1697722423, 1697787959, 1697853495, 1697919031, 1697984567, 1698050103, 1698115639, 1698181175, 1698246711, 1697657143, 1697722679, 1697788215, 1697853751, 1697919287, 1697984823, 1698050359, 1698115895, 1698181431, 1698246967, 1697657399, 1697722935, 1697788471, 1697854007, 1697919543, 1697985079, 1698050615, 1698116151, 1698181687, 1698247223, 1697657655, 1697723191, 1697788727, 1697854263, 1697919799, 1697985335, 1698050871, 1698116407, 1698181943, 1698247479, 1697657911, 1697723447, 1697788983, 1697854519, 1697920055, 1697985591, 1698051127, 1698116663, 1698182199, 1698247735, 1697658167, 1697723703, 1697789239, 1697854775, 1697920311, 1697985847, 1698051383, 1698116919, 1698182455, 1698247991, 1697658423, 1697723959, 1697789495, 1697855031, 1697920567, 1697986103, 1698051639, 1698117175, 1698182711, 1698248247, 1697658679, 1697724215, 1697789751, 1697855287, 1697920823, 1697986359, 1698051895, 1698117431, 1698182967, 1698248503, 1697658935, 1697724471, 1697790007, 1697855543, 1697921079, 1697986615, 1698052151, 1698117687, 1698183223, 1698248759, 1697659191, 1697724727, 1697790263, 1697855799, 1697921335, 1697986871, 1698052407, 1698117943, 1698183479, 1698249015, 1697656888, 1697722424, 1697787960, 1697853496, 1697919032, 1697984568, 1698050104, 1698115640, 1698181176, 1698246712, 1697657144, 1697722680, 1697788216, 1697853752, 1697919288, 1697984824, 1698050360, 1698115896, 1698181432, 1698246968, 1697657400, 1697722936, 1697788472, 1697854008, 1697919544, 1697985080, 1698050616, 1698116152, 1698181688, 1698247224, 1697657656, 1697723192, 1697788728, 1697854264, 1697919800, 1697985336, 1698050872, 1698116408, 1698181944, 1698247480, 1697657912, 1697723448, 1697788984, 1697854520, 1697920056, 1697985592, 1698051128, 1698116664, 1698182200, 1698247736, 1697658168, 1697723704, 1697789240, 1697854776, 1697920312, 1697985848, 1698051384, 1698116920, 1698182456, 1698247992, 1697658424, 1697723960, 1697789496, 1697855032, 1697920568, 1697986104, 1698051640, 1698117176, 1698182712, 1698248248, 1697658680, 1697724216, 1697789752, 1697855288, 1697920824, 1697986360, 1698051896, 1698117432, 1698182968, 1698248504, 1697658936, 1697724472, 1697790008, 1697855544, 1697921080, 1697986616, 1698052152, 1698117688, 1698183224, 1698248760, 1697659192, 1697724728, 1697790264, 1697855800, 1697921336, 1697986872, 1698052408, 1698117944, 1698183480, 1698249016, 1697656889, 1697722425, 1697787961, 1697853497, 1697919033, 1697984569, 1698050105, 1698115641, 1698181177, 1698246713, 1697657145, 1697722681, 1697788217, 1697853753, 1697919289, 1697984825, 1698050361, 1698115897, 1698181433, 1698246969, 1697657401, 1697722937, 1697788473, 1697854009, 1697919545, 1697985081, 1698050617, 1698116153, 1698181689, 1698247225, 1697657657, 1697723193, 1697788729, 1697854265, 1697919801, 1697985337, 1698050873, 1698116409, 1698181945, 1698247481, 1697657913, 1697723449, 1697788985, 1697854521, 1697920057, 1697985593, 1698051129, 1698116665, 1698182201, 1698247737, 1697658169, 1697723705, 1697789241, 1697854777, 1697920313, 1697985849, 1698051385, 1698116921, 1698182457, 1698247993, 1697658425, 1697723961, 1697789497, 1697855033, 1697920569, 1697986105, 1698051641, 1698117177, 1698182713, 1698248249, 1697658681, 1697724217, 1697789753, 1697855289, 1697920825, 1697986361, 1698051897, 1698117433, 1698182969, 1698248505, 1697658937, 1697724473, 1697790009, 1697855545, 1697921081, 1697986617, 1698052153, 1698117689, 1698183225, 1698248761, 1697659193, 1697724729, 1697790265, 1697855801, 1697921337, 1697986873, 1698052409, 1698117945, 1698183481, 1698249017};

const short short_array[100] = {12336, 12592, 12848, 13104, 13360, 13616, 13872, 14128, 14384, 14640,
								12337, 12593, 12849, 13105, 13361, 13617, 13873, 14129, 14385, 14641,
								12338, 12594, 12850, 13106, 13362, 13618, 13874, 14130, 14386, 14642,
								12339, 12595, 12851, 13107, 13363, 13619, 13875, 14131, 14387, 14643,
								12340, 12596, 12852, 13108, 13364, 13620, 13876, 14132, 14388, 14644,
								12341, 12597, 12853, 13109, 13365, 13621, 13877, 14133, 14389, 14645,
								12342, 12598, 12854, 13110, 13366, 13622, 13878, 14134, 14390, 14646,
								12343, 12599, 12855, 13111, 13367, 13623, 13879, 14135, 14391, 14647,
								12344, 12600, 12856, 13112, 13368, 13624, 13880, 14136, 14392, 14648,
								12345, 12601, 12857, 13113, 13369, 13625, 13881, 14137, 14393, 14649};
#if 0
__m512i mergehigh32(__m512i a, __m512i b)
{
	const int imm8 = 3 * (1 << 6) +
					 1 * (1 << 4) +
					 3 * (1 << 2) +
					 1 * (1 << 0);
	return __m512i(_mm512_shuffle_ps(_mm512_castsi512_ps(a), _mm512_castsi512_ps(b), imm8));
}
__m512i PrefixSumEpi64(__m512i x)
{ // 计算8个数的前缀和
	const __m512i ZERO = _mm512_set1_epi64(0);
	x = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 1));
	x = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 2));
	x = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 4));
	return x;
}
__m512i PrefixSumEpi32(__m512i x)
{ // 计算16个数的前缀和
	const __m512i ZERO = _mm512_set1_epi32(0);
	x = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 1));
	x = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 2));
	x = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 4));
	x = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 8));
	return x;
}
#endif

#define FORI for (int i = 0; i < group_count; ++i)
#define FORJ for (int j = 0; j < group; ++j)
#define FORR for (int i = 0; i < rest; ++i)
__m512i merge_h32(__m512i a, __m512i b)
{
	const __m512i idx = _mm512_set_epi32(31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1);
	return _mm512_permutex2var_epi32(b, idx, a); // 1:b,0:a;
}
__m512i merge_l32(__m512i a, __m512i b)
{
	const __m512i idx = _mm512_set_epi32(30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0);
	return _mm512_permutex2var_epi32(b, idx, a); // 1:b,0:a;
}
int count_tz(int high9, int low8)
{
	__m512i h9 = _mm512_set1_epi64(high9);
	__m512i l8 = _mm512_set1_epi64(low8);
	__m512i all = merge_l32(h9, l8);
	const int e57_e8 = 1441151881;
	const int e54_e7 = 1801439851;
	const int e50_e6 = 1125899907;
	const int e47_e5 = 1407374884;
	const int e44_e4 = 1759218605;
	const int e40_e3 = 1099511628;
	const int e37_e2 = 1374389535;
	const int e34_e1 = 1717986919;
	const __m512i n8 = _mm512_set_epi64(e57_e8, e54_e7, e50_e6, e47_e5, e44_e4, e40_e3, e37_e2, e34_e1);
	// const __m512i r8 = _mm512_set_epi64(57,54,50,47,44,40,37,34);
	const __m512i r16 = _mm512_set_epi32(25, 22, 18, 15, 12, 8, 5, 2, 25, 22, 18, 15, 12, 8, 5, 2);
	// const __m512i m8 = _mm512_set_epi64(1e8,1e7,1e6,1e5,1e4,1e3,1e2,1e1);
	const __m512i m16 = _mm512_set_epi32(1e8, 1e7, 1e6, 1e5, 1e4, 1e3, 1e2, 1e1, 1e8, 1e7, 1e6, 1e5, 1e4, 1e3, 1e2, 1e1);
	__m512i h9_n8 = _mm512_mullo_epi64(h9, n8);
	__m512i l8_n8 = _mm512_mullo_epi64(l8, n8);
	__m512i h9_l8 = merge_h32(h9_n8, l8_n8);
	__m512i res17 = _mm512_mullo_epi32(_mm512_srlv_epi32(h9_l8, r16), m16);
	__mmask16 mask17 = _mm512_cmpneq_epi32_mask(res17, all);

	// __m512i res9 =_mm512_mullo_epi64(_mm512_srlv_epi64(_mm512_mullo_epi64(h9,n8) , r8) , m8);
	// __m512i res8 =_mm512_mullo_epi64(_mm512_srlv_epi64(_mm512_mullo_epi64(l8,n8) , r8) , m8);
	// __mmask8 mask9 = _mm512_cmpneq_epi64_mask(res9,h9);
	// __mmask8 mask8 = _mm512_cmpneq_epi64_mask(res8,l8);

	// int ctz9 = _tzcnt_u64(mask9|0x100);// max = 8;
	// int ctz8 = _tzcnt_u64(mask8|0x100);// max = 8;
	int ctz17 = _tzcnt_u64(mask17 | 0x10000); // max =
	// printf("h9=%d,l8=%d,mask9=%x,ctz9=%d,mask8 = %x,ctz8=%d,mask17=%x,ctz17=%d\n",high9,low8,mask9,ctz9,mask8,ctz8,mask17,ctz17);
	return ctz17; //[0,16];
}

#if 0
void print_high9(__m512i high9, long long *num1, long long *numrest) // not use
{
	const __m512d pow256_n[7] = {
		_mm512_set1_pd(1ull << 8),
		_mm512_set1_pd(1ull << 16),
		_mm512_set1_pd(1ull << 24),
		_mm512_set1_pd(1ull << 32),
		_mm512_set1_pd(1ull << 40),
		_mm512_set1_pd(1ull << 48),
		_mm512_set1_pd(1ull << 56)};
	const __m512d En8 = _mm512_set1_pd(1e-8);
	__m512d high9_d = _mm512_cvtepi64_pd(high9);						  // 123456789
	__m512d res8 = _mm512_mul_pd(high9_d, En8);							  // 1.23456789
	__m512d num1_8 = _mm512_roundscale_pd(res8, _MM_FROUND_TO_NEG_INF);	  // 1
	__m512i num1_print = (_mm512_cvtpd_epi64(num1_8) + '0') | ('.' << 8); // 46*256 + 48 +1
	__m512d digit = num1_8;												  // 1
	// res8 = res8 * 10 - digit * 10;//2.3456789
	res8 = (res8 - digit) * 10;								   // 2.3456789
	digit = _mm512_roundscale_pd(res8, _MM_FROUND_TO_NEG_INF); // 2
	__m512d write = digit;									   // 1
	for (int i = 0; i < 6; ++i)
	{
		// res8 = res8 * 10 - digit * 10; // 12.3456789 - 10 = 0:2.3456789 , 1:3.456789 , 2:4.56789 , 3:5.6789 4:6.789 5:7.89
		res8 = (res8 - digit) * 10; // 2.3456789
		digit = _mm512_roundscale_pd(res8, _MM_FROUND_TO_NEG_INF);
		write = digit * pow256_n[i] + write;
	}
	digit = _mm512_roundscale_pd(res8, _MM_FROUND_TO_NEG_INF); //
															   // res8 = res8 * 10 - digit * 10;
	res8 = (res8 - digit) * 10;								   // 2.3456789
	__m512i write_i = _mm512_cvtpd_epi64(write);			   //
	// write_i = (write_i << 8) + _mm512_cvtpd_epi64(res8);
	// printf("res8:%lf\n",res8[0]);
	write_i = write_i + (_mm512_cvtpd_epi64(res8) << 56);
	write_i |= 0x3030303030303030ull;

	// long long num1[8],numrest[8];
	_mm512_storeu_epi64(num1, num1_print);
	_mm512_storeu_epi64(numrest, write_i);
	// printf(" %lld %lld\n", num1_print[0] ,num1_print[1]);
	// printf(" %lld %lld\n", final[0] ,final[1]);
	// printf(" %lld\n",*(long long *)&print_result[0]);
	// printf("result:\n");
	// char * ptr=(char*)final;
	for (int i = 0; i < 2; ++i)
	{
		// printf("%c", ptr[i]);
	}
	// ptr = (char*)write8;
	for (int i = 0; i < 8; ++i)
	{
		// printf("%c", ptr[i]);
	}
	// printf("\n");
}
void convert(__m512i num, long long *num123, long long *num456, long long *num789) // not use
{
	__m512d num_d = _mm512_cvtepi64_pd(num);
	__m512d num123_rest_8 = num_d * 1e-6;
	__m512d num123i_8 = _mm512_roundscale_pd(num123_rest_8, _MM_FROUND_TO_NEG_INF);
	//__m512d num456_789_8 = num123_rest_8*1e3 - num123i_8 * 1e3;
	__m512d num456_789_8 = (num123_rest_8 - num123i_8) * 1e3;
	__m512d num456i_8 = _mm512_roundscale_pd(num456_789_8, _MM_FROUND_TO_NEG_INF);
	//__m512d num789_8 = num456_789_8*1e3 - num456i_8 * 1e3;
	__m512d num789_8 = (num456_789_8 - num456i_8) * 1e3;
	//__m512d num789i_8 = _mm512_roundscale_pd(num789_8 , _MM_FROUND_TO_NEG_INF);
	_mm512_storeu_epi64(num123, _mm512_cvttpd_epi64(num123i_8));
	_mm512_storeu_epi64(num456, _mm512_cvttpd_epi64(num456i_8));
	_mm512_storeu_epi64(num789, _mm512_cvttpd_epi64(num789_8));
}
#endif
#if 0
template <int Precision = 16>
__attribute__((always_inline)) int my_dou_to_sci(double value, char *buffer)
{
	const unsigned long long M52 = ((1ull << 52) - 1);
	buffer[0] = '-';
	uint64_t value_u64 = (*(uint64_t *)&value);				 // 转u64
	int index = value_u64 >> 63;							 // 正负号
	uint64_t value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	value = *(double *)&value_abs_u64;						 // abs double
	int ieee754_exp11 = (value_abs_u64 >> 52);				 // 阶码
	if (ieee754_exp11 == 0x7ff)
	{
		if (value_abs_u64 > M52)
			strcpy(&buffer[index], "nan");
		else
			strcpy(&buffer[index], "inf");
		return index + 3;
	}
	uint64_t f;
	int e2;
	if (ieee754_exp11 != 0)
	{
		f = (value_abs_u64 << 11) | ((1ull) << 63);
		e2 = ieee754_exp11 - 1023; // = e+63
	}
	else
	{
#if defined(_MSC_VER)
		unsigned long clz = __lzcnt64(value_abs_u64);
#elif defined(__GNUC__)
		int clz = __builtin_clzll(value_abs_u64); // 计算前缀0的个数
#endif
		f = (value_abs_u64) << clz;
		e2 = -1022 - (clz - 11); //-1011-clz
	}
	// int e10_tmp = data_store[ieee754_exp11];
	// int nres_e_tmp = data_store[ieee754_exp11];
	//  long long data_value = data_ptr[ieee754_exp11] ;
	//  int e10_tmp = data_value & 0xffffffffll;
	//  int nres_e_tmp = data_value >> 32;
	int e10_tmp = ((e2 * 78913) >> 18);
	// int e10 = e10_tmp + (value >= _10en[e10_tmp + 1 + 324]) - (value_abs_u64 == 2);
	int e10 = e10_tmp + (value_abs_u64 >= *(unsigned long long *)&_10en[e10_tmp + 1 + 324]); //((e2 * 78913) >> 18) or ((e2 * 78913) >> 18) + 1
	// int e10_2 = e10_tmp + 1 ;
	//_mm_loadu_epi64(&powers_ten_reverse[ 343 + (e10_tmp -1 - Precision) ] );
	uint64_t pow10_f = powers_ten_reverse[343 + (e10 - Precision)]; // L1 cache 3cycle
	// uint64_t pow10_f_2 = powers_ten_reverse[343 + (e10_2 - Precision)];		 // L1 cache 3cycle
	// uint64_t pow10_f12[2];
	//__mempcpy( pow10_f12 , &powers_ten_reverse[343 + (e10_tmp - Precision)] , sizeof(uint64_t)*2 );
	//__m128i  t_value = _mm_loadu_epi64( &powers_ten_reverse[343 + (e10_tmp - Precision)] );
	//  pow10_f12[0] = powers_ten_reverse[343 + (e10_tmp - Precision)];		 // L1 cache 3cycle
	//  pow10_f12[1] = powers_ten_reverse[343 + (e10_tmp+1 - Precision)];		 // L1 cache 3cycle
	// pow10_f =  pow10_f12[(*(unsigned long long*)&value >= *(unsigned long long*)&_10en[e10_tmp + 1 + 324])];
	// pow10_f = t_value[(*(unsigned long long*)&value >= *(unsigned long long*)&_10en[e10_tmp + 1 + 324]) ];
	// uint64_t pow10_f2 = powers_ten_reverse[343 + (e10_tmp - Precision)]; // L1 cache 3cycle
	int nres_e = 62 - e2 - (((Precision - e10) * 1741647) >> 19);
	// int nres_e_1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	// int nres_e = nres_e_tmp;
	// int nres_e_1 = nres_e-1;
	// int res_e = -62 + e2 + (((Precision - e10) * 1741647) >> 19);
	// int nres_e2 = 62 - e2 - (((Precision - e10_tmp) * 1741647) >> 19);
	//  if((value >= _10en[e10_tmp + 1 + 324])){
	//  	printf("e1 = %d, e2 = %d is_gt= %d\n",nres_e,nres_e2 ,(value >= _10en[e10_tmp + 1 + 324]));
	//  }
	e10 = (value_abs_u64 == 0 ? 0 : e10); // 处理特殊值0
	// int e10_len = abs(e10) >= 100;

	uint64_t mul_res_f;
	// uint64_t mul_res_f2;
#if defined(_MSC_VER)	// msvc
	_umul128(f, pow10_f, &mul_res_f);
#elif defined(__GNUC__) // gcc,icx,clang
	_mulx_u64(f, pow10_f, (unsigned long long *)&mul_res_f);
	//_mulx_u64(f, pow10_f_2, (unsigned long long *)&mul_res_f);
	//_mulx_u64(f, pow10_f2, (unsigned long long *)&mul_res_f2);
#else
	const uint64_t M32 = 0xFFFFFFFF;
	const uint64_t a = f >> 32;
	const uint64_t b = f & M32;
	const uint64_t c = pow10_f >> 32;
	const uint64_t d = pow10_f & M32;
	const uint64_t ac = a * c;
	const uint64_t bc = b * c;
	const uint64_t ad = a * d;
	// const uint64_t bd = b * d;
	uint64_t hi = ac + (ad >> 32) + (bc >> 32);
	// uint64_t lo = bd + (ad & M32) + (bc & M32);
	mul_res_f = hi; // +(lo >> 63);
#endif
	using ull = unsigned long long;
	// ull num0_rest = (mul_res_f >> (nres_e)) + ((mul_res_f >> (nres_e - 1)) & 1);
	ull num0_rest = (mul_res_f + (1ull << (nres_e - 1))) >> (nres_e);
	// ull num0_rest = (mul_res_f  + ((1ull<<63) << (nres_e))  ) >> (nres_e);
	// uint64_t num0_rest = (mul_res_f >> (-res_e)) + ((mul_res_f >> (-res_e - 1)) & 1);
	// uint64_t num0_rest = (mul_res_f >> (nres_e2)) + ((mul_res_f2 >> (nres_e2 - 1)) & 1);
	// ull num0_rest_2 = ((mul_res_f >> 1) + (mul_res_f >> 3) ) >>  (nres_e - 4) ;
	//__assume( (unsigned long long)(1e16)<= num0_rest &&  num0_rest<= (unsigned long long)(2e17) );
	//  getcycle();

	// if (num0_rest >= (unsigned long long)(1e17))
	// {
	// 	// num0_rest = num0_rest / 10ull + (num0_rest % 10ull >= 5ull);
	// 	num0_rest = (num0_rest + 5) / 10;
	// 	e10_tmp++;
	// }
	// if (num0_rest < (unsigned long long)(1e16))
	// {
	// 	num0_rest = num0_rest_2;
	// 	e10_2--;
	// }
	// printf("num0_rest = %lld\n",num0_rest);

	// e10 -= num0_rest < (unsigned long long)(1e16);
	// e10_2 = (value_abs_u64 == 0 ? 0 : e10_2); // 处理特殊值0
	//  getcycle();
	//  num0_rest = (num0_rest+5)/10;
	//   int64_t num0_rest = (mul_res_f + ((1)<<(-1-mul_res_e)) ) >>  (-mul_res_e );
	int high9 = num0_rest / (ull)(1e8);
	int low8 = num0_rest % (ull)(1e8);

	// int num123 = high9 / int(1e6);
	// int num123 = num0_rest / (ull)(1e14);
	// printf("num0_rest = %lld\n",num0_rest);
	//  if(num0_rest > (unsigned long long)(1e17) ){
	//  	high9 = num0_rest / (unsigned long long)(1e9);
	//  	low8 = (num0_rest+5) % int(1e9);
	//  }
	const __m512i n8_t = _mm512_set_epi64(high9, high9, high9, high9, low8, low8, low8, low8);
	const ull ONE = 0xFFFFFFFFFFFFFFFFull;
	// const __m512i n8_t3 = _mm512_set_epi64(high9, high9, high9, high9, high9, high9, high9, high9);
	// const __m512i n8_t2 = _mm512_set_epi64(low8, low8, low8, low8, low8, low8, low8, low8);
	// const __m512i n8_t = _mm512_mask_blend_epi64(0xf0, n8_t, n8_t2);
	// const size_t n6 = 18014398510;	  // 2**54/1e6
	// const size_t n3 = 18014398509482; // 2**54/1e3
	// const unsigned long long M54 = (1ull << 54) - 1;
	// const __m512i n = _mm512_set_epi64(n6, n6, n3, 0, n6, n6, n3, 0);
	// const __m512i mask8_ = _mm512_set_epi64(ONE, M54, M54, 0, ONE, M54, M54, 0);
	// const __m512i t1_ = _mm512_set_epi64(1, 1000, 1000, 0, 1, 1000, 1000, 0);
	// const __m512i t54 = _mm512_set1_epi64(54);
	// __m512i result_8_my_2 = _mm512_srlv_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8_t, n), mask8_), t1_), t54);

	short *buffer_short_ptr = (short *)&buffer[index + 2];
	const size_t m8 = 1441151881;
	const size_t m6 = 144115188076;
	const size_t m4 = 14411518807586;
	const size_t m2 = 1441151880758559;
	const __m512i m = _mm512_set_epi64(18014398510, m6, m4, m2, m8, m6, m4, m2);
	const size_t M57 = (1ull << 57) - 1;
	const __m512i mask8 = _mm512_set_epi64(ONE, M57, M57, M57, M57, M57, M57, M57);
	const __m512i t1 = _mm512_set_epi64(1, 100, 100, 100, 100, 100, 100, 100);
	const __m512i t2 = _mm512_set_epi64(54, 57, 57, 57, 57, 57, 57, 57);
	__m512i result_8_my_2 = _mm512_srlv_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8_t, m), mask8), t1), t2);
	alignas(64) uint64_t result_2[8], result_3[8];
	_mm512_store_epi64(result_2, result_8_my_2);
	__m512i num_8_print = 48 * 257 + (result_8_my_2 << 8) - ((result_8_my_2 * 103) >> 10) * 2559;
	const char idx_array[64] = {
		0 + 8 * 6, 1 + 8 * 6,
		0 + 8 * 5, 1 + 8 * 5,
		0 + 8 * 4, 1 + 8 * 4,
		0 + 8 * 3, 1 + 8 * 3,
		0 + 8 * 2, 1 + 8 * 2,
		0 + 8 * 1, 1 + 8 * 1,
		0 + 8 * 0, 1 + 8 * 0,
		0};
	using ll = long long;
	const __m512i idx = _mm512_loadu_si512(idx_array);
	const __m512i idx2 = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 2) << (8 * 0)) + ((ll)(1 + 8 * 2) << (8 * 1)) +
			((ll)(0 + 8 * 1) << (8 * 2)) + ((ll)(1 + 8 * 1) << (8 * 3)) +
			((ll)(0 + 8 * 0) << (8 * 4)) + ((ll)(1 + 8 * 0) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)) +
			((ll)(0 + 8 * 3) << (8 * 6)) + ((ll)(1 + 8 * 3) << (8 * 7)));
	__m512i num_8_print2 = _mm512_permutexvar_epi8(idx2, num_8_print);
	_mm512_store_epi64(result_3, num_8_print2);
	char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[result_2[7]];
	// *(int *)&ptr[4] = digit1000e[result_2[6]];
	// *(int *)&ptr[7] = digit1000e[result_2[5]];
	// *(short *)&ptr[10] = short_array[result_2[3]];
	// *(int *)&ptr[12] = digit1000e[result_2[2]];
	// *(int *)&ptr[15] = digit1000e[result_2[1]];
	*(int *)ptr = digit_000_999[result_2[7]];
	//*(int *)ptr = digit_000_999[0];
	*(unsigned long long *)(ptr + 4) = result_3[0];
	*(unsigned long long *)(ptr + 12) = result_3[1];
	index += 18;
	const long long *exp_ptr = &exp_result3[324];
	*(long long *)&buffer[index] = exp_ptr[e10];
	// index += (4+(abs(e10) >= 100));
	// index += (4+(  (e10 >= 100) | (e10 <= -100)));
	// index += 4;
	for (int i = 1; i < 8; ++i)
	{
		// buffer_short_ptr[i] = short_array[result_2[7 - i]];
		// buffer_short_ptr[i] = short(result_3[7 - i]);
	}
	//*(int *)ptr = digit_00_99[result_2[7]];
	// *(int *)&ptr[3] = digit1000e[result_2[6]];
	// *(int *)&ptr[6] = digit1000e[result_2[5]];
	// *(int *)&ptr[9] = digit1000e[result_2[3]];
	// *(int *)&ptr[12] = digit1000e[result_2[2]];
	// *(int *)&ptr[15] = digit1000e[result_2[1]];

	return index;
	// return index  + 22 + (abs(e10) >= 100);
	// return 0;
}
#endif
template <int Precision = 16>
__attribute__((always_inline)) int my_dou_to_sci_opt(double value, char *buffer)
{
	using ull = unsigned long long;
	using ll = long long;
	buffer[0] = '-';
	ull value_u64 = (*(ull *)&value); // 转u64
	ull index = value_u64 >> 63;	  // 正负号
	ull value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	ll ieee754_exp11 = (value_abs_u64 >> 52); // 阶码
	if (ieee754_exp11 == 0x7ff) [[unlikely]] // 阶码全为1
	{
		// if (value_abs_u64 > (0x7ffull << 52))
		// 	strcpy(&buffer[index], "nan");
		// else
		// 	strcpy(&buffer[index], "inf");
		//*(int*)&buffer[index] = (value_abs_u64 == (0x7ffull << 52)) ? "inf\0":"nan\0";
		memcpy(&buffer[index], (value_abs_u64 == (0x7ffull << 52)) ? "inf\0":"nan\0" , 4);
		return index + 3;
	}
	ull f;
	ll e2;
	if (ieee754_exp11 != 0)
	{
		f = (value_u64 << 11) | ((1ull) << 63);
		e2 = ieee754_exp11 - 1023ll;
	}
	else
	{
		if (value_abs_u64 == 0)
		{
			buffer[index]='0';
			return index + 1;
		}
		ull clz = _lzcnt_u64(value_abs_u64);
		f = (value_abs_u64) << clz;
		e2 = -1011 - clz;
	}
	ll e10_tmp = ((e2 * 78913) >> 18);// == floor(e2*log10(2))
	const ull *_10en_ptr = (ull *)&_10en[1 + 324];
	// int e10 = e10_tmp + (value_abs_u64 >= *(ull *)&_10en[e10_tmp + 1 + 324]) - (value_abs_u64 == 2);
	ll e10 = e10_tmp + (value_abs_u64 >= _10en_ptr[e10_tmp]); // _10en_ptr[e10_tmp] = pow(10, e10_tmp)
	const ull *power_ptr = &powers_ten_reverse[343 - Precision];
	ull pow10_f = power_ptr[e10];// 误差来源 1
	// long long nres_e = 62 - e2 - (((Precision - e10) * 1741647) >> 19);
	long long nres_e1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	ull mul_res_f;
	_mulx_u64(f, pow10_f, (ull *)&mul_res_f);
	ll length;
	// ull num0_rest = (mul_res_f + (1ull << (nres_e - 1))) >> (nres_e); // 1e16<= num0_rest < 1e17
	ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;// 误差来源 2
	ull high9 = num0_rest_mul2 / (ll)(2e8); // 1e8 <= high9 < 1e9
	__m512i h9_4r = _mm512_castsi256_si512(_mm256_set1_epi64x(high9));
	ull num0_rest = (num0_rest_mul2) >> 1;
	ull low8 = num0_rest - high9 * (ll)(1e8); // 0<= low8 < 1e8
	length = index + 22;
	__m256i l8_4r = _mm256_set1_epi64x(low8);
	__m512i n8r = _mm512_inserti64x4(h9_4r, l8_4r, 1);
	length += ((e10 >= 100) | (e10 <= -100));
	const ull ONE = 0xFFFFFFFFFFFFFFFFull;
	const ull m8 = 180143986;		//>>> 2**54/1e8
	const ull m6 = 18014398510;		//>>> 2**54/1e6
	const ull m4 = 1801439850949;	//>>> 2**54/1e4
	const ull m2 = 180143985094820; //>>> 2**54/1e2
	// const __m512i m = _mm512_set_epi64(m6, m6, m4, m2, m8, m6, m4, m2);
	const __m512i mr = _mm512_set_epi64(m8, m6, m4, m2, m6, m4, m2, m6);
	const ull L10 = (0x3ffull) << 54;
	const ull M54 = (1ull << 54) - 1;
	const ull M53 = (1ull << 53) - 1;
	const ull M8 = 0xff00;
	// const __m512i mask8 = _mm512_set_epi64(ONE, M54, M54, M54, M54, M54, M54, M54);
	// const __m512i mask8r = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i M54_8 = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i L10_8 = _mm512_set1_epi64(L10);
	// const __m512i M53_8 = _mm512_set1_epi64(M53);
	const __m512i M54_8_all = _mm512_set1_epi64(M54);
	const __m512i M8_8_2 = _mm512_set_epi64(M8, M8, M8, M8, M8, M8, M8, M8);
	// const __m512i M54_8 = _mm512_set1_epi64(M54);
	// const __m512i t1 = _mm512_set_epi64(1, 100, 100, 100, 100, 100, 100, 100);
	// const __m512i t1r = _mm512_set_epi64(100, 100, 100, 100, 100, 100, 100, 1);
	ll t10[8] = {1, 10, 10, 10, 10, 10, 10, 10};
	//__m512i t10r = _mm512_set_epi64(10, 10, 10, 10, 10, 10, 10, 1);
	__m512i t10r = _mm512_loadu_epi64(t10);
	const __m512i T10_8 = _mm512_set1_epi64(10);
	char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[high3]; // result_8[0] , xmm
	//__m512i result_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8, m), mask8), t1), 54);
	//__m512i result_8r = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), mask8r), t1r), 54);
	const __mmask8 mask7 = 0b11111110;
	__m512i tmp_8_0 = _mm512_mullo_epi64(n8r, mr);
	__m512i tmp_8_1 = _mm512_mask_and_epi64(tmp_8_0,
											mask7,
											tmp_8_0,
											M54_8_all);
	//__m512i tmp_8_1 = _mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), M54_8);
	__m512i tmp_8_2 = _mm512_mullo_epi64(tmp_8_1, t10r);
	//__m512i tmp_8_2 = _mm512_mask_mullo_epi64( tmp_8_1, mask7 ,tmp_8_1, T10_8 );
	//__m512i tmp_8_2 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_1, 3) , _mm512_slli_epi64(tmp_8_1, 1));
	// __m512i tmp_8_2 = _mm512_mask_add_epi64( _mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										mask7 ,
	// 										_mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										_mm512_mask_slli_epi64(tmp_8_1,mask7, tmp_8_1,1));// = tmp_8_1 * 10

	//__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030ll) | tmp_8_1_print;
	//__m512i tmp_8_3 = mul10_1( _mm512_and_epi64( tmp_8_2 , mask8r ));
	__m512i tmp_8_3_t = _mm512_and_epi64(tmp_8_2, M54_8_all);
	//__m512i tmp_8_3 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 3) , _mm512_slli_epi64(tmp_8_3_t, 1));// = tmp_8_3_t * 10 ; 10 = 8 + 2
	__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, t10r); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, T10_8); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3_53 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 2) , tmp_8_3_t); // = tmp_8_3_t * 5
	//__m512i tmp_8_3_53 = tmp_8_3_t * 5; // = tmp_8_3_t * 5
	__m512i tmp_8_1_print = _mm512_srli_epi64(tmp_8_2, 54);
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_andnot_epi64(M54_8_all, tmp_8_3), (54 - 8));
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_and_epi64(L10_8, tmp_8_3), (54 - 8));
	//__m512i M53_8 = _mm512_srli_epi64(M54_8, 1);
	//__m512i tmp_8_2_print_53 = _mm512_srli_epi64(_mm512_andnot_epi64(M53_8, tmp_8_3_53), (53 - 8));
	__m512i tmp_8_2_print = _mm512_and_epi64(_mm512_srli_epi64(tmp_8_3, (54 - 8)), M8_8_2);
	__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030) | tmp_8_1_print | tmp_8_2_print;
	//__m512i tmp_8_3_print = _mm512_ternarylogic_epi64( _mm512_set1_epi64(0x3030ll), tmp_8_1_print, tmp_8_2_print , 254);// a | b | c
	// tmp_8_3_print |= tmp_8_2_print;
	//__m512i result_8r = (((n8r*mr) & mask8r)*t1r) >> 54;
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	//__m512i num_8_print = 48 * 257 + (result_8 * 256) - ((result_8 * 103) >> 10) * 2559;
	// __m512i num_8_print = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														_mm512_slli_epi64(result_8, 8)),
	// 									   _mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//__m512i num_8_printr = (48 * 257) + (result_8r << 8) - ((result_8r * 103) >> 10) * 2559;
	// result_8r * 6554 >> 16;
	// __m512i num_8_printr = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														 _mm512_slli_epi64(result_8r, 8)),
	// 										_mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8r, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	const __m512i idx = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 2) << (8 * 0)) + ((ll)(1 + 8 * 2) << (8 * 1)) +
			((ll)(0 + 8 * 1) << (8 * 2)) + ((ll)(1 + 8 * 1) << (8 * 3)) +
			((ll)(0 + 8 * 0) << (8 * 4)) + ((ll)(1 + 8 * 0) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)) +
			((ll)(0 + 8 * 3) << (8 * 6)) + ((ll)(1 + 8 * 3) << (8 * 7)));
	const __m512i idxr = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 3) << (8 * 0)) + ((ll)(1 + 8 * 3) << (8 * 1)) +
			((ll)(0 + 8 * 2) << (8 * 2)) + ((ll)(1 + 8 * 2) << (8 * 3)) +
			((ll)(0 + 8 * 1) << (8 * 4)) + ((ll)(1 + 8 * 1) << (8 * 5)) +
			((ll)(0 + 8 * 7) << (8 * 6)) + ((ll)(1 + 8 * 7) << (8 * 7)));
	const __m512i idx_epi16 = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 4 * 2) << (8 * 0)) +
			((ll)(0 + 4 * 1) << (8 * 2)) +
			((ll)(0 + 4 * 0) << (8 * 4)),
		// first value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)) +
			((ll)(0 + 4 * 3) << (8 * 6)));
	ll idxr_epi16_arr[2] = {
		// first value
		((ll)(0 + 4 * 3) << (8 * 0)) +
			((ll)(0 + 4 * 2) << (8 * 2)) +
			((ll)(0 + 4 * 1) << (8 * 4)) +
			((ll)(0 + 4 * 7) << (8 * 6)),
		// second value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)),
	};
	const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_loadu_epi64(idxr_epi16_arr));
	// const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_set_epi64x(
	// 	// second value
	// 	((ll)(0 + 4 * 6) << (8 * 0)) +
	// 		((ll)(0 + 4 * 5) << (8 * 2)) +
	// 		((ll)(0 + 4 * 4) << (8 * 4)),
	// 	// first value
	// 	((ll)(0 + 4 * 3) << (8 * 0)) +
	// 		((ll)(0 + 4 * 2) << (8 * 2)) +
	// 		((ll)(0 + 4 * 1) << (8 * 4)) +
	// 		((ll)(0 + 4 * 7) << (8 * 6))));
	// char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
#if 0 // cpuid : avx512_vbmi ; some cpu may not suppport
	//__m512i num_8_print_final = _mm512_permutexvar_epi8(idx, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));//1,0 ; low128bit:xmm ; mov xmm to memory

	__m512i num_8_print_finalr = _mm512_permutexvar_epi8(idxr, num_8_printr);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr,0));//1,0 ; low128bit:xmm ; mov xmm to memory
#else // cpuid : avx512_bw
	//__m512i num_8_print_final = _mm512_permutexvar_epi16(idx_epi16, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));

	__m512i num_8_print_finalr = _mm512_permutexvar_epi16(idxr_epi16, tmp_8_3_print);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr, 0)); // 1,0 ; low128bit:xmm ; mov xmm to memory
#endif
	*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	// ll length = index + 22 + ((e10 >= 100) | (e10 <= -100));
	const ll *exp_ptr = &exp_result3[324];
	const char *ptr_18 = (char *)&buffer[18];
	*(ll *)&ptr_18[index] = exp_ptr[e10];
	return length; // write char length
}

template <int Precision = 16>
__attribute__((always_inline)) int d2e(double value, char *buffer)
{
	using ull = unsigned long long;
	using ll = long long;
	buffer[0] = '-';
	ull value_u64 = (*(ull *)&value);					// 转u64
	ull index = value_u64 >> 63;						// 正负号
	ull value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	ll ieee754_exp11 = (value_abs_u64 >> 52);			// 阶码
	if (ieee754_exp11 == 0x7ff) [[unlikely]]
	{
		if (value_abs_u64 > (0x7ffull << 52))
			strcpy(&buffer[index], "nan"); // buffer[index]
		else
			strcpy(&buffer[index], "inf");
		return index + 3;
	}
	ull f;
	ll e2;
	if (ieee754_exp11 != 0)
	{
		f = (value_u64 << 11) | ((1ull) << 63);
		e2 = ieee754_exp11 - 1023ll; // = e+63
	}
	else
	{
		if (value_abs_u64 == 0)
		{
			buffer[index] = '0';
			return index + 1;
		}
		ull clz = _lzcnt_u64(value_abs_u64);
		f = (value_abs_u64) << clz;
		e2 = -1011 - clz;
	}
	ll e10_tmp = ((e2 * 78913) >> 18);
	const ull *_10en_ptr = (ull *)&_10en[1 + 324];
	ll e10 = e10_tmp + (value_abs_u64 >= _10en_ptr[e10_tmp]);
	const ull *power_ptr = &powers_ten_reverse[343 - Precision];
	ull pow10_f = power_ptr[e10];
	long long nres_e1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	ull mul_res_f;
	_mulx_u64(f, pow10_f, (ull *)&mul_res_f);
	ll length = index + 22;
	ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;
	ull high9 = num0_rest_mul2 / (ull)(2e8); // 1e8 <= high9 < 1e9
	ull num0_rest = (num0_rest_mul2) >> 1;
	ull low8 = num0_rest - high9 * (ull)(1e8); // 0 <= low8 < 1e8
	length += ((e10 >= 100) | (e10 <= -100));
	const ull M50 = (1ull << 50) - 1;

	// 123 45 67 89
	// 12 34 56 78
	//  register not enough
	if (0)
	{
		ull num123_456789 = high9 * 1125899907ull;
		ull num123 = num123_456789 >> 50;
		ull num456_789 = (num123_456789 & M50) * 1000ull;
		ull num456 = num456_789 >> 50;
		ull num789 = ((num456_789 & M50) * 1000ull) >> 50;

		*(int *)&buffer[index + 0] = digit_000_999[num123]; // 4
		*(int *)&buffer[index + 4] = digit1000e[num456];	// 3
		*(int *)&buffer[index + 7] = digit1000e[num789];	// 3

		ull num12_345678 = low8 * 1125899907ull;
		ull num12 = num12_345678 >> 50;
		ull num345_678 = (num12_345678 & M50) * 1000ull;
		ull num345 = num345_678 >> 50;
		ull num678 = ((num345_678 & M50) * 1000ull) >> 50;

		*(short *)&buffer[index + 10] = short_array[num12]; // 2
		*(int *)&buffer[index + 12] = digit1000e[num345];	// 3
		*(int *)&buffer[index + 15] = digit1000e[num678];	// 3

	}
	if(1)//sse instruction
	{
		//const __m128i NUM_1000 = _mm_set1_epi64x(1000ull);
		const __m128i M50_2 = _mm_set1_epi64x(M50);
		__m128i low8_high9 = _mm_set_epi64x(low8,high9);
		__m128i num123 = _mm_mul_epu32(low8_high9 , _mm_set1_epi64x(1125899907ull) );
		__m128i num1 = _mm_srli_epi64(num123,50);
		__m128i num_23 = _mm_and_si128(num123,M50_2);
		//__m128i num23 = (_mm_and_si128(num123,M50_2)) * 1000ull;// _mm_and_si128(num123,M50_2),
		//1000= 1024-16-8 = 2**10 - 2**4 - 2**3
		__m128i num23 = _mm_sub_epi64(_mm_sub_epi64 (_mm_slli_epi64(num_23,10) , _mm_slli_epi64(num_23,4)) , _mm_slli_epi64(num_23,3));
		__m128i num2 = _mm_srli_epi64(num23,50);
		__m128i num_3 = _mm_and_si128(num23,M50_2);
		//__m128i num3 = ((num23 & M50) * 1000ull) >> 50;
		__m128i num3 = _mm_srli_epi64(_mm_sub_epi64(_mm_sub_epi64 (_mm_slli_epi64(num_3,10) , _mm_slli_epi64(num_3,4)) , _mm_slli_epi64(num_3,3)),50);
		*(int *)&buffer[index + 0] = digit_000_999[num1[0]]; // 4
		*(int *)&buffer[index + 4] = digit1000e[num2[0]];	// 3
		*(int *)&buffer[index + 7] = digit1000e[num3[0]];	// 3
		*(short *)&buffer[index + 10] = short_array[num1[1]]; // 2
		*(int *)&buffer[index + 12] = digit1000e[num2[1]];	// 3
		*(int *)&buffer[index + 15] = digit1000e[num3[1]];	// 3
	}
	//avx2 instruction
	{
		// const M54 = (1ull<<54) - 1;
		// __m256i h9_8 = _mm256_set1_epi64x(high9);
		// __m256i l8_8 = _mm256_set1_epi64x(low8);
		// const ull m8 = 180143986;		//>>> 2**54/1e8
		// const ull m6 = 18014398510;		//>>> 2**54/1e6
		// const ull m4 = 1801439850949;	//>>> 2**54/1e4
		// const ull m2 = 180143985094820; //>>> 2**54/1e2
		// const __m256i m_4 = _mm256_set_epi64x(m8,m6,m4,m2);
		// __m256i t1 = (((m_4 * l8_8) & M54) * 100) >> 54;
		
	}

	if (0)
	{
		ull num123_456789 = high9 * 1125899907;
		ull num123 = num123_456789 >> 50;
		ull num_456789 = num123_456789 & M50;
		ull num456_789 = num_456789 * 100;
		ull num45 = num456_789 >> 50;
		ull num67_89 = ((num456_789 & M50) * 100);
		ull num67 = num67_89 >> 50;
		ull num89 = ((num67_89 & M50) * 100) >> 50;

		ull num12_345678 = low8 * 1125899907;
		ull num12 = num12_345678 >> 50;
		ull num_345678 = num12_345678 & M50;
		ull num34_5678 = num_345678 * 100;
		ull num34 = num34_5678 >> 50;
		ull num56_78 = ((num34_5678 & M50) * 1000);
		ull num56 = num56_78 >> 50;
		ull num78 = ((num56_78 & M50) * 100) >> 50;

		*(int *)&buffer[index + 0] = digit_000_999[num123]; // 4
		*(short *)&buffer[index + 4] = short_array[num45];	// 3
		*(short *)&buffer[index + 6] = short_array[num67];	// 3
		*(short *)&buffer[index + 8] = short_array[num89];	// 3
		*(short *)&buffer[index + 10] = short_array[num12]; // 2
		*(short *)&buffer[index + 12] = short_array[num34]; // 3
		*(short *)&buffer[index + 14] = short_array[num56]; // 3
		*(short *)&buffer[index + 16] = short_array[num78]; // 3

		// 48*257+m*256-2559*((m*103)>>10);
		// *(short*)&buffer[index + 4] = 48*257 + num45*256 - 2559*((num45*103)>>10);
		// *(short*)&buffer[index + 6] = 48*257 + num67*256 - 2559*((num67*103)>>10);
		// *(short*)&buffer[index + 8] = 48*257 + num89*256 - 2559*((num89*103)>>10);
		// *(short*)&buffer[index + 10] = 48*257 + num12*256 - 2559*((num12*103)>>10);
		// *(short*)&buffer[index + 12] = 48*257 + num34*256 - 2559*((num34*103)>>10);
		// *(short*)&buffer[index + 14] = 48*257 + num56*256 - 2559*((num56*103)>>10);
		// *(short*)&buffer[index + 16] = 48*257 + num78*256 - 2559*((num78*103)>>10);
	}
	const ll *exp_ptr = &exp_result3[324];
	const char *ptr_18 = (char *)&buffer[18];
	*(ll *)&ptr_18[index] = exp_ptr[e10];
	return length; // write char length
}

template <int Precision = 16>
__attribute__((always_inline)) int my_dou_to_short_opt(double value, char *buffer)
{
	using ull = unsigned long long;
	using ll = long long;
	// const ull POW10[17] = {(ull)1e0, (ull)1e1, (ull)1e2, (ull)1e3, (ull)1e4, (ull)1e5, (ull)1e6, (ull)1e7, (ull)1e8, (ull)1e9, (ull)1e10, (ull)1e11, (ull)1e12, (ull)1e13, (ull)1e14, (ull)1e15, (ull)1e16};
	// const ull mask11 = 0x7ff0000000000000;
	buffer[0] = '-';
	ull value_u64 = (*(ull *)&value); // 转u64
	ull index = value_u64 >> 63;	  // 正负号
	// char *write_ptr = &buffer[index];
	ull value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	// value = *(double *)&value_abs_u64;					// abs double
	ll ieee754_exp11 = (value_abs_u64 >> 52); // 阶码
	// ull ieee754_exp11_shl52 = value_u64 & mask11 ;
	// ll ieee754_exp11 = ieee754_exp11_shl52>>52;
	if (ieee754_exp11 == 0x7ff) [[unlikely]]
	{
		if (value_abs_u64 > (0x7ffull << 52))
			strcpy(&buffer[index], "nan");
		else
			strcpy(&buffer[index], "inf");
		return index + 3;
	}
	ull f;
	ll e2;
	if (ieee754_exp11 != 0)
	{
		// f = (value_abs_u64 << 11) | ((1ull) << 63);
		f = (value_u64 << 11) | ((1ull) << 63);
		e2 = ieee754_exp11 - 1023ll; // = e+63
	}
	else
	{
		if (value_abs_u64 == 0)
		{
			strcpy(&buffer[index], "0");
			return index + 1;
		}
		int clz = 0;
#if defined(_MSC_VER)
		clz = __lzcnt64(value_abs_u64);
#elif defined(__GNUC__)
		clz = __builtin_clzll(value_abs_u64); // 计算前缀0的个数
#endif
		f = (value_abs_u64) << clz;
		e2 = -1011 - clz;
		// e2 = -1022 - (clz - 11); //-1011-clz
	}
	ll e10_tmp = ((e2 * 78913) >> 18);
	const ull *_10en_ptr = (ull *)&_10en[1 + 324];
	// int e10 = e10_tmp + (value_abs_u64 >= *(ull *)&_10en[e10_tmp + 1 + 324]) - (value_abs_u64 == 2);
	// int e10 = e10_tmp + (value_abs_u64 >= *(ull *)&_10en[e10_tmp + 1 + 324]);
	ll e10 = e10_tmp + (value_abs_u64 >= _10en_ptr[e10_tmp]); // _10en_ptr[e10_tmp] = pow(10, e10_tmp)
	const ull *power_ptr = &powers_ten_reverse[343 - Precision];
	ull pow10_f = power_ptr[e10];
	// long long nres_e = 62 - e2 - (((Precision - e10) * 1741647) >> 19);
	long long nres_e1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	// int nres_e1 = 61 - (int)e2 - (((Precision - (int)e10) * 1741647) >> 19);
	ull mul_res_f;
#if defined(_MSC_VER) // msvc
	_umul128(f, pow10_f, &mul_res_f);
#elif defined(__GNUC__) // gcc,icx,clang
	_mulx_u64(f, pow10_f, (ull *)&mul_res_f);
#else
	const ull M32 = 0xFFFFFFFFull;
	const ull a = f >> 32;
	const ull b = f & M32;
	const ull c = pow10_f >> 32;
	const ull d = pow10_f & M32;
	const ull ac = a * c;
	const ull bc = b * c;
	const ull ad = a * d;
	mul_res_f = ac + (ad >> 32) + (bc >> 32);
#endif
	ll length;
	// ull num0_rest = (mul_res_f + (1ull << (nres_e - 1))) >> (nres_e); // 1e16<= num0_rest < 1e17
	ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;
	ull high9 = num0_rest_mul2 / (ull)(2e8); // 1e8 <= high9 < 1e9
	// ull res_high9;
	// _mulx_u64(num0_rest_mul2, 0xABCC77118461CEFD, (ull *)&res_high9);
	// ull high9 = res_high9 >> 27;
	__m512i h9_4r = _mm512_castsi256_si512(_mm256_set1_epi64x(high9));
	ull num0_rest = (num0_rest_mul2) >> 1;
	{
		double tmp_d = num0_rest;
		ull tmp_i = tmp_d;
		printf("tmp_i=%lld\n", tmp_i);
	}
	ull low8 = num0_rest - high9 * (ull)(1e8); // 0<= low8 < 1e8
	length = index + 22;
	__m256i l8_4r = _mm256_set1_epi64x(low8);
	__m512i n8r = _mm512_inserti64x4(h9_4r, l8_4r, 1);
	length += ((e10 >= 100) | (e10 <= -100));
	int ctz = count_tz(high9, low8);
	int out_pos = 18 - ctz - (ctz == 16);

	const ull ONE = 0xFFFFFFFFFFFFFFFFull;
	const ull m8 = 180143986;		//>>> 2**54/1e8
	const ull m6 = 18014398510;		//>>> 2**54/1e6
	const ull m4 = 1801439850949;	//>>> 2**54/1e4
	const ull m2 = 180143985094820; //>>> 2**54/1e2
	// const __m512i m = _mm512_set_epi64(m6, m6, m4, m2, m8, m6, m4, m2);
	const __m512i mr = _mm512_set_epi64(m8, m6, m4, m2, m6, m4, m2, m6);
	const ull L10 = (0x3ffull) << 54;
	const ull M54 = (1ull << 54) - 1;
	const ull M53 = (1ull << 53) - 1;
	const ull M8 = 0xff00;
	// const __m512i mask8 = _mm512_set_epi64(ONE, M54, M54, M54, M54, M54, M54, M54);
	// const __m512i mask8r = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i M54_8 = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i L10_8 = _mm512_set1_epi64(L10);
	// const __m512i M53_8 = _mm512_set1_epi64(M53);
	const __m512i M54_8_all = _mm512_set1_epi64(M54);
	const __m512i M8_8_2 = _mm512_set_epi64(M8, M8, M8, M8, M8, M8, M8, M8);
	// const __m512i M54_8 = _mm512_set1_epi64(M54);
	// const __m512i t1 = _mm512_set_epi64(1, 100, 100, 100, 100, 100, 100, 100);
	// const __m512i t1r = _mm512_set_epi64(100, 100, 100, 100, 100, 100, 100, 1);
	ll t10[8] = {1, 10, 10, 10, 10, 10, 10, 10};
	//__m512i t10r = _mm512_set_epi64(10, 10, 10, 10, 10, 10, 10, 1);
	__m512i t10r = _mm512_loadu_epi64(t10);
	const __m512i T10_8 = _mm512_set1_epi64(10);
	char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[high3]; // result_8[0] , xmm
	//__m512i result_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8, m), mask8), t1), 54);
	//__m512i result_8r = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), mask8r), t1r), 54);
	const __mmask8 mask7 = 0b11111110;
	__m512i tmp_8_0 = _mm512_mullo_epi64(n8r, mr);
	__m512i tmp_8_1 = _mm512_mask_and_epi64(tmp_8_0,
											mask7,
											tmp_8_0,
											M54_8_all);
	//__m512i tmp_8_1 = _mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), M54_8);
	__m512i tmp_8_2 = _mm512_mullo_epi64(tmp_8_1, t10r);
	//__m512i tmp_8_2 = _mm512_mask_mullo_epi64( tmp_8_1, mask7 ,tmp_8_1, T10_8 );
	//__m512i tmp_8_2 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_1, 3) , _mm512_slli_epi64(tmp_8_1, 1));
	// __m512i tmp_8_2 = _mm512_mask_add_epi64( _mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										mask7 ,
	// 										_mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										_mm512_mask_slli_epi64(tmp_8_1,mask7, tmp_8_1,1));// = tmp_8_1 * 10

	//__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030ll) | tmp_8_1_print;
	//__m512i tmp_8_3 = mul10_1( _mm512_and_epi64( tmp_8_2 , mask8r ));
	__m512i tmp_8_3_t = _mm512_and_epi64(tmp_8_2, M54_8_all);
	//__m512i tmp_8_3 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 3) , _mm512_slli_epi64(tmp_8_3_t, 1));// = tmp_8_3_t * 10 ; 10 = 8 + 2
	__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, t10r); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, T10_8); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3_53 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 2) , tmp_8_3_t); // = tmp_8_3_t * 5
	//__m512i tmp_8_3_53 = tmp_8_3_t * 5; // = tmp_8_3_t * 5
	__m512i tmp_8_1_print = _mm512_srli_epi64(tmp_8_2, 54);
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_andnot_epi64(M54_8_all, tmp_8_3), (54 - 8));
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_and_epi64(L10_8, tmp_8_3), (54 - 8));
	//__m512i M53_8 = _mm512_srli_epi64(M54_8, 1);
	//__m512i tmp_8_2_print_53 = _mm512_srli_epi64(_mm512_andnot_epi64(M53_8, tmp_8_3_53), (53 - 8));
	__m512i tmp_8_2_print = _mm512_and_epi64(_mm512_srli_epi64(tmp_8_3, (54 - 8)), M8_8_2);
	__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030) | tmp_8_1_print | tmp_8_2_print;
	//__m512i tmp_8_3_print = _mm512_ternarylogic_epi64( _mm512_set1_epi64(0x3030ll), tmp_8_1_print, tmp_8_2_print , 254);// a | b | c
	// tmp_8_3_print |= tmp_8_2_print;
	//__m512i result_8r = (((n8r*mr) & mask8r)*t1r) >> 54;
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	//__m512i num_8_print = 48 * 257 + (result_8 * 256) - ((result_8 * 103) >> 10) * 2559;
	// __m512i num_8_print = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														_mm512_slli_epi64(result_8, 8)),
	// 									   _mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//__m512i num_8_printr = (48 * 257) + (result_8r << 8) - ((result_8r * 103) >> 10) * 2559;
	// result_8r * 6554 >> 16;
	// __m512i num_8_printr = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														 _mm512_slli_epi64(result_8r, 8)),
	// 										_mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8r, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	const __m512i idx = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 2) << (8 * 0)) + ((ll)(1 + 8 * 2) << (8 * 1)) +
			((ll)(0 + 8 * 1) << (8 * 2)) + ((ll)(1 + 8 * 1) << (8 * 3)) +
			((ll)(0 + 8 * 0) << (8 * 4)) + ((ll)(1 + 8 * 0) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)) +
			((ll)(0 + 8 * 3) << (8 * 6)) + ((ll)(1 + 8 * 3) << (8 * 7)));
	const __m512i idxr = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 3) << (8 * 0)) + ((ll)(1 + 8 * 3) << (8 * 1)) +
			((ll)(0 + 8 * 2) << (8 * 2)) + ((ll)(1 + 8 * 2) << (8 * 3)) +
			((ll)(0 + 8 * 1) << (8 * 4)) + ((ll)(1 + 8 * 1) << (8 * 5)) +
			((ll)(0 + 8 * 7) << (8 * 6)) + ((ll)(1 + 8 * 7) << (8 * 7)));
	const __m512i idx_epi16 = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 4 * 2) << (8 * 0)) +
			((ll)(0 + 4 * 1) << (8 * 2)) +
			((ll)(0 + 4 * 0) << (8 * 4)),
		// first value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)) +
			((ll)(0 + 4 * 3) << (8 * 6)));
	ll idxr_epi16_arr[2] = {
		// first value
		((ll)(0 + 4 * 3) << (8 * 0)) +
			((ll)(0 + 4 * 2) << (8 * 2)) +
			((ll)(0 + 4 * 1) << (8 * 4)) +
			((ll)(0 + 4 * 7) << (8 * 6)),
		// second value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)),
	};
	const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_loadu_epi64(idxr_epi16_arr));
	// const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_set_epi64x(
	// 	// second value
	// 	((ll)(0 + 4 * 6) << (8 * 0)) +
	// 		((ll)(0 + 4 * 5) << (8 * 2)) +
	// 		((ll)(0 + 4 * 4) << (8 * 4)),
	// 	// first value
	// 	((ll)(0 + 4 * 3) << (8 * 0)) +
	// 		((ll)(0 + 4 * 2) << (8 * 2)) +
	// 		((ll)(0 + 4 * 1) << (8 * 4)) +
	// 		((ll)(0 + 4 * 7) << (8 * 6))));
	// char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
#if 0 // cpuid : avx512_vbmi ; some cpu may not suppport
	//__m512i num_8_print_final = _mm512_permutexvar_epi8(idx, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));//1,0 ; low128bit:xmm ; mov xmm to memory

	__m512i num_8_print_finalr = _mm512_permutexvar_epi8(idxr, num_8_printr);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr,0));//1,0 ; low128bit:xmm ; mov xmm to memory
#else // cpuid : avx512_bw
	//__m512i num_8_print_final = _mm512_permutexvar_epi16(idx_epi16, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));

	__m512i num_8_print_finalr = _mm512_permutexvar_epi16(idxr_epi16, tmp_8_3_print);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr, 0)); // 1,0 ; low128bit:xmm ; mov xmm to memory
#endif
	*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	// ll length = index + 22 + ((e10 >= 100) | (e10 <= -100));
	const ll *exp_ptr = &exp_result3[324];
	// const char *ptr_18 = (char *)&buffer[18];
	const char *ptr_18 = (char *)&buffer[out_pos];
	*(ll *)&ptr_18[index] = exp_ptr[e10];
	return length; // write char length
}

template <int Precision = 16>
__attribute__((always_inline)) int my_dou_to_short_test_opt(double value, char *buffer)
{
	using ull = unsigned long long;
	using ll = long long;
	// const ull POW10[17] = {(ull)1e0, (ull)1e1, (ull)1e2, (ull)1e3, (ull)1e4, (ull)1e5, (ull)1e6, (ull)1e7, (ull)1e8, (ull)1e9, (ull)1e10, (ull)1e11, (ull)1e12, (ull)1e13, (ull)1e14, (ull)1e15, (ull)1e16};
	// const ull mask11 = 0x7ff0000000000000;
	buffer[0] = '-';
	ull value_u64 = (*(ull *)&value); // 转u64
	ull index = value_u64 >> 63;	  // 正负号
	// char *write_ptr = &buffer[index];
	ull value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	// value = *(double *)&value_abs_u64;					// abs double
	ll ieee754_exp11 = (value_abs_u64 >> 52); // 阶码
	// ull ieee754_exp11_shl52 = value_u64 & mask11 ;
	// ll ieee754_exp11 = ieee754_exp11_shl52>>52;
	if (ieee754_exp11 == 0x7ff) [[unlikely]]
	{
		if (value_abs_u64 > (0x7ffull << 52))
			strcpy(&buffer[index], "nan");
		else
			strcpy(&buffer[index], "inf");
		return index + 3;
	}
	ull f;
	ll e2;
	ull fh, fl;
	ll e2h, e2l;
	if (ieee754_exp11 != 0)
	{
		// f = (value_abs_u64 << 11) | ((1ull) << 63);
		f = (value_u64 << 11) | ((1ull) << 63);
		// fh = f + (1<<10);
		fh = f + (1024);
		fl = f - (1024);// may be
		e2 = ieee754_exp11 - 1023ll; // = e+63
									 // e2h = e2;
		// e2l = e2 - ((value_u64<<12) == 0);
	}
	else
	{
		if (value_abs_u64 == 0)
		{
			strcpy(&buffer[index], "0");
			return index + 1;
		}
		int clz = 0;
#if defined(_MSC_VER)
		clz = __lzcnt64(value_abs_u64);
#elif defined(__GNUC__)
		clz = __builtin_clzll(value_abs_u64); // 计算前缀0的个数
#endif
		f = (value_abs_u64) << clz;
		e2 = -1011 - clz;
		// e2 = -1022 - (clz - 11); //-1011-clz
	}

	ll e10_tmp = ((e2 * 78913) >> 18);
	const ull *_10en_ptr = (ull *)&_10en[1 + 324];
	// int e10 = e10_tmp + (value_abs_u64 >= *(ull *)&_10en[e10_tmp + 1 + 324]) - (value_abs_u64 == 2);
	// int e10 = e10_tmp + (value_abs_u64 >= *(ull *)&_10en[e10_tmp + 1 + 324]);
	ll e10 = e10_tmp + (value_abs_u64 >= _10en_ptr[e10_tmp]); // _10en_ptr[e10_tmp] = pow(10, e10_tmp)
	const ull *power_ptr = &powers_ten_reverse[343 - Precision];
	ull pow10_f = power_ptr[e10];
	// long long nres_e = 62 - e2 - (((Precision - e10) * 1741647) >> 19);
	long long nres_e1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	// int nres_e1 = 61 - (int)e2 - (((Precision - (int)e10) * 1741647) >> 19);
	ull mul_res_f;

#if defined(_MSC_VER) // msvc
	_umul128(f, pow10_f, &mul_res_f);
#elif defined(__GNUC__) // gcc,icx,clang
	_mulx_u64(f, pow10_f, (ull *)&mul_res_f);
#else
	const ull M32 = 0xFFFFFFFFull;
	const ull a = f >> 32;
	const ull b = f & M32;
	const ull c = pow10_f >> 32;
	const ull d = pow10_f & M32;
	const ull ac = a * c;
	const ull bc = b * c;
	const ull ad = a * d;
	mul_res_f = ac + (ad >> 32) + (bc >> 32);
#endif

	ull p15, p16h, p16l;
	long long nres_e18 = 62 - e2 - (((17 - e10) * 1741647) >> 19);
	const ull *power_ptr17 = &powers_ten_reverse[343 - 17];
	ull pow10_f17 = power_ptr17[e10];
	// Precision = 15
	{
		// long long nres_e1 = 61 - e2 - (((15 - e10) * 1741647) >> 19);
		long long nres_e1 = 61 - e2 - ((((16 - e10) * 1741647) - 1741647) >> 19);
		const ull *power_ptr = &powers_ten_reverse[343 - 15];
		ull pow10_f = power_ptr[e10];
		ull mul_res_f;
		_mulx_u64(f, pow10_f, (ull *)&mul_res_f);
		ull num0_rest = ((mul_res_f >> nres_e1) + 1) >> 1; // round
		//printf("num0_rest15 = %lld\n", num0_rest);
		p15 = num0_rest;
	}
	// fh  //not correct
	{
		// long long nres_e1 = 62 - e2 - (((17 - e10) * 1741647) >> 19);
		// const ull *power_ptr = &powers_ten_reverse[343 - 17];
		// ull pow10_f = power_ptr17[e10];
		ull mul_res_f;
		_mulx_u64(fh, pow10_f17, (ull *)&mul_res_f);
		// ull num0_rest = ((mul_res_f >> nres_e1) + 1) >> 1;
		ull num0_rest = (mul_res_f >> nres_e18);
		//printf("p16h = %lld ,mul_res_f = %llx\n", num0_rest,mul_res_f);
		p16h = num0_rest;
	}
	// fl
	{
		// long long nres_e1 = 62 - e2 - (((17 - e10) * 1741647) >> 19);
		// const ull *power_ptr = &powers_ten_reverse[343 - 17];
		// ull pow10_f = power_ptr17[e10];
		ull mul_res_f;
		_mulx_u64(fl, pow10_f17, (ull *)&mul_res_f);
		// ull num0_rest = ((mul_res_f >> nres_e1) + 1) >> 1;
		ull num0_rest = ((mul_res_f >> nres_e18) + 1); // round up
		//printf("p16l = %lld ,mul_res_f = %llx\n", num0_rest,mul_res_f);
		p16l = num0_rest;
	}
	ull num0_rest, high9, low8;
	num0_rest = ((mul_res_f >> (nres_e1)) + 1) >> 1;
	// if( (p15 * 100 >= p16l) & (p15 * 100 <= p16h) )
	if ((p15 * 100ull - p16l) < (p16h - p16l))
	{
		//num0_rest = p15 * 10ull;
		// high9 = num0_rest / int(1e8);
		// low8 = num0_rest % int(1e8);
	}
	else
	{
		// ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;
		// high9 = num0_rest_mul2 / (ull)(2e8); // 1e8 <= high9 < 1e9
		// num0_rest = (num0_rest_mul2) >> 1;
		// low8 = num0_rest - high9 * (ull)(1e8); // 0<= low8 < 1e8

		//num0_rest = ((mul_res_f >> (nres_e1)) + 1) >> 1;
	}

	high9 = num0_rest / int(1e8);
	low8 = num0_rest % int(1e8);

	ll length;
	// ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;
	// high9 = num0_rest_mul2 / (ull)(2e8); // 1e8 <= high9 < 1e9
	__m512i h9_4r = _mm512_castsi256_si512(_mm256_set1_epi64x(high9));
	// num0_rest = (num0_rest_mul2) >> 1;
	// low8 = num0_rest - high9 * (ull)(1e8); // 0<= low8 < 1e8
	length = index + 22;
	__m256i l8_4r = _mm256_set1_epi64x(low8);
	__m512i n8r = _mm512_inserti64x4(h9_4r, l8_4r, 1);
	length += ((e10 >= 100) | (e10 <= -100));

	int ctz = count_tz(high9, low8);
	int out_pos = 18 - ctz - (ctz == 16);

	const ull ONE = 0xFFFFFFFFFFFFFFFFull;
	const ull m8 = 180143986;		//>>> 2**54/1e8
	const ull m6 = 18014398510;		//>>> 2**54/1e6
	const ull m4 = 1801439850949;	//>>> 2**54/1e4
	const ull m2 = 180143985094820; //>>> 2**54/1e2
	// const __m512i m = _mm512_set_epi64(m6, m6, m4, m2, m8, m6, m4, m2);
	const __m512i mr = _mm512_set_epi64(m8, m6, m4, m2, m6, m4, m2, m6);
	const ull L10 = (0x3ffull) << 54;
	const ull M54 = (1ull << 54) - 1;
	const ull M53 = (1ull << 53) - 1;
	const ull M8 = 0xff00;
	// const __m512i mask8 = _mm512_set_epi64(ONE, M54, M54, M54, M54, M54, M54, M54);
	// const __m512i mask8r = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i M54_8 = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i L10_8 = _mm512_set1_epi64(L10);
	// const __m512i M53_8 = _mm512_set1_epi64(M53);
	const __m512i M54_8_all = _mm512_set1_epi64(M54);
	const __m512i M8_8_2 = _mm512_set_epi64(M8, M8, M8, M8, M8, M8, M8, M8);
	// const __m512i M54_8 = _mm512_set1_epi64(M54);
	// const __m512i t1 = _mm512_set_epi64(1, 100, 100, 100, 100, 100, 100, 100);
	// const __m512i t1r = _mm512_set_epi64(100, 100, 100, 100, 100, 100, 100, 1);
	ll t10[8] = {1, 10, 10, 10, 10, 10, 10, 10};
	//__m512i t10r = _mm512_set_epi64(10, 10, 10, 10, 10, 10, 10, 1);
	__m512i t10r = _mm512_loadu_epi64(t10);
	const __m512i T10_8 = _mm512_set1_epi64(10);
	char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[high3]; // result_8[0] , xmm
	//__m512i result_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8, m), mask8), t1), 54);
	//__m512i result_8r = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), mask8r), t1r), 54);
	const __mmask8 mask7 = 0b11111110;
	__m512i tmp_8_0 = _mm512_mullo_epi64(n8r, mr);
	__m512i tmp_8_1 = _mm512_mask_and_epi64(tmp_8_0,
											mask7,
											tmp_8_0,
											M54_8_all);
	//__m512i tmp_8_1 = _mm512_and_epi64(_mm512_mullo_epi64(n8r, mr), M54_8);
	__m512i tmp_8_2 = _mm512_mullo_epi64(tmp_8_1, t10r);
	//__m512i tmp_8_2 = _mm512_mask_mullo_epi64( tmp_8_1, mask7 ,tmp_8_1, T10_8 );
	//__m512i tmp_8_2 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_1, 3) , _mm512_slli_epi64(tmp_8_1, 1));
	// __m512i tmp_8_2 = _mm512_mask_add_epi64( _mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										mask7 ,
	// 										_mm512_mask_slli_epi64(tmp_8_1, mask7,tmp_8_1,3) ,
	// 										_mm512_mask_slli_epi64(tmp_8_1,mask7, tmp_8_1,1));// = tmp_8_1 * 10

	//__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030ll) | tmp_8_1_print;
	//__m512i tmp_8_3 = mul10_1( _mm512_and_epi64( tmp_8_2 , mask8r ));
	__m512i tmp_8_3_t = _mm512_and_epi64(tmp_8_2, M54_8_all);
	//__m512i tmp_8_3 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 3) , _mm512_slli_epi64(tmp_8_3_t, 1));// = tmp_8_3_t * 10 ; 10 = 8 + 2
	__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, t10r); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, T10_8); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	//__m512i tmp_8_3_53 = _mm512_add_epi64(_mm512_slli_epi64(tmp_8_3_t, 2) , tmp_8_3_t); // = tmp_8_3_t * 5
	//__m512i tmp_8_3_53 = tmp_8_3_t * 5; // = tmp_8_3_t * 5
	__m512i tmp_8_1_print = _mm512_srli_epi64(tmp_8_2, 54);
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_andnot_epi64(M54_8_all, tmp_8_3), (54 - 8));
	//__m512i tmp_8_2_print = _mm512_srli_epi64(_mm512_and_epi64(L10_8, tmp_8_3), (54 - 8));
	//__m512i M53_8 = _mm512_srli_epi64(M54_8, 1);
	//__m512i tmp_8_2_print_53 = _mm512_srli_epi64(_mm512_andnot_epi64(M53_8, tmp_8_3_53), (53 - 8));
	__m512i tmp_8_2_print = _mm512_and_epi64(_mm512_srli_epi64(tmp_8_3, (54 - 8)), M8_8_2);
	__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030) | tmp_8_1_print | tmp_8_2_print;
	//__m512i tmp_8_3_print = _mm512_ternarylogic_epi64( _mm512_set1_epi64(0x3030ll), tmp_8_1_print, tmp_8_2_print , 254);// a | b | c
	// tmp_8_3_print |= tmp_8_2_print;
	//__m512i result_8r = (((n8r*mr) & mask8r)*t1r) >> 54;
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	//__m512i num_8_print = 48 * 257 + (result_8 * 256) - ((result_8 * 103) >> 10) * 2559;
	// __m512i num_8_print = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														_mm512_slli_epi64(result_8, 8)),
	// 									   _mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//__m512i num_8_printr = (48 * 257) + (result_8r << 8) - ((result_8r * 103) >> 10) * 2559;
	// result_8r * 6554 >> 16;
	// __m512i num_8_printr = _mm512_sub_epi64(_mm512_add_epi64(_mm512_set1_epi64(48 * 257),
	// 														 _mm512_slli_epi64(result_8r, 8)),
	// 										_mm512_mullo_epi64(_mm512_srli_epi64(_mm512_mullo_epi64(result_8r, _mm512_set1_epi64(103)), 10), _mm512_set1_epi64(2559)));
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
	const __m512i idx = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 2) << (8 * 0)) + ((ll)(1 + 8 * 2) << (8 * 1)) +
			((ll)(0 + 8 * 1) << (8 * 2)) + ((ll)(1 + 8 * 1) << (8 * 3)) +
			((ll)(0 + 8 * 0) << (8 * 4)) + ((ll)(1 + 8 * 0) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)) +
			((ll)(0 + 8 * 3) << (8 * 6)) + ((ll)(1 + 8 * 3) << (8 * 7)));
	const __m512i idxr = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 8 * 6) << (8 * 0)) + ((ll)(1 + 8 * 6) << (8 * 1)) +
			((ll)(0 + 8 * 5) << (8 * 2)) + ((ll)(1 + 8 * 5) << (8 * 3)) +
			((ll)(0 + 8 * 4) << (8 * 4)) + ((ll)(1 + 8 * 4) << (8 * 5)),
		// first value
		((ll)(0 + 8 * 3) << (8 * 0)) + ((ll)(1 + 8 * 3) << (8 * 1)) +
			((ll)(0 + 8 * 2) << (8 * 2)) + ((ll)(1 + 8 * 2) << (8 * 3)) +
			((ll)(0 + 8 * 1) << (8 * 4)) + ((ll)(1 + 8 * 1) << (8 * 5)) +
			((ll)(0 + 8 * 7) << (8 * 6)) + ((ll)(1 + 8 * 7) << (8 * 7)));
	const __m512i idx_epi16 = _mm512_set_epi64(
		// the rest six value not use , set any value
		0, 0, 0, 0, 0, 0,
		// second value
		((ll)(0 + 4 * 2) << (8 * 0)) +
			((ll)(0 + 4 * 1) << (8 * 2)) +
			((ll)(0 + 4 * 0) << (8 * 4)),
		// first value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)) +
			((ll)(0 + 4 * 3) << (8 * 6)));
	ll idxr_epi16_arr[2] = {
		// first value
		((ll)(0 + 4 * 3) << (8 * 0)) +
			((ll)(0 + 4 * 2) << (8 * 2)) +
			((ll)(0 + 4 * 1) << (8 * 4)) +
			((ll)(0 + 4 * 7) << (8 * 6)),
		// second value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)),
	};
	const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_loadu_epi64(idxr_epi16_arr));
	// const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_set_epi64x(
	// 	// second value
	// 	((ll)(0 + 4 * 6) << (8 * 0)) +
	// 		((ll)(0 + 4 * 5) << (8 * 2)) +
	// 		((ll)(0 + 4 * 4) << (8 * 4)),
	// 	// first value
	// 	((ll)(0 + 4 * 3) << (8 * 0)) +
	// 		((ll)(0 + 4 * 2) << (8 * 2)) +
	// 		((ll)(0 + 4 * 1) << (8 * 4)) +
	// 		((ll)(0 + 4 * 7) << (8 * 6))));
	// char *ptr = (char *)&buffer[index];
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	//*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(result_8r, 0), 0)]; // result_8[0] , xmm
#if 0 // cpuid : avx512_vbmi ; some cpu may not suppport
	//__m512i num_8_print_final = _mm512_permutexvar_epi8(idx, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));//1,0 ; low128bit:xmm ; mov xmm to memory

	__m512i num_8_print_finalr = _mm512_permutexvar_epi8(idxr, num_8_printr);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr,0));//1,0 ; low128bit:xmm ; mov xmm to memory
#else // cpuid : avx512_bw
	//__m512i num_8_print_final = _mm512_permutexvar_epi16(idx_epi16, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));

	__m512i num_8_print_finalr = _mm512_permutexvar_epi16(idxr_epi16, tmp_8_3_print);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr, 0)); // 1,0 ; low128bit:xmm ; mov xmm to memory
#endif
	*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	// ll length = index + 22 + ((e10 >= 100) | (e10 <= -100));
	const ll *exp_ptr = &exp_result3[324];
	const char *ptr_18 = (char *)&buffer[18];
	// const char *ptr_18 = (char *)&buffer[out_pos];
	*(ll *)&ptr_18[index] = exp_ptr[e10];
	return length; // write char length
}

typedef unsigned long long ull;
typedef long long ll;
template <int Precision = 16,int debug=0>
inline int my_dou_to_short_test_opt2(double value, char *buffer)
{
	buffer[0] = '-';
	ull value_u64 = (*(ull *)&value);					// 转u64
	ull index = value_u64 >> 63;						// 正负号
	ull value_abs_u64 = value_u64 & ((1ull << 63) - 1); // abs u64
	ll ieee754_exp11 = (value_abs_u64 >> 52);			// 阶码
	if (ieee754_exp11 == 0x7ff) [[unlikely]]
	{
		if (value_abs_u64 > (0x7ffull << 52))
			strcpy(&buffer[index], "nan");
		else
			strcpy(&buffer[index], "inf");
		return index + 3;
	}
	ull f;
	ll e2;
	ull fh, fl;
	ll e2h, e2l;
	if (ieee754_exp11 != 0)
	{
		f = (value_u64 << 11) | ((1ull) << 63);
		fh = f + (1023);
		fl = f - (1023);
		e2 = ieee754_exp11 - 1023ll;
		// e2h = e2;
		// e2l = e2 - ((value_u64<<12) == 0);
	}
	else
	{
		if (value_abs_u64 == 0)
		{
			buffer[index] = '0';
			return index + 1;
		}
		ull clz = _lzcnt_u64(value_abs_u64);
		f = (value_abs_u64) << clz;
		e2 = -1011 - clz;
	}
	ll e10_tmp = ((e2 * 78913) >> 18);
	const ull *_10en_ptr = (ull *)&_10en[1 + 324];
	ll e10 = e10_tmp + (value_abs_u64 >= _10en_ptr[e10_tmp]); // _10en_ptr[e10_tmp] = pow(10, e10_tmp)
	const ull *power_ptr = &powers_ten_reverse[343 - Precision];
	ull pow10_f = power_ptr[e10];
	long long nres_e = 62 - e2 - (((Precision - e10) * 1741647) >> 19);
	long long nres_e1 = 61 - e2 - (((Precision - e10) * 1741647) >> 19);
	// = -(e2-63 + floor((16-e10)*log2(10))-63 + 64) - 1
	ull mul_res_f; 
	ull num0_rest;
	int high9, low8;
	ull low64 = _mulx_u64(f, pow10_f, (ull *)&mul_res_f);
	unsigned long long adjust = ((mul_res_f + (5 << nres_e))>>nres_e)/10;//[1e15,1e16)
	unsigned long long last_digit = (mul_res_f >> nres_e)%10;
	ull mask_e = (1<<nres_e) - 1;
	ull tmp_diff = 2048;
	if( last_digit<=4 ){
		//printf("last=%d adjust=%lld\n",last_digit,adjust);
		tmp_diff = mul_res_f - ((adjust*10)<<nres_e);
		//printf("tmp=%lld\n",tmp_diff);
	}else{
		//printf("last=%d adjust=%lld\n",last_digit,adjust);
		//tmp_diff = ((adjust*10)<<nres_e) - mul_res_f;
		//printf("tmp=%lld\n",tmp);
	}
	
	

	// num0_rest = ((mul_res_f >> (nres_e1)) + 1) >> 1;
	ull p15, p16h, p16l;
	long long nres_e18 = 62 - e2 - (((17 - e10) * 1741647) >> 19); // [3,7]
	// const ull *power_ptr17 = &powers_ten_reverse[343 - 17];
	// ull pow10_f17 = power_ptr17[e10];
	ull pow10_f17 = power_ptr[e10 - 1];
	// Precision = 15
	//{
	long long nres_e15 = 61 - e2 - (((15 - e10) * 1741647) >> 19);
	// long long nres_e15 = 61 - e2 - ( (((16 - e10) * 1741647)-1741647) >> 19);
	// const ull *power_ptr = &powers_ten_reverse[343 - 15];
	ull pow10_f15 = power_ptr[e10 + 1]; // 15
	ull mul_res_f15;
	_mulx_u64(f, pow10_f15, (ull *)&mul_res_f15);
	// pow10_f = power_ptr[e10 + 1];
	//_mulx_u64(f, pow10_f, (ull *)&mul_res_f15);
	p15 = ((mul_res_f15 >> nres_e15) + 1ull) >> 1; // round
	// printf("p15 = %lld\n", p15);
	//}
	// fh
	//{
	ull mul_res_fh;
	_mulx_u64(fh, pow10_f17, (ull *)&p16h);
	// pow10_f = power_ptr[e10-1];
	//_mulx_u64(fh, pow10_f, (ull *)&mul_res_fh);
	p16h = (p16h >> nres_e18); // round down
	// printf("p16h = %lld ,mul_res_f = %llx\n", p16h,mul_res_f);
	//}
	// fl
	//{
	ull mul_res_fl;
	_mulx_u64(fl, pow10_f17, (ull *)&p16l);
	//_mulx_u64(fl, pow10_f, (ull *)&mul_res_fl);
	p16l = ((p16l >> nres_e18) + 1); // round up
	// printf("p16l = %lld ,mul_res_f = %llx\n", p16l,mul_res_f);
	//}
	// printf("nres_e18=%d\n",nres_e18);
	// if( (p15 * 100ull >= p16l) & (p15 * 100ull <= p16h) )
	// if( (p15 * 100ull >= p16l) )
	// printf("( p16h - p16l) = %d , %d\n",( p16h - p16l)<<nres_e18,pow10_f17 >> (53 ));
	// if( (p15 * 100ull - p16l) <= ( p16h - p16l) )// pow10_f17 >> (52+nres_e18)
	// //if( (p15 * 100ull - p16l) <=  (pow10_f17 >> (53 + nres_e18)) - 2 )
	// {
	// 	num0_rest = p15 * 10ull;
	// }
	// else
	{
		num0_rest = ((mul_res_f >> (nres_e1)) + 1) >> 1;
	}
	// | F*2 - D*10**(e10-15)*2**(53-e2)| < 1
	// return num0_rest;
	ull D = ((   (mul_res_f >> (nres_e1+1)) + 5) / 10);
	ull D1 = D + 1;
	//max(D) <= 1e16; 53.15bit,54bit
	//int Dlz = _lzcnt_u64(D);
	int Dlz = 10;
	//printf("D = %llu , Dlz = %d ",D , Dlz);
	ull F2 = f >> 10;
	ull F3 = f >> 4;
	ull pow10_e10_15 = power_ptr[-e10 + 31];
	ull res ;
	ull res1;
	ull res_low = (D << Dlz) * pow10_e10_15;
	_mulx_u64(D << Dlz , pow10_e10_15, &res);
	_mulx_u64(D1 << Dlz , pow10_e10_15, &res1);
	//ull cmp = res >> (); 
	ll pow10_e10_15_e2 = -((( (e10 - 15) * 1741647 ) >> 19 ) - 63 + (53 - e2) + 64) + Dlz; 
	ll pow10_e10_15_e2_3 = -((( (e10 - 15) * 1741647 ) >> 19 ) - 63 + (53 + 6 - e2) + 64) + Dlz; 
	//printf("res = %llu , pow10_e10_15_e2 = %d \n",res, pow10_e10_15_e2);
	ull res2 = res >> pow10_e10_15_e2;
	ull res3 = res >> pow10_e10_15_e2_3;
	//printf("res3 = %llu\n",res3);
	//printf("F3 = %llu\n",F3);
	//if((res2 == F2) | ( (res2 + 1) == F2))
	//if( (F2 - res2) <= 1)
	const int N6 = 1<<6;
	if( ((F3 - N6 + 1) < res3) & (res3 < (F3 + N6 - 1)) )//how to opt; 0.002563% not correct
	//if( (F3 - res3) <= (1<<4) )
	{
		//printf("true\n");
		num0_rest = D * 10;
	}
	// abs(F2 - D * 10**(e10-15)*2**53-e2 ) < 1
	//printf("res = %llx res_low=%llx\n",res,res_low);
	if(0)
	{
		printf("res = %llx res_low=%llx e3=%d\n",res,res_low,pow10_e10_15_e2_3);
		// printf("res2 = %llu\n",res2);
		// printf("F2 = %llu\n",F2);
		printf("res3 = %llu\n",res3);
		printf("F3 = %llu\n",F3);
	}

	// if(tmp_diff<=1024){
	// 	//num0_rest = adjust*10;
	// }

	high9 = num0_rest / int(1e8);
	low8 = num0_rest % int(1e8);
	// return high9 + low8;

	ll length;
	// ull num0_rest_mul2 = (mul_res_f >> (nres_e1)) + 1;
	// high9 = num0_rest_mul2 / (ull)(2e8); // 1e8 <= high9 < 1e9
	__m512i h9_4r = _mm512_castsi256_si512(_mm256_set1_epi64x(high9));
	// num0_rest = (num0_rest_mul2) >> 1;
	// low8 = num0_rest - high9 * (ull)(1e8); // 0<= low8 < 1e8
	length = index + 22;
	__m256i l8_4r = _mm256_set1_epi64x(low8);
	__m512i n8r = _mm512_inserti64x4(h9_4r, l8_4r, 1);
	length += ((e10 >= 100) | (e10 <= -100));
	int ctz = count_tz(high9, low8); //
	int out_pos = 18 - ctz - (ctz == 16);
	const ull ONE = 0xFFFFFFFFFFFFFFFFull;
	const ull m8 = 180143986;		//>>> 2**54/1e8
	const ull m6 = 18014398510;		//>>> 2**54/1e6
	const ull m4 = 1801439850949;	//>>> 2**54/1e4
	const ull m2 = 180143985094820; //>>> 2**54/1e2
	const __m512i mr = _mm512_set_epi64(m8, m6, m4, m2, m6, m4, m2, m6);
	const ull L10 = (0x3ffull) << 54;
	const ull M54 = (1ull << 54) - 1;
	const ull M53 = (1ull << 53) - 1;
	const ull M8 = 0xff00;
	const __m512i M54_8 = _mm512_set_epi64(M54, M54, M54, M54, M54, M54, M54, ONE);
	const __m512i L10_8 = _mm512_set1_epi64(L10);
	const __m512i M54_8_all = _mm512_set1_epi64(M54);
	const __m512i M8_8_2 = _mm512_set_epi64(M8, M8, M8, M8, M8, M8, M8, M8);
	ll t10[8] = {1, 10, 10, 10, 10, 10, 10, 10};
	__m512i t10r = _mm512_loadu_epi64(t10);
	const __m512i T10_8 = _mm512_set1_epi64(10);
	char *ptr = (char *)&buffer[index];
	const __mmask8 mask7 = 0b11111110;
	__m512i tmp_8_0 = _mm512_mullo_epi64(n8r, mr);
	__m512i tmp_8_1 = _mm512_mask_and_epi64(tmp_8_0,
											mask7,
											tmp_8_0,
											M54_8_all);
	__m512i tmp_8_2 = _mm512_mullo_epi64(tmp_8_1, t10r);
	__m512i tmp_8_3_t = _mm512_and_epi64(tmp_8_2, M54_8_all);
	__m512i tmp_8_3 = _mm512_mullo_epi64(tmp_8_3_t, t10r); // = tmp_8_3_t * 10 ; 10 = 8 + 2
	__m512i tmp_8_1_print = _mm512_srli_epi64(tmp_8_2, 54);
	__m512i tmp_8_2_print = _mm512_and_epi64(_mm512_srli_epi64(tmp_8_3, (54 - 8)), M8_8_2);
	__m512i tmp_8_3_print = _mm512_set1_epi64(0x3030) | tmp_8_1_print | tmp_8_2_print;
	ll idxr_epi16_arr[2] = {
		// first value
		((ll)(0 + 4 * 3) << (8 * 0)) +
			((ll)(0 + 4 * 2) << (8 * 2)) +
			((ll)(0 + 4 * 1) << (8 * 4)) +
			((ll)(0 + 4 * 7) << (8 * 6)),
		// second value
		((ll)(0 + 4 * 6) << (8 * 0)) +
			((ll)(0 + 4 * 5) << (8 * 2)) +
			((ll)(0 + 4 * 4) << (8 * 4)),
	};
	const __m512i idxr_epi16 = _mm512_castsi128_si512(_mm_loadu_epi64(idxr_epi16_arr));
#if 0 // cpuid : avx512_vbmi ; some cpu may not suppport
	__m512i num_8_print_finalr = _mm512_permutexvar_epi8(idxr, num_8_printr);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr,0));//1,0 ; low128bit:xmm ; mov xmm to memory
#else // cpuid : avx512_bw
	//__m512i num_8_print_final = _mm512_permutexvar_epi16(idx_epi16, num_8_print);
	//_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_final,0));
	__m512i num_8_print_finalr = _mm512_permutexvar_epi16(idxr_epi16, tmp_8_3_print);
	_mm_storeu_si128((__m128i *)(ptr + 4), _mm512_extracti32x4_epi32(num_8_print_finalr, 0)); // 1,0 ; low128bit:xmm ; mov xmm to memory
#endif
	*(int *)ptr = digit_000_999[_mm_extract_epi64(_mm512_extracti32x4_epi32(tmp_8_1_print, 0), 0)]; // result_8[0] , xmm
	const ll *exp_ptr = &exp_result3[324];
	//const char *ptr_18 = (char *)&buffer[18];
	const char *ptr_18 = (char *)&buffer[out_pos];
	*(ll *)&ptr_18[index] = exp_ptr[e10];
	return length; // write char length
}

#if 0
template <int t = 0, int Precision = 16, int All_double = 32, int Num_per_row = 3, int is_init = 0>
__attribute__((always_inline)) int my_dou_to_sci_avx512_pure2_opt(const double *value, char *buffer_s)
{
	static unsigned long long call_num = 0; // 调用次数
	if (is_init)
	{
		call_num = 0;
		return 0;
	}
	static int is_first = 1;
	const double Row_per_num = 1.0 / (double)Num_per_row;
	const int group = 8;						// avx512 = 8 double
	const int group_count = All_double / group; // 4=32/8
	__m512i index_8[group_count];
	__m512i index_mod_Num_per_row[group_count];
	const __m512i index_base = _mm512_set_epi64(8, 7, 6, 5, 4, 3, 2, 1);
	const int arr_size = All_double + Num_per_row - 1; // 32 + 3 - 1 =34;
	static long long is_end[arr_size];
	if (is_first)
	{ // only run once
		is_first = 0;
		for (int i = 0; i < arr_size; ++i)
		{
			is_end[i] = ((long long)((((i + 1) % Num_per_row) == 0) ? '\n' : ' ')) << 56;
		}
	}
	// int start_is_end = ((call_num * All_double) % Num_per_row + Num_per_row -1) % Num_per_row;
	int start_is_end = (call_num * All_double) % Num_per_row;
	;

	for (int i = 0; i < group_count; ++i)
	{
		index_8[i] = _mm512_add_epi64(index_base, _mm512_set1_epi64(call_num * All_double + i * group));
		const int is_exp2 = (Num_per_row & (Num_per_row - 1)) == 0;
		if (is_exp2)
		{
			index_mod_Num_per_row[i] = _mm512_and_epi64(index_8[i], _mm512_set1_epi64(Num_per_row - 1));
		}
		else
		{
			index_mod_Num_per_row[i] = _mm512_sub_epi64(index_8[i], _mm512_mullo_epi64(_mm512_cvttpd_epi64(_mm512_cvtepi64_pd(index_8[i]) * Row_per_num), _mm512_set1_epi64(Num_per_row)));
		}
	}
	call_num++;
	__m512d value_abs_d8[group_count];
	__m512i value_i8[group_count];
	__m512i value_abs_i8[group_count];
	__m512i ieee754_exp11_8[group_count];
	__m512i value_f_8[group_count];
	__m512i value_e_8[group_count];
	__m512i value_e2_8[group_count];
	__m512i value_e10_8[group_count];
	__m512i value_e10_abs_8[group_count];
	__m512i value_e10_pos_8[group_count];
	int64_t e10[All_double];
	int64_t e10_abs_32[All_double];
	int64_t e10_pos_32[All_double];
	__m512i every_length_8[group_count];
	__m512i len_sum_8[group_count];
	int64_t every_length[All_double];
	long long every_start_pos[All_double + 1]; // 第一个值为0
	int every_start_pos_int[All_double + 1];   // 第一个值为0
	every_start_pos[0] = 0;
	every_start_pos_int[0] = 0;
	char presum[8];
	__mmask8 cmp3[group_count], cmp6[group_count], cmp7[group_count], cmp8[group_count], cmp9[group_count];
	long long every_start_pos2[All_double + 1];
	long long every_start_pos3[All_double + 1];
	__m512i every_start_pos2_8[group_count];
	__m512i every_start_pos3_8[group_count];
	__m512i e10_temp[group_count];
	__m512i length_tmp2[group_count];
	__m512i length_tmp_32_12, length_tmp_32_34;
	const double E100 = 1e100;
	const double EN99 = 1e-99;
	const long long E100_i = *(long long *)&E100;
	const long long EN99_i = *(long long *)&EN99;
	const __m512i length_tmp = _mm512_set1_epi64(2 + (Precision > 0) + 1 + 1 + Precision + 2);	  // 23
	const __m512i length_tmp_32 = _mm512_set1_epi32(2 + (Precision > 0) + 1 + 1 + Precision + 2); // 23

	//__m512i value_i8[group_count];
	//__m512i ieee754_exp11_8[group_count];
	__m512i ieee754_exp11_8_01, ieee754_exp11_8_23;
	__mmask8 cmp_result_8[group_count];		// uchar
	__mmask16 cmp_result_01, cmp_result_23; // ushort
	__m512i tmp[group_count], tmp_01, tmp_23;
	__m512i clz_8[group_count];
	__m512i clz_8_01, clz_8_23;

	FORI value_i8[i] = _mm512_loadu_epi64(&value[i * group]);
	// FORI value_i8[i] = _mm512_stream_load_si512(&value[i * group]); // 以int64方式存储
	FORI value_abs_d8[i] = _mm512_castsi512_pd(_mm512_and_epi64(value_i8[i], _mm512_set1_epi64(((1ull << 63) - 1))));
	FORI value_abs_i8[i] = _mm512_castpd_si512(value_abs_d8[i]); // 绝对值,int64

	// FORI length_tmp2[i] = _mm512_add_epi64(length_tmp , _mm512_srli_epi64(value_i8[i] , 63));
	// FORI cmp7[i] = _mm512_cmpge_epi64_mask(value_abs_i8[i],_mm512_set1_epi64(E100_i));//>= 1e100
	// FORI cmp8[i] = _mm512_cmplt_epi64_mask(value_abs_i8[i],_mm512_set1_epi64(EN99_i));//< 1e-99
	// FORI every_length_8[i] = _mm512_mask_add_epi64(length_tmp2[i], cmp7[i] | cmp8[i], length_tmp2[i], _mm512_set1_epi64(1));
	// FORI len_sum_8[i] = PrefixSumEpi64(every_length_8[i]);
	// FORI {
	// 	if (i > 0)
	// 	{
	// 		//len_sum_8[i] += len_sum_8[i - 1][7];
	// 		len_sum_8[i] += every_start_pos[ (i-1)*group + 1 + 7];
	// 		//len_sum_8[i] += _mm_extract_epi64(_mm512_extracti64x2_epi64(len_sum_8[i - 1],3),1);
	// 	}
	// 	_mm512_storeu_epi64(&every_start_pos[i * group + 1], len_sum_8[i]);
	// }
	// FORI FORJ every_start_pos[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);

	FORI ieee754_exp11_8[i] = _mm512_srli_epi64(_mm512_castpd_si512(value_abs_d8[i]), 52);
	FORI clz_8[i] = _mm512_max_epi64(_mm512_lzcnt_epi64(_mm512_castpd_si512(value_abs_d8[i])), _mm512_set1_epi64(11));
	FORI cmp_result_8[i] = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1));
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), cmp_result_8[i],
											 _mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
	FORI tmp[i] = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8[i]), _mm512_set1_epi64(1 - 1023 + 11)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	FORI value_e2_8[i] = _mm512_mask_sub_epi64(tmp[i], cmp_result_8[i], tmp[i], _mm512_set1_epi64(1));

	// for (int i = 0; i < group_count; ++i)
	// {
	// 	value_i8[i] = _mm512_loadu_epi64(&value[i * group]); // 以int64方式存储
	// 	//value_i8[i] = _mm512_stream_load_si512(&value[i * group]); // 以int64方式存储
	// 	value_abs_d8[i] = __m512d(_mm512_and_epi64(value_i8[i], _mm512_set1_epi64(((1ull << 63) - 1))));
	// 	value_abs_i8[i] = __m512i(value_abs_d8[i]);					 // 绝对值,int64
	// 	ieee754_exp11_8[i] = _mm512_srli_epi64(value_abs_i8[i], 52); // 右移52获取指数
	// 	__m512i clz_8 = _mm512_lzcnt_epi64(value_abs_i8[i]);		 // 计算前缀0的个数
	// 	clz_8 = _mm512_max_epi64(clz_8, _mm512_set1_epi64(11));		 // 与11对比取大
	// 	__mmask8 cmp_result = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1)); //exp != 0
	// 	value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(value_abs_i8[i], clz_8), cmp_result,
	// 										_mm512_sllv_epi64(value_abs_i8[i], clz_8), _mm512_set1_epi64(1ull << 63));
	// 	__m512i tmp = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8), _mm512_set1_epi64(1 - 1023 + 11)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	// 	value_e2_8[i] = _mm512_mask_sub_epi64(tmp, cmp_result,
	// 										  tmp, _mm512_set1_epi64(1));
	// }

	// __m512i e10_temp[group_count];
	// __m512d pow10_e10_temp_p[group_count];
	// __mmask8 cmp1[group_count], cmp3[group_count] ,cmp6[group_count];
	// const __m512i length_tmp = _mm512_set1_epi64(2 + (Precision > 0) + 1 + 1 + Precision + 2); // 23
	// __m512i length_tmp2[group_count] ;

	// FORI e10_temp[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18);
	// FORI pow10_e10_temp_p[i] = _mm512_i64gather_pd(_mm512_add_epi64(e10_temp[i], _mm512_set1_epi64(1 + 324)), _10en, sizeof(double));
	// FORI cmp1[i] = _mm512_cmple_pd_mask(pow10_e10_temp_p[i], value_abs_d8[i]);
	// FORI value_e10_8[i] = _mm512_mask_add_epi64(e10_temp[i], cmp1[i], e10_temp[i], _mm512_set1_epi64(1));
	// //__mmask8 cmp2 = _mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(2));
	// //value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp2, value_e10_8[i], _mm512_set1_epi64(1));
	// FORI value_e10_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0));
	// FORI _mm512_storeu_epi64(&e10[i * group], value_e10_8[i]);
	// FORI cmp3[i] = _mm512_cmplt_pd_mask(__m512d(value_i8[i]), _mm512_set1_pd(0.0));		   // 1:+1
	// FORI length_tmp2[i] = _mm512_mask_add_epi64(length_tmp, cmp3[i], length_tmp, _mm512_set1_epi64(1));
	// FORI cmp6[i] = _mm512_cmpge_epi64_mask(_mm512_abs_epi64(value_e10_8[i]), _mm512_set1_epi64(100));
	// FORI every_length_8[i] = _mm512_mask_add_epi64(length_tmp2[i], cmp6[i], length_tmp2[i], _mm512_set1_epi64(1));
	// FORI _mm512_storeu_epi64(&every_length[i * group], every_length_8[i]);
	// unsigned long long presum=0;

	FORI length_tmp2[i] = _mm512_add_epi64(length_tmp, _mm512_srli_epi64(value_i8[i], 63));
	FORI cmp7[i] = _mm512_cmpge_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(E100_i)); //>= 1e100
	FORI cmp8[i] = _mm512_cmplt_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(EN99_i)); //< 1e-99
	FORI cmp6[i] = _mm512_cmpge_epu64_mask(value_i8[i], _mm512_set1_epi64(1ull << 63));
	// unsigned short cmp6_12 = (unsigned short)cmp6[0] | (((unsigned short)cmp6[1])<<8);
	// unsigned short cmp6_34 = (unsigned short)cmp6[2] | (((unsigned short)cmp6[3])<<8);
	// length_tmp_32_12 = _mm512_mask_add_epi32(length_tmp_32, cmp6_12,length_tmp_32, _mm512_set1_epi32(1));
	// length_tmp_32_34 = _mm512_mask_add_epi32(length_tmp_32, cmp6_34,length_tmp_32, _mm512_set1_epi32(1));

	// FORI cmp9[i] = cmp7[i] | cmp8[i];
	// length_tmp_32_12 = _mm512_mask_add_epi32(length_tmp_32_12, (unsigned short)cmp9[0] | (((unsigned short)cmp9[1])<<8) , length_tmp_32_12,_mm512_set1_epi32(1));
	// length_tmp_32_34 = _mm512_mask_add_epi32(length_tmp_32_34, (unsigned short)cmp9[2] | (((unsigned short)cmp9[3])<<8), length_tmp_32_34,_mm512_set1_epi32(1));
	// const __m512i ZERO_32 = _mm512_set1_epi32(0);
	// __m512i lensum_12 = PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_12,ZERO_32,16-1));
	// lensum_12 = _mm512_mask_add_epi32(lensum_12, cmp6_12,lensum_12, _mm512_set1_epi32(1));
	// __m512i lensum_34 = _mm512_add_epi32( PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_34,length_tmp_32_12,16-1)) ,
	// 					 _mm512_set1_epi32(
	// 						_mm_extract_epi32(_mm512_extracti32x4_epi32(PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_12,ZERO_32,16-1)),3),3)
	// 						) );
	// lensum_34 = _mm512_mask_add_epi32(lensum_34, cmp6_34,lensum_34, _mm512_set1_epi32(1));
	// _mm512_storeu_epi32(every_start_pos_int,lensum_12);
	// _mm512_storeu_epi32(every_start_pos_int+16,lensum_34);
	// _mm512_storeu_epi32(every_start_pos_int,
	// 				    PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_12,ZERO_32,16-1)));

	// _mm512_storeu_epi32(every_start_pos_int+16,
	// 	_mm512_add_epi32( PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_34,length_tmp_32_12,16-1)) ,
	// 					 _mm512_set1_epi32(
	// 						//every_start_pos_int[15]
	// 						_mm_extract_epi32(_mm512_extracti32x4_epi32(PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_12,ZERO_32,16-1)),3),3)
	// 						) ));
	//_mm_extract_epi32(_mm512_extracti32x4_epi32(PrefixSumEpi32(_mm512_alignr_epi32(length_tmp_32_12,ZERO_32,16-1)),3),3);

	// __m512i len_sum_12 = PrefixSumEpi32(length_tmp_32_12);
	// _mm512_storeu_epi32( &every_start_pos_int[0 * group + 1],len_sum_12);
	// __m512i len_sum_34 = PrefixSumEpi32(length_tmp_32_34);
	// len_sum_34 = _mm512_add_epi32(len_sum_34, _mm512_set1_epi32( every_start_pos_int[0*group + 1 + 15]));
	// _mm512_storeu_epi32( &every_start_pos_int[2 * group + 1],len_sum_34);

	FORI every_length_8[i] = _mm512_mask_add_epi64(length_tmp2[i], cmp7[i] | cmp8[i], length_tmp2[i], _mm512_set1_epi64(1));
	FORI len_sum_8[i] = PrefixSumEpi64(every_length_8[i]);
	FORI
	{
		if (i > 0)
		{
			// len_sum_8[i] += len_sum_8[i - 1][7];
			// len_sum_8[i] += every_start_pos[ (i-1)*group + 1 + 7];
			len_sum_8[i] += _mm_extract_epi64(_mm512_extracti64x2_epi64(len_sum_8[i - 1], 3), 1);
		}
		_mm512_storeu_epi64(&every_start_pos[i * group + 1], len_sum_8[i]);
	}
	FORI FORJ every_start_pos[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);

	// FORI FORJ printf("every_start_pos[%d][%d] = %d,%d \n",i,j,every_start_pos[i*group+j],every_start_pos_int[i*group+j]);
	for (int i = 0; i < group_count; ++i)
	{
		//__m512i e10_temp = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18);
		//__m512d pow10_e10_temp_p = _mm512_i64gather_pd(_mm512_add_epi64(e10_temp, _mm512_set1_epi64(1 + 324)), _10en, sizeof(double));
		//__mmask8 cmp1 = _mm512_cmple_pd_mask(pow10_e10_temp_p, value_abs_d8[i]);
		// value_e10_8[i] = _mm512_mask_add_epi64(e10_temp, cmp1, e10_temp, _mm512_set1_epi64(1));
		// value_e10_8[i] = _mm512_add_epi64(e10_temp,_mm512_set1_epi64(1));

		//__mmask8 cmp2 = _mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(2));
		// value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp2, value_e10_8[i], _mm512_set1_epi64(1));
		// value_e10_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0));
		// _mm512_storeu_epi64(&e10[i * group], value_e10_8[i]);

		// cmp3[i] = _mm512_cmplt_pd_mask(__m512d(value_i8[i]), _mm512_set1_pd(0.0));				   // 1:+1

		//__m512i length_tmp2 = _mm512_mask_add_epi64(length_tmp, cmp3[i], length_tmp, _mm512_set1_epi64(1));
		//__m512i length_tmp2 = _mm512_add_epi64(length_tmp , _mm512_srli_epi64(value_i8[i] , 63));
		// cmp6[i] = _mm512_cmpge_epi64_mask(_mm512_abs_epi64(value_e10_8[i]), _mm512_set1_epi64(100));
		// every_length_8[i] = _mm512_mask_add_epi64(length_tmp2, cmp6[i], length_tmp2, _mm512_set1_epi64(1));

		// cmp7[i] = _mm512_cmpge_epi64_mask(value_abs_i8[i],_mm512_set1_epi64(E100_i));//>= 1e100
		// cmp8[i] = _mm512_cmplt_epi64_mask(value_abs_i8[i],_mm512_set1_epi64(EN99_i));//< 1e-99
		// every_length_8[i] = _mm512_mask_add_epi64(length_tmp2, cmp7[i] | cmp8[i], length_tmp2, _mm512_set1_epi64(1));
		// len_sum_8[i] = PrefixSumEpi64(every_length_8[i]);
		// if (i > 0)
		// {
		// 	//len_sum_8[i] += len_sum_8[i - 1][7];
		// 	len_sum_8[i] += every_start_pos[ (i-1)*group + 8];
		// }
		// _mm512_storeu_epi64(&every_start_pos[i * group + 1], len_sum_8[i]);

		// __m512i eve_start = _mm512_loadu_epi64(&every_start_pos[i * group ]);
		// every_start_pos2_8[i] = _mm512_mask_add_epi64(eve_start, cmp3[i], eve_start, _mm512_set1_epi64(1));
		// every_start_pos3_8[i] = _mm512_mask_add_epi64( (every_start_pos2_8[i]+15) , cmp6[i], (every_start_pos2_8[i]+15), _mm512_set1_epi64(1));

		// _mm512_storeu_epi64(&every_start_pos2[i * group ], every_start_pos2_8[i]);
		// _mm512_storeu_epi64(&every_start_pos3[i * group ], every_start_pos3_8[i]);
		//_mm512_storeu_epi64(&every_length[i * group], every_length_8[i]);
	}

	buffer_s[0] = '-';
	for (int i = 0; i < group_count; ++i) // 4
	{
		for (int j = 0; j < group; ++j) // 8
		{
			// every_start_pos[i * group + j + 1] = every_start_pos[i * group + j] + every_length[i * group + j]; // 计算前缀和
			// buffer_s[every_start_pos[i * group + j]] = '-';
		}
	}
	FORI FORJ
	{
		// every_start_pos_int[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);
		// every_start_pos[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);
		// every_start_pos2[i * group + j] = every_start_pos[i * group + j] + 15 + (abs(e10[i * group + j]) >= 100);
		//*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));
	}
	// FORI FORJ *(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));
	// getcycle();

	// __m512i num0_rest_8[group_count],num0_rest_8_1[group_count];
	// __m512i high9_8[group_count];
	// __m512i low8_8[group_count];
	// __m512i nres_e_8[group_count];
	// __mmask8 cmp_le_E16_8[group_count];
	__m512i nres_e_8[group_count];
	__m512i high9_8[group_count], low8_8[group_count];
	__m512i pow10_f_8[group_count];
	__m512i a[group_count], b[group_count], c[group_count], d[group_count];
	__m512i ac[group_count], ad[group_count], bc[group_count];
	__m512i res_f_8[group_count], num0_rest_8[group_count], num0_rest_8_1[group_count];
	FORI e10_temp[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18);
	FORI value_e10_8[i] = _mm512_add_epi64(e10_temp[i], _mm512_set1_epi64(1));
	FORI pow10_f_8[i] = _mm512_i64gather_epi64(value_e10_8[i], &powers_ten_reverse[343 - Precision], sizeof(unsigned long long));
	// FORI FORJ buffer[i * group + j][0] = '-';
	FORI nres_e_8[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
										_mm512_srai_epi64(_mm512_mullo_epi64(
															  _mm512_sub_epi64(_mm512_set1_epi64(Precision),
																			   value_e10_8[i]),
															  _mm512_set1_epi64(1741647)),
														  19)); // -(e2-63 + ((16-e10)*1741647>>19)-63 + 64) = 62 - e2 - ((16-e10)*1741647>>19) , (num*1741647)>>19 = floor(num * log2(10))
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64((value_abs_i8[i]), clz_8[i]), cmp_result_8[i],
											 _mm512_sllv_epi64((value_abs_i8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
	const __m512i M32 = _mm512_set1_epi64(0xFFFFFFFFull);
	FORI a[i] = _mm512_srli_epi64(value_f_8[i], 32);
	FORI c[i] = _mm512_srli_epi64(pow10_f_8[i], 32);
	FORI b[i] = _mm512_and_epi64(value_f_8[i], M32);
	FORI d[i] = _mm512_and_epi64(pow10_f_8[i], M32);
	FORI ac[i] = _mm512_mul_epu32(a[i], c[i]);
	FORI ad[i] = _mm512_mul_epu32(a[i], d[i]);
	FORI bc[i] = _mm512_mul_epu32(b[i], c[i]);
	FORI res_f_8[i] = _mm512_add_epi64(ac[i], _mm512_add_epi64(_mm512_srli_epi64(ad[i], 32),
															   _mm512_srli_epi64(bc[i], 32)));														   // ac+ (ad>>32) + (bc>>32) ;
	FORI num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f_8[i], _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e_8[i])), nres_e_8[i]); // round
	// FORI num0_rest_8_1[i] = mul10_1(_mm512_srlv_epi64(res_f[i], nres_e[i])) +
	// 					    _mm512_srlv_epi64 (( _mm512_and_epi64( res_f[i] , (1ull << nres_e[i] ) - 1  ) * 10) , nres_e[i]);
	// FORI num0_rest_8_1[i] = _mm512_srlv_epi64( _mm512_srri_epi64(num0_rest_8[i],4) * 10 , nres_e[i] - 4);
	// FORI num0_rest_8_1[i] = mul10_2(_mm512_srlv_epi64(res_f[i], nres_e[i])) +
	// 						_mm512_srlv_epi64((mul10(_mm512_and_epi64(res_f[i],
	// 																  _mm512_sub_epi64(_mm512_sllv_epi64(_mm512_set1_epi64(1), nres_e[i]), _mm512_set1_epi64(1))))),
	// 										  nres_e[i]);
	// FORI num0_rest_8_1[i] = mul10_2(_mm512_srlv_epi64(res_f[i], nres_e[i])) +
	// 						_mm512_srlv_epi64((mul10(_mm512_and_epi64(res_f[i],
	// 																  _mm512_sub_epi64(_mm512_sllv_epi64(_mm512_set1_epi64(1), nres_e[i]), _mm512_set1_epi64(1))))),
	// 										  nres_e[i]);
	// FORI num0_rest_8_1[i] =	_mm512_sllv_epi64(mul10(_mm512_srli_epi64(res_f[i],32))  , 32-nres_e[i]) + _mm512_srlv_epi64( mul10( _mm512_and_epi64( res_f[i], M32)) ,  nres_e[i]);
	// FORI num0_rest_8_1[i] =	_mm512_srlv_epi64( mul10( _mm512_srli_epi64(res_f[i],4))  , ( nres_e[i]-4));
	FORI num0_rest_8_1[i] = _mm512_srlv_epi64(_mm512_srli_epi64(res_f_8[i], 1) + _mm512_srli_epi64(res_f_8[i], 3), _mm512_sub_epi64(nres_e_8[i], _mm512_set1_epi64(4)));
	__mmask8 cmp_le_E16_8[group_count];
	FORI cmp_le_E16_8[i] = _mm512_cmplt_epi64_mask(num0_rest_8[i], _mm512_set1_epi64((unsigned long long)1e16));
	FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp_le_E16_8[i], value_e10_8[i], _mm512_set1_epi64(1));
	FORI num0_rest_8[i] = _mm512_mask_blend_epi64(cmp_le_E16_8[i], num0_rest_8[i], num0_rest_8_1[i]);
	// FORI value_e10_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0));

	// FORI length_tmp2[i] = _mm512_add_epi64(length_tmp , _mm512_srli_epi64(value_i8[i] , 63));
	// FORI cmp6[i] = _mm512_cmpge_epi64_mask(_mm512_abs_epi64(value_e10_8[i]), _mm512_set1_epi64(100));
	// FORI every_length_8[i] = _mm512_mask_add_epi64(length_tmp2[i], cmp6[i], length_tmp2[i], _mm512_set1_epi64(1));
	// FORI len_sum_8[i] = PrefixSumEpi64(every_length_8[i]);
	// FORI {
	// 	if (i > 0)
	// 	{
	// 		//len_sum_8[i] += len_sum_8[i - 1][7];
	// 		//len_sum_8[i] += every_start_pos[ (i-1)*group + 1 + 7];
	// 		len_sum_8[i] += _mm_extract_epi64(_mm512_extracti64x2_epi64(len_sum_8[i - 1],3),1);
	// 	}
	// 	_mm512_storeu_epi64(&every_start_pos[i * group + 1], len_sum_8[i]);
	// }

	// FORI FORJ printf("num17 %d %d  = %lld\n",i,j,num0_rest_8[i][j]);
	// FORI _mm512_storeu_epi64(&e10[i * group], value_e10_8[i]);
	FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),   // round down
														_mm512_set1_pd(_10en[-Precision + 8 + 324])));										   // 1e17/1e8 = 9 digit
	FORI low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(int64_t(_10en[Precision - 8 + 324])))); // 1e17%1e8 = 8 digit

	// for (int i = 0; i < group_count; ++i)
	// {
	// 	// compute value的f和e,获取10的-e10+Precision次方，相乘
	// 	__m512i value_8i_f = value_f_8[i];
	// 	__m512i value_8i_e = value_e_8[i];
	// 	//__m512i pow10_8_f = _mm512_i64gather_epi64(_mm512_sub_epi64(_mm512_set1_epi64(343 + Precision), value_e10_8[i]), powers_ten, sizeof(uint64_t));
	// 	__m512i pow10_8_f = _mm512_i64gather_epi64(value_e10_8[i], &powers_ten_reverse[343 - Precision], sizeof(unsigned long long));
	// 	//__m512i res_e = _mm512_add_epi64(_mm512_sub_epi64(_mm512_srai_epi64(_mm512_mullo_epi64(_mm512_sub_epi64(_mm512_set1_epi64(Precision), value_e10_8[i]), _mm512_set1_epi64(1741647)), 19), _mm512_set1_epi64(62)), value_e2_8[i]);
	// 	nres_e_8[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62),
	// 												  value_e2_8[i]),
	// 								 _mm512_srai_epi64(_mm512_mullo_epi64(
	// 													   _mm512_sub_epi64(_mm512_set1_epi64(Precision),
	// 																		value_e10_8[i]),
	// 													   _mm512_set1_epi64(1741647)),
	// 												   19)); // log2(10)    , 7 <= nres_e <= 10
	// 	const __m512i M32 = _mm512_set1_epi64(0xFFFFFFFFull);
	// 	__m512i a = _mm512_srli_epi64(value_8i_f, 32);
	// 	__m512i c = _mm512_srli_epi64(pow10_8_f, 32);
	// 	__m512i b = _mm512_and_epi64(value_8i_f, M32);
	// 	__m512i d = _mm512_and_epi64(pow10_8_f, M32);
	// 	__m512i ac = _mm512_mul_epu32(a, c);
	// 	__m512i ad = _mm512_mul_epu32(a, d);
	// 	__m512i bc = _mm512_mul_epu32(b, c);
	// 	//__m512i hi = _mm512_add_epi64(_mm512_add_epi64(ac, _mm512_srli_epi64(ad, 32)), _mm512_srli_epi64(bc, 32));
	// 	__m512i hi = _mm512_add_epi64(ac, _mm512_add_epi64(_mm512_srli_epi64(ad, 32),
	// 													   _mm512_srli_epi64(bc, 32)));
	// 	__m512i res_f_8 = hi;
	// 	num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f_8,
	// 														_mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e_8[i])),
	// 									   nres_e_8[i]);
	// 	num0_rest_8_1[i] = _mm512_srlv_epi64(_mm512_srli_epi64(res_f_8, 1) + _mm512_srli_epi64(res_f_8, 3), _mm512_sub_epi64(nres_e_8[i], _mm512_set1_epi64(4)));

	// 	cmp_le_E16_8[i] = _mm512_cmplt_epi64_mask(num0_rest_8[i], _mm512_set1_epi64((unsigned long long)1e16));
	// 	value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp_le_E16_8[i], value_e10_8[i], _mm512_set1_epi64(1));
	// 	num0_rest_8[i] = _mm512_mask_blend_epi64(cmp_le_E16_8[i], num0_rest_8[i], num0_rest_8_1[i]);
	// 	high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),
	// 												   _mm512_set1_pd(_10en[-Precision + 8 + 324])));
	// 	low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i],
	// 																	_mm512_set1_epi64(int64_t(_10en[Precision - 8 + 324]))));
	// 	value_e10_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0));
	// 	_mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));

	// 	// const __m512i length_tmp = _mm512_set1_epi64(2 + (Precision > 0) + 1 + 1 + Precision + 2); // 23
	// 	// //cmp3[i] = _mm512_cmplt_pd_mask(__m512d(value_i8[i]), _mm512_set1_pd(0.0));				   // 1:+1
	// 	// //__m512i length_tmp2 = _mm512_mask_add_epi64(length_tmp, cmp3[i], length_tmp, _mm512_set1_epi64(1));
	// 	// __m512i length_tmp2 = _mm512_add_epi64(length_tmp , _mm512_srli_epi64(value_i8[i] , 63));
	// 	// cmp6[i] = _mm512_cmpge_epi64_mask(_mm512_abs_epi64(value_e10_8[i]), _mm512_set1_epi64(100));
	// 	// every_length_8[i] = _mm512_mask_add_epi64(length_tmp2, cmp6[i], length_tmp2, _mm512_set1_epi64(1));
	// 	// len_sum_8[i] = PrefixSumEpi64(every_length_8[i]);
	// 	// if (i > 0)
	// 	// {
	// 	// 	//len_sum_8[i] += len_sum_8[i - 1][7];
	// 	// 	len_sum_8[i] += every_start_pos[ (i-1)*group + 8];
	// 	// }
	// 	// _mm512_storeu_epi64(&every_start_pos[i * group + 1], len_sum_8[i]);
	// }
	FORI FORJ
	{
		// every_start_pos[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);
		// every_start_pos2[i * group + j] = every_start_pos[i * group + j] + 15 + (abs(e10[i * group + j]) >= 100);
		//*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));
	}
	// FORI FORJ buffer_s[every_start_pos[i * group + j]] = '-';
	FORI FORJ
	{
		// buffer_s[every_start_pos[i * group + j]] = '-';
		// every_start_pos[i * group + j] += ((*(unsigned long long *)&value[i * group + j]) >> 63);
		// every_start_pos2[i * group + j] = every_start_pos[i * group + j] + 15 + (abs(e10[i * group + j]) >= 100);
		//*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)('\n') << 56)));
		//*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));

		// if(Num_per_row == 1)
		// 	*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)('\n') << 56)));
		// else
		// 	*(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));
	}
	// FORI FORJ *(long long*)&buffer_s[every_start_pos[i * group + j] + 15 + (abs(e10[i*group+j])>=100)] = ((seq_exp_result[324 + e10[i*group+j]]) | ( ((long long)(is_end[start_is_end + i*group+j ])) << 56));
	// FORI FORJ *(long long *)&buffer_s[every_start_pos2[i * group + j]] = ((seq_exp_result[324 + e10[i * group + j]]) | (((long long)(is_end[start_is_end + i * group + j]))));
	if (0)
		for (int i = 0; i < group_count; ++i)
		{
			const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);
			const __m512i M54_8 = _mm512_set1_epi64((1ull << 54) - 1);
			long long num123[8], num456[8], num789[8], num45[8], num67[8], num89[8], num12[8], num34[8], num56[8], num78[8], num345[8], num678[8], num1234[8], num5678[8];

			__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(18014398510)); // 2*54/1e6
			__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54_8), _mm512_set1_epi64(1000));
			__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
			__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
			__m512i num789_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54_8), _mm512_set1_epi64(1000)), 54);

			// __m512i num12_345678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(18014398510));
			// __m512i num12_8 = _mm512_srli_epi64(num12_345678_8, 54);
			// __m512i num345_678_8 = _mm512_mullo_epi64(_mm512_and_epi64(num12_345678_8, M54_8), _mm512_set1_epi64(1000));
			// __m512i num345_8 = _mm512_srli_epi64(num345_678_8, 54);
			// __m512i num678_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(num345_678_8, M54_8), _mm512_set1_epi64(1000)), 54);

			// __m512i num123_45678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(180143985095));
			// __m512i num123_8_low8 = _mm512_srli_epi64(num123_45678_8, 54);
			// __m512i num456_78_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_45678_8, M54_8), _mm512_set1_epi64(1000));
			// __m512i num456_8_low8 = _mm512_srli_epi64(num456_78_8, 54);
			// __m512i num78_8 = _mm512_srli_epi64(_mm512_mullo_epi64(_mm512_and_epi64(num456_78_8, M54_8), _mm512_set1_epi64(100)), 54);

			_mm512_storeu_epi64(num123, num123_8);
			_mm512_storeu_epi64(num456, num456_8);
			_mm512_storeu_epi64(num789, num789_8);

			// _mm512_storeu_epi64(num12, num12_8);
			// _mm512_storeu_epi64(num345, num345_8);
			// _mm512_storeu_epi64(num678, num678_8);

			// long long num123_low8[8],num456_low8[8],num78_low8[8];
			// _mm512_storeu_epi64(num123_low8, num123_8_low8);
			// _mm512_storeu_epi64(num456_low8, num456_8_low8);
			// _mm512_storeu_epi64(num78_low8, num78_8);

			__m512i num1234_5678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
			//__m512i num1234_5678_8_2 = _mm512_mullo_epi64(low8_8[i * 2 + 1], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
			__m512i num1234_8 = _mm512_srli_epi64(num1234_5678_8, 48);
			//__m512i num1234_8_2 = _mm512_srli_epi64(num1234_5678_8_2, 48);
			__m512i num5678_8 = _mm512_sub_epi64(low8_8[i], _mm512_mullo_epi64(num1234_8, _mm512_set1_epi64(10000)));
			//__m512i num5678_8_2 = _mm512_sub_epi64(low8_8[i * 2 + 1], _mm512_mullo_epi64(num1234_8_2, _mm512_set1_epi64(10000)));
			//__m512i num5678_1234_merge = _mm512_or_epi64( _mm512_slli_epi64(num5678_8,32 ) , num1234_8);
			//__m512i num5678_1234_merge_2 = _mm512_or_epi64( _mm512_slli_epi64(num5678_8_2,32 ) , num1234_8_2);
			__m512i num5678_1234_merge = _mm512_mask_shuffle_epi32(num1234_8, (__mmask16)0b1010101010101010, num5678_8, _MM_PERM_CAAA);
			//__m512i num5678_1234_merge_2 = _mm512_mask_shuffle_epi32(num1234_8_2, (__mmask16)0b1010101010101010, num5678_8_2, _MM_PERM_CAAA);
			__m512i num_tmp = _mm512_mullo_epi32(num5678_1234_merge, _mm512_set1_epi32(16778));
			//__m512i num_tmp_2 = _mm512_mullo_epi32(num5678_1234_merge_2, _mm512_set1_epi32(16778));
			__m512i num_final = _mm512_set1_epi32(0x30303030);
			//__m512i num_final_2 = _mm512_set1_epi32(0x30303030);
			for (int j = 0; j < 4; ++j)
			{
				num_final = _mm512_or_epi32(num_final, _mm512_srli_epi32(_mm512_and_epi32(num_tmp, L8_16), 24 - j * 8));
				// num_final_2 = _mm512_or_epi32(num_final_2, _mm512_srli_epi32(_mm512_and_epi32(num_tmp_2, L8_16), 24 - j * 8));
				//  num_tmp = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp ) , _mm512_set1_epi32(10) );
				//  num_tmp_2 = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp_2 ) , _mm512_set1_epi32(10) );
				num_tmp = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp), _mm512_set1_epi32(10));
				// num_tmp_2 = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp_2), _mm512_set1_epi32(10)); //_mm512_andnot_epi64(a,b); (not a) & b
			}
			alignas(64) long long num12345678[8];
			_mm512_store_epi64(num12345678, num_final);

			for (int j = 0; j < group; ++j)
			{
				const unsigned long long *exp_ptr = &seq_exp_result2[324];
				char *const buffer_char_ptr = (char *)&buffer_s[every_start_pos[i * group + j]];
				// char *const buffer_char_ptr = (char *)&buffer_s[every_start_pos_int[i * group + j]];
				// char *const buffer_char_ptr = (char *)&buffer_s[every_start_pos[i * group + j] + (*(unsigned long long*)&value[i*group+j] >> 63) ];
				// char *const buffer_char_ptr = (char *)&buffer_s[every_start_pos_int[i * group + j] + (*(unsigned long long*)&value[i*group+j] >> 63) ];
				*(int *)(buffer_char_ptr) = digit_000_999[num123[j]];
				*(int *)(buffer_char_ptr + 4) = digit1000e[num456[j]];
				*(int *)(buffer_char_ptr + 7) = digit1000e[num789[j]];
				// // *(short *)(buffer_char_ptr + 10) = short_array[num12[j]];
				// // *(int *)(buffer_char_ptr + 12) = digit1000e[num345[j]];
				// // *(int *)(buffer_char_ptr + 15) = digit1000e[num678[j]];
				//*(long long *)(buffer_char_ptr + 10) = num12345678[j];
				//*(unsigned long long *)(buffer_char_ptr + 18) = exp_ptr[e10[i*group+j]];//e+123\n-\0\0

				_mm_storeu_si128((__m128i *)(buffer_char_ptr + 10), _mm_set_epi64x(exp_ptr[e10[i * group + j]], num12345678[j])); // write 16byte
			}
		}
	if (1)
		for (int i = 0; i < group_count / 2; ++i)
		{
			// const long long *exp_ptr = &exp_result3[324];
			const unsigned long long *exp_ptr = &seq_exp_result2[324];
			const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30
			const __m512i M54 = _mm512_set1_epi64((1ull << 54) - 1);
			const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);
			const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);

			__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i * 2 + 0], _mm512_set1_epi64(18014398510ull));   // ceil(2**54/1e6)
			__m512i num123_456789_8_2 = _mm512_mullo_epi64(high9_8[i * 2 + 1], _mm512_set1_epi64(18014398510ull)); // ceil(2**54/1e6)
			__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
			__m512i num123_8_2 = _mm512_srli_epi64(num123_456789_8_2, 54);
			__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000));		// 1000 < 2**10
			__m512i num456_789_8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8_2, M54), _mm512_set1_epi64(1000)); // 1000 < 2**10
			__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
			__m512i num456_8_2 = _mm512_srli_epi64(num456_789_8_2, 54);
			__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
			__m512i num789__8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8_2, M54), _mm512_set1_epi64(1000));
			__m512i num789_8 = _mm512_srli_epi64(num789__8, 54);
			__m512i num789_8_2 = _mm512_srli_epi64(num789__8_2, 54);

			alignas(64) long long num123[8], num456[8], num789[8];
			alignas(64) long long num123_2[8], num456_2[8], num789_2[8];

			_mm512_store_epi64(num123, num123_8);
			_mm512_store_epi64(num456, num456_8);
			_mm512_store_epi64(num789, num789_8);
			_mm512_store_epi64(num123_2, num123_8_2);
			_mm512_store_epi64(num456_2, num456_8_2);
			_mm512_store_epi64(num789_2, num789_8_2);

			__m512i num1234_5678_8 = _mm512_mullo_epi64(low8_8[i * 2 + 0], _mm512_set1_epi64(28147497672ull));	 // 2**48/1e4
			__m512i num1234_5678_8_2 = _mm512_mullo_epi64(low8_8[i * 2 + 1], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
			__m512i num1234_8 = _mm512_srli_epi64(num1234_5678_8, 48);
			__m512i num1234_8_2 = _mm512_srli_epi64(num1234_5678_8_2, 48);
			__m512i num5678_8 = _mm512_sub_epi64(low8_8[i * 2 + 0], _mm512_mullo_epi64(num1234_8, _mm512_set1_epi64(10000)));
			__m512i num5678_8_2 = _mm512_sub_epi64(low8_8[i * 2 + 1], _mm512_mullo_epi64(num1234_8_2, _mm512_set1_epi64(10000)));
			//__m512i num5678_1234_merge = _mm512_or_epi64( _mm512_slli_epi64(num5678_8,32 ) , num1234_8);
			//__m512i num5678_1234_merge_2 = _mm512_or_epi64( _mm512_slli_epi64(num5678_8_2,32 ) , num1234_8_2);
			__m512i num5678_1234_merge = _mm512_mask_shuffle_epi32(num1234_8, (__mmask16)0b1010101010101010, num5678_8, _MM_PERM_CAAA);
			__m512i num5678_1234_merge_2 = _mm512_mask_shuffle_epi32(num1234_8_2, (__mmask16)0b1010101010101010, num5678_8_2, _MM_PERM_CAAA);
			__m512i num_tmp = _mm512_mullo_epi32(num5678_1234_merge, _mm512_set1_epi32(16778));
			__m512i num_tmp_2 = _mm512_mullo_epi32(num5678_1234_merge_2, _mm512_set1_epi32(16778));
			__m512i num_final = _mm512_set1_epi32(0x30303030);
			__m512i num_final_2 = _mm512_set1_epi32(0x30303030);
			for (int j = 0; j < 4; ++j)
			{
				num_final = _mm512_or_epi32(num_final, _mm512_srli_epi32(_mm512_and_epi32(num_tmp, L8_16), 24 - j * 8));
				num_final_2 = _mm512_or_epi32(num_final_2, _mm512_srli_epi32(_mm512_and_epi32(num_tmp_2, L8_16), 24 - j * 8));
				// num_tmp = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp ) , _mm512_set1_epi32(10) );
				// num_tmp_2 = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp_2 ) , _mm512_set1_epi32(10) );
				num_tmp = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp), _mm512_set1_epi32(10));
				num_tmp_2 = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp_2), _mm512_set1_epi32(10)); //_mm512_andnot_epi64(a,b); (not a) & b
			}
			alignas(64) long long num12345678[8];
			_mm512_storeu_epi64(num12345678, num_final);
			alignas(64) long long num12345678_2[8];
			_mm512_storeu_epi64(num12345678_2, num_final_2);
			for (int j = 0; j < group; ++j)
			{
				// char *buf_ptr = value_write_ptr[i * 2 * group + j];
				char *buf_ptr = &buffer_s[every_start_pos[2 * i * group + j]];
				*(int *)(buf_ptr) = digit_000_999[num123[j]];
				*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
				//*(long long *)(buf_ptr) = (long long)digit_000_999[num123[j]] | ( (long long)digit1000e[num456[j]] << 32);
				*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
				_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]], num12345678[j])); // write 16byte
																															  //*(long long *)(buf_ptr + 10) = num12345678[j];
																															  //*(long long *)(buf_ptr + 18) = exp_ptr[e10[i * group + j]];
																															  // char *buf_ptr2 = value_write_ptr[(i * 2 + 1) * group + j];
																															  //  char *buf_ptr2 = &buffer_s[every_start_pos[i * 2 * group + j*2 + 1 ]];
																															  //  *(int *)(buf_ptr2) = digit_000_999[num123_2[j]];
																															  //  *(int *)(buf_ptr2 + 4) = digit1000e[num456_2[j]];
																															  //  //*(long long *)(buf_ptr2) = (long long)digit_000_999[num123_2[j]] | ( (long long)digit1000e[num456_2[j]]<<32 );
																															  //  *(int *)(buf_ptr2 + 7) = digit1000e[num789_2[j]];
																															  //  _mm_storeu_si128((__m128i *)(buf_ptr2 + 10), _mm_set_epi64x(exp_ptr[e10[i * 2 * group + j*2 + 1]], num12345678_2[j])); // write 16byte
			}
			for (int j = 0; j < group; ++j)
			{
				// char *buf_ptr2 = value_write_ptr[(i * 2 + 1) * group + j];
				char *buf_ptr2 = &buffer_s[every_start_pos[(i * 2 + 1) * group + j]];
				*(int *)(buf_ptr2) = digit_000_999[num123_2[j]];
				*(int *)(buf_ptr2 + 4) = digit1000e[num456_2[j]];
				//*(long long *)(buf_ptr2) = (long long)digit_000_999[num123_2[j]] | ( (long long)digit1000e[num456_2[j]]<<32 );
				*(int *)(buf_ptr2 + 7) = digit1000e[num789_2[j]];
				_mm_storeu_si128((__m128i *)(buf_ptr2 + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j]], num12345678_2[j])); // write 16byte
			}
		}
	return every_start_pos[All_double]; // length
}
#endif

template <int t = 0, int Precision = 16, int All_double = 32, unsigned int Num_per_row = 3, int is_init = 0>
__attribute__((always_inline)) int my_dou_to_sci_avx512_pure2_opt2(const double *value, char *buffer_s)
{
	static unsigned long long call_num = 0; // 调用次数
	static unsigned long long line_num = 1; // 行数
	using u64 = unsigned long long;
	using i64 = long long;
	if (is_init)
	{
		call_num = 0;
		line_num = 1;
		return 0;
	}
	static int is_first = 1;
	// const double Row_per_num = 1.0 / (double)Num_per_row;
	const int group = 8;						// avx512 = 8 double
	const int group_count = All_double / group; // 4=32/8
	//__m512i index_8[group_count];
	//__m512i index_mod_Num_per_row[group_count];
	// const __m512i index_base = _mm512_set_epi64(8, 7, 6, 5, 4, 3, 2, 1);
	const int arr_size = (Num_per_row <= All_double) ? (All_double + Num_per_row - 1) : (All_double * 2); // 32 + 3 - 1 =34;
	static long long is_end[arr_size];
	int start_is_end;
	if (Num_per_row != 0)
	{
		if (is_first)
		{ // only run once
			is_first = 0;
			if (Num_per_row <= All_double)
			{
				for (int i = 0; i < arr_size; ++i)
				{
					// is_end[i] = ((long long)((((i + 1) % Num_per_row) == 0) ? '\n' : ' ')) << (8 * 5);
					is_end[i] = ((long long)((((i + 1) % Num_per_row) == 0) ? ('\n' - '\n') : (' ' - '\n'))) << (8 * 5);
				}
			}
			else
			{
				for (int i = 0; i < arr_size; ++i)
				{
					// is_end[i] = ((long long)(' '))<<(8*5);
					is_end[i] = ((long long)(' ' - '\n')) << (8 * 5);
				}
				// is_end[All_double] = ((long long)('\n'))<<(8*5);
				is_end[All_double] = ((long long)('\n' - '\n')) << (8 * 5);
			}
		}
		if (Num_per_row <= All_double)
		{
			start_is_end = (call_num * All_double) % Num_per_row;
		}
		else
		{
			int tmp = ((call_num + 1) * All_double) - (line_num * Num_per_row);
			start_is_end = std::max(tmp + 1, 0); // max(tmp,-1)+1
			line_num += (tmp >= 0);
		}
	}
	// for (int i = 0; i < group_count; ++i)
	// {
	// 	index_8[i] = _mm512_add_epi64(index_base, _mm512_set1_epi64(call_num * All_double + i * group));
	// 	const int is_exp2 = (Num_per_row & (Num_per_row - 1)) == 0;
	// 	if (is_exp2)
	// 	{
	// 		index_mod_Num_per_row[i] = _mm512_and_epi64(index_8[i], _mm512_set1_epi64(Num_per_row - 1));
	// 	}
	// 	else
	// 	{
	// 		index_mod_Num_per_row[i] = _mm512_sub_epi64(index_8[i], _mm512_mullo_epi64(_mm512_cvttpd_epi64(_mm512_cvtepi64_pd(index_8[i]) * Row_per_num), _mm512_set1_epi64(Num_per_row)));
	// 	}
	// }
	call_num++;

	// -------------------------------------------
	// avx512 implementation ; powered by Xiang JB.
	// -------------------------------------------
	__m512d value_abs_d8[group_count];
	__m512i value_i8[group_count];
	__m512i value_abs_i8[group_count];
	__m512i ieee754_exp11_8[group_count];
	__m512i value_f_8[group_count];
	__m512i value_e_8[group_count];
	__m512i value_e2_8[group_count];
	__m512i value_e10_8[group_count];
	__m512i value_e10_abs_8[group_count];
	__m512i value_e10_pos_8[group_count];
	int64_t e10[All_double];
	int64_t e10_abs_32[All_double];
	int64_t e10_pos_32[All_double];
	__m512i every_length_8[group_count];
	__m512i len_sum_8[group_count];
	int64_t every_length[All_double];
	unsigned long long every_start_pos[All_double + 1];
	int every_start_pos_int[All_double + 1];
	every_start_pos[0] = 0;
	every_start_pos_int[0] = 0;
	__mmask8 cmp3[group_count], cmp6[group_count], cmp7[group_count], cmp8[group_count], cmp9[group_count];
	long long every_start_pos2[All_double + 1];
	long long every_start_pos3[All_double + 1];
	__m512i every_start_pos2_8[group_count];
	__m512i every_start_pos3_8[group_count];
	__m512i e10_temp[group_count];
	__m512i length_tmp2[group_count];
	__m512i length_tmp_32_12, length_tmp_32_34;
	//__m512i is_neg[group_count];
	long long is_neg[All_double];
	const double E100 = 1e100;
	const double EN99 = 1e-99;
	const long long E100_i = *(long long *)&E100;
	const long long EN99_i = *(long long *)&EN99;
	const __m512i length_tmp = _mm512_set1_epi64(2 + (Precision > 0) + 1 + 1 + Precision + 2);	  // 23
	const __m512i length_tmp_32 = _mm512_set1_epi32(2 + (Precision > 0) + 1 + 1 + Precision + 2); // 23
	__m512i ieee754_exp11_8_01, ieee754_exp11_8_23;
	__mmask8 cmp_result_8[group_count];		// uchar
	__mmask16 cmp_result_01, cmp_result_23; // ushort
	__m512i tmp[group_count], tmp_01, tmp_23;
	__m512i clz_8[group_count];
	__m512i nres_e_8[group_count];
	__m512i high9_8[group_count], low8_8[group_count];
	__m512i pow10_f_8[group_count];
	__m512i a[group_count], b[group_count], c[group_count], d[group_count];
	__m512i ac[group_count], ad[group_count], bc[group_count];
	__m512i res_f_8[group_count], num0_rest_8[group_count], num0_rest_8_1[group_count];
	__mmask8 cmp_lt_E16_8[group_count];

	FORI value_i8[i] = _mm512_loadu_epi64(&value[i * group]);
	FORI value_abs_d8[i] = _mm512_castsi512_pd(_mm512_and_epi64(value_i8[i], _mm512_set1_epi64(((1ull << 63) - 1))));
	FORI _mm512_storeu_epi64(&is_neg[i * group], _mm512_srli_epi64(value_i8[i], 63));
	FORI value_abs_i8[i] = _mm512_castpd_si512(value_abs_d8[i]); // abs,int64
	FORI ieee754_exp11_8[i] = _mm512_srli_epi64(_mm512_castpd_si512(value_abs_d8[i]), 52);
	FORI clz_8[i] = _mm512_max_epi64(_mm512_lzcnt_epi64(_mm512_castpd_si512(value_abs_d8[i])), _mm512_set1_epi64(11));
	FORI cmp_result_8[i] = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1));
	FORI tmp[i] = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8[i]), _mm512_set1_epi64(-1011)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	FORI value_e2_8[i] = _mm512_mask_sub_epi64(tmp[i], cmp_result_8[i], tmp[i], _mm512_set1_epi64(1));
	buffer_s[0] = '-';
	FORI e10_temp[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18);
	const int one_zero = 0;
	FORI value_e10_8[i] = _mm512_add_epi64(e10_temp[i], _mm512_set1_epi64(one_zero));
	const unsigned long long *powers_ptr = &powers_ten_reverse[343 + (1 - one_zero) - Precision];
	FORI pow10_f_8[i] = _mm512_i64gather_epi64(value_e10_8[i], &powers_ten_reverse[343 + (1 - one_zero) - Precision], sizeof(unsigned long long));
	FORI nres_e_8[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
										_mm512_srai_epi64(_mm512_mullo_epi64(
															  _mm512_sub_epi64(_mm512_set1_epi64(Precision - (1 - one_zero)),
																			   value_e10_8[i]),
															  _mm512_set1_epi64(1741647)),
														  19));
	// // -(e2-63 + ((16-e10)*1741647>>19)-63 + 64) = 62 - e2 - ((16-e10)*1741647>>19) ; (num*1741647)>>19 = floor(num * log2(10))
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), cmp_result_8[i],
											 _mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
	FORI a[i] = _mm512_srli_epi64(value_f_8[i], 32);
	FORI c[i] = _mm512_srli_epi64(pow10_f_8[i], 32);
	FORI ac[i] = _mm512_mul_epu32(a[i], c[i]);
	FORI ad[i] = _mm512_mul_epu32(a[i], pow10_f_8[i]);// d = pow10_f_8 & M32
	FORI bc[i] = _mm512_mul_epu32(value_f_8[i], c[i]);// b = value_f_8 & M32
	FORI res_f_8[i] = _mm512_add_epi64(ac[i], _mm512_add_epi64(_mm512_srli_epi64(ad[i], 32),
															   _mm512_srli_epi64(bc[i], 32)));														   // ac+ (ad>>32) + (bc>>32) ;
	FORI num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f_8[i], _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e_8[i])), nres_e_8[i]); // round
	FORI num0_rest_8_1[i] = _mm512_srlv_epi64(_mm512_add_epi64(_mm512_srli_epi64(res_f_8[i], 1), _mm512_srli_epi64(res_f_8[i], 3)), _mm512_sub_epi64(nres_e_8[i], _mm512_set1_epi64(4)));
	FORI cmp_lt_E16_8[i] = _mm512_cmplt_epi64_mask(num0_rest_8[i], _mm512_set1_epi64((unsigned long long)1e16));
	FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp_lt_E16_8[i], value_e10_8[i], _mm512_set1_epi64(1));
	FORI num0_rest_8[i] = _mm512_mask_blend_epi64(cmp_lt_E16_8[i], num0_rest_8[i], num0_rest_8_1[i]);
	FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),		   // round down
														_mm512_set1_pd(1e-8 /*_10en[-Precision + 8 + 324]*/)));										   // 1e17/1e8 = 9 digit
	FORI low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8 /* int64_t(_10en[Precision - 8 + 324]*/))); // 1e17%1e8 = 8 digit
	char *buf_ptr = buffer_s;
	const unsigned long long *exp_ptr = &seq_exp_result3[324 + 1 - one_zero];


#if 0
	for (int i = 0; i < group_count / 2; ++i)
	{
		const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30
		const __m512i M54 = _mm512_set1_epi64((1ull << 54) - 1);
		const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);
		const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);
		// __m512i num123456789_1_2_8[6];
		// __m512i num123_456789_8[2];
		// __m512i num456_789_8[2];
		// __m512i num789__8[2];

		// #define FORJ2 for (int j = 0; j < 2; ++j)

		__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i * 2 + 0], _mm512_set1_epi64(18014398510ull));   // ceil(2**54/1e6)
		__m512i num123_456789_8_2 = _mm512_mullo_epi64(high9_8[i * 2 + 1], _mm512_set1_epi64(18014398510ull)); // ceil(2**54/1e6)
		__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
		__m512i num123_8_2 = _mm512_srli_epi64(num123_456789_8_2, 54);
		__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000));		// 1000 < 2**10
		__m512i num456_789_8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8_2, M54), _mm512_set1_epi64(1000)); // 1000 < 2**10
		__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
		__m512i num456_8_2 = _mm512_srli_epi64(num456_789_8_2, 54);
		__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
		__m512i num789__8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8_2, M54), _mm512_set1_epi64(1000));
		__m512i num789_8 = _mm512_srli_epi64(num789__8, 54);
		__m512i num789_8_2 = _mm512_srli_epi64(num789__8_2, 54);

		// FORJ2 num123_456789_8[j] = _mm512_mullo_epi64(high9_8[i * 2 + j], _mm512_set1_epi64(18014398510ull));
		// FORJ2 num456_789_8[j] = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8[j], M54), _mm512_set1_epi64(1000));		// 1000 < 2**10
		// FORJ2 num789__8[j] = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8[j], M54), _mm512_set1_epi64(1000));
		// FORJ2 num123456789_1_2_8[0+j] = _mm512_srli_epi64(num123_456789_8[j], 54);
		// FORJ2 num123456789_1_2_8[2+j] = _mm512_srli_epi64(num456_789_8[j], 54);
		// FORJ2 num123456789_1_2_8[4+j] = _mm512_srli_epi64(num789__8[j], 54);

		long long num123[8], num456[8], num789[8];
		long long num123_2[8], num456_2[8], num789_2[8];
		_mm512_storeu_epi64(num123, num123_8);
		_mm512_storeu_epi64(num456, num456_8);
		_mm512_storeu_epi64(num789, num789_8);
		_mm512_storeu_epi64(num123_2, num123_8_2);
		_mm512_storeu_epi64(num456_2, num456_8_2);
		_mm512_storeu_epi64(num789_2, num789_8_2);
		__m512i num1234_5678_8 = _mm512_mullo_epi64(low8_8[i * 2 + 0], _mm512_set1_epi64(28147497672ull));	 // 2**48/1e4
		__m512i num1234_5678_8_2 = _mm512_mullo_epi64(low8_8[i * 2 + 1], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
		__m512i num1234_8 = _mm512_srli_epi64(num1234_5678_8, 48);
		__m512i num1234_8_2 = _mm512_srli_epi64(num1234_5678_8_2, 48);
		__m512i num5678_8 = _mm512_sub_epi64(low8_8[i * 2 + 0], _mm512_mullo_epi64(num1234_8, _mm512_set1_epi64(10000)));
		__m512i num5678_8_2 = _mm512_sub_epi64(low8_8[i * 2 + 1], _mm512_mullo_epi64(num1234_8_2, _mm512_set1_epi64(10000)));
		__m512i num5678_1234_merge = _mm512_or_epi64( _mm512_slli_epi64(num5678_8,32 ) , num1234_8);
		__m512i num5678_1234_merge_2 = _mm512_or_epi64( _mm512_slli_epi64(num5678_8_2,32 ) , num1234_8_2);
		//__m512i num5678_1234_merge = _mm512_mask_shuffle_epi32(num1234_8, (__mmask16)0b1010101010101010, num5678_8, _MM_PERM_CAAA);
		//__m512i num5678_1234_merge_2 = _mm512_mask_shuffle_epi32(num1234_8_2, (__mmask16)0b1010101010101010, num5678_8_2, _MM_PERM_CAAA);
		__m512i num_tmp = _mm512_mullo_epi32(num5678_1234_merge, _mm512_set1_epi32(16778));
		__m512i num_tmp_2 = _mm512_mullo_epi32(num5678_1234_merge_2, _mm512_set1_epi32(16778));
		//__m512i num_final = _mm512_set1_epi32(0x30303030);
		//__m512i num_final_2 = _mm512_set1_epi32(0x30303030);
		__m512i num_final = _mm512_set1_epi32(0);
		__m512i num_final_2 = _mm512_set1_epi32(0);
		for (int j = 0; j < 4; ++j)
		{
			num_final = _mm512_or_epi32(num_final, _mm512_srli_epi32(_mm512_and_epi32(num_tmp, L8_16), 24 - j * 8));
			num_final_2 = _mm512_or_epi32(num_final_2, _mm512_srli_epi32(_mm512_and_epi32(num_tmp_2, L8_16), 24 - j * 8));
			//num_tmp = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp ) , _mm512_set1_epi32(10) );
			//num_tmp_2 = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp_2 ) , _mm512_set1_epi32(10) );
			num_tmp = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp), _mm512_set1_epi32(10));
			num_tmp_2 = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp_2), _mm512_set1_epi32(10)); //_mm512_andnot_epi64(a,b); (not a) & b
		}
		long long num12345678[8];
		long long num12345678_2[8];
		_mm512_storeu_epi64(num12345678, num_final | DIGIT_ZERO_8);
		_mm512_storeu_epi64(num12345678_2, num_final_2 | DIGIT_ZERO_8);
		const long long *is_end_ptr = &is_end[start_is_end];
#pragma unroll(group)
		for (int j = 0; j < group; j++)
		{
			int idx = 2 * i * group + j;
			buf_ptr += is_neg[idx];
			*(int *)(buf_ptr) = digit_000_999[num123[j]];
			*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
			*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
			//_mm_storeu_si128((__m128i *)(buf_ptr),_mm_set_epi64x(digit1000e[num789[j]],digit1000e[num789[j]]));
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]], num12345678[j])); // write 16byte

			long long write_e10_result = exp_ptr[e10[idx]]; // \n
			const long long diff = (((long long)(' ' - '\n')) << (8 * 5));
			// Num_per_row is constant value;
			if (Num_per_row == 0)
			{
				// " "
				write_e10_result += diff;
			}
			else if (Num_per_row == 1)
			{
				// "\n"
				// do nothing
			}
			else if (((Num_per_row & (Num_per_row - 1)) == 0) && (Num_per_row < All_double)) // 2,4,8,16
			{
				//
				write_e10_result += ((idx & (Num_per_row - 1)) == 0) ? 0 : diff;
			}
			else if (Num_per_row < All_double)
			{
				// is end
				write_e10_result += is_end_ptr[idx];
			}
			else if (Num_per_row == All_double)
			{
				if (idx != All_double)
					write_e10_result += diff;
			}
			else
			{
				write_e10_result += is_end_ptr[idx];
			}
			_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10_result, num12345678[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]] | is_end_ptr[2 * i * group + j], num12345678[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10[2 * i * group + j], num12345678[j])); // write 16byte
			buf_ptr += 24;
		}
#pragma unroll(group)
		for (int j = 0; j < group; j++)
		{
			int idx = (2 * i + 1) * group + j;
			buf_ptr += is_neg[idx];
			*(int *)(buf_ptr) = digit_000_999[num123_2[j]];
			*(int *)(buf_ptr + 4) = digit1000e[num456_2[j]];
			*(int *)(buf_ptr + 7) = digit1000e[num789_2[j]];
			long long write_e10_result = exp_ptr[e10[idx]]; // \n
			const long long diff = (((long long)(' ' - '\n')) << (8 * 5));
			// Num_per_row is constant value;
			if (Num_per_row == 0)
			{
				// " "
				write_e10_result += diff;
			}
			else if (Num_per_row == 1)
			{
				// "\n"
				// do nothing
			}
			else if (((Num_per_row & (Num_per_row - 1)) == 0) && (Num_per_row < All_double))
			{
				//
				write_e10_result += ((idx & (Num_per_row - 1)) == 0) ? 0 : diff;
			}
			else if (Num_per_row < All_double)
			{
				// is end
				write_e10_result += is_end_ptr[idx];
			}
			else if (Num_per_row == All_double)
			{
				if (idx != All_double - 1)
					write_e10_result += diff;
			}
			else
			{
				write_e10_result += is_end_ptr[idx];
			}
			//_mm_storeu_si128((__m128i *)(buf_ptr),_mm_set_epi64x(digit1000e[num789_2[j]],digit1000e[num789_2[j]]));
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(2 * i + 1) * group + j]], num12345678_2[j])); // write 16byte
			_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10_result, num12345678_2[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(2 * i + 1) * group + j]] | is_end_ptr[ (2 * i + 1) * group + j], num12345678_2[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10[(2 * i + 1) * group + j], num12345678_2[j])); // write 16byte
			buf_ptr += 24;
		}

		// for (int j = 0; j < group; j += 4)
		// {
		// 	buf_ptr += (*(unsigned long long *)&value[2 * i * group + j] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4[j / 4 + 0], 0)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 2], 0)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 4], 0)];
		// 	//_mm512_extracti32x4_epi64(num_final,0);
		// 	// __m128i tmp1;
		// 	// if(j<4)tmp1 =  _mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,0),exp_ptr[e10[2 * i * group + j]], 1 );
		// 	// else tmp1 =  _mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,2),exp_ptr[e10[2 * i * group + j]], 1 );
		// 	// _mm_storeu_si128((__m128i *)(buf_ptr + 10),tmp1);
		// 	//_mm_storeu_si128((__m128i *)(buf_ptr + 10),write_num[j]);
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]], num12345678[j])); // write 16byte
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[2 * i * group + j + 1] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4[j / 4 + 0], 1)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 2], 1)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 4], 1)];
		// 	// __m128i tmp2;
		// 	// if(j<4)tmp2 =  _mm_shuffle_epi32(_mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,0),exp_ptr[e10[2 * i * group + j+1]], 0 ),0b01001110);
		// 	// else tmp2 =  _mm_shuffle_epi32(_mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,2),exp_ptr[e10[2 * i * group + j+1]], 0 ),0b01001110);
		// 	// _mm_storeu_si128((__m128i *)(buf_ptr + 10),tmp2);
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j + 1]], num12345678[j + 1])); // write 16byte
		// 	//_mm_storeu_si128((__m128i *)(buf_ptr + 10),write_num[j+1]);
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[2 * i * group + j + 2] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4[j / 4 + 0], 2)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 2], 2)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 4], 2)];
		// 	// __m128i tmp3;
		// 	// if(j<4)tmp3 =  _mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,1),exp_ptr[e10[2 * i * group + j+2]], 1 );
		// 	// else tmp3 =  _mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,3),exp_ptr[e10[2 * i * group + j+2]], 1 );
		// 	// _mm_storeu_si128((__m128i *)(buf_ptr + 10),tmp3);
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j + 2]], num12345678[j + 2])); // write 16byte
		// 	//_mm_storeu_si128((__m128i *)(buf_ptr + 10),write_num[j+2]);
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[2 * i * group + j + 3] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4[j / 4 + 0], 3)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 2], 3)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4[j / 4 + 4], 3)];
		// 	// __m128i tmp4;
		// 	// if(j<4)tmp4 =  _mm_shuffle_epi32(_mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,1),exp_ptr[e10[2 * i * group + j+3]], 0 ),0b01001110);
		// 	// else tmp4 =  _mm_shuffle_epi32(_mm_insert_epi64(_mm512_extracti32x4_epi32(num_final,3),exp_ptr[e10[2 * i * group + j+3]], 0 ),0b01001110);
		// 	// _mm_storeu_si128((__m128i *)(buf_ptr + 10),tmp4);
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j + 3]], num12345678[j + 3])); // write 16byte
		// 	//_mm_storeu_si128((__m128i *)(buf_ptr + 10),write_num[j+3]);
		// 	buf_ptr += 24;
		// }
		// for (int j = 0; j < group; j += 4)
		// {
		// 	buf_ptr += (*(unsigned long long *)&value[(i * 2 + 1) * group + j] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4_2[j / 4 + 0], 0)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 2], 0)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 4], 0)];
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j]], num12345678_2[j]));
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[(i * 2 + 1) * group + j + 1] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4_2[j / 4 + 0], 1)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 2], 1)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 4], 1)];
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j + 1]], num12345678_2[j + 1]));
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[(i * 2 + 1) * group + j + 2] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4_2[j / 4 + 0], 2)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 2], 2)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 4], 2)];
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j + 2]], num12345678_2[j + 2]));
		// 	buf_ptr += 24;

		// 	buf_ptr += (*(unsigned long long *)&value[(i * 2 + 1) * group + j + 3] >> 63);
		// 	*(int *)(buf_ptr) = digit_000_999[_mm256_extract_epi64(num123456789_4_2[j / 4 + 0], 3)];
		// 	*(int *)(buf_ptr + 4) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 2], 3)];
		// 	*(int *)(buf_ptr + 7) = digit1000e[_mm256_extract_epi64(num123456789_4_2[j / 4 + 4], 3)];
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j + 3]], num12345678_2[j + 3]));
		// 	buf_ptr += 24;
		// }
	}
#endif


	const long long *is_end_ptr = &is_end[start_is_end];
	for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)
#define FORJ2 for (int j = 0; j < 2; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1); // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);    // high 8 bit in 32bit

        __m512i num1[2];
        __m512i num_low16[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num1_print[8*2];// "1."
        u64 num_low16_print[8 * 4];// low16 digtit
        u64 offset[8*2];//18-tz-(tz==16)

        FORJ2 num1[j] = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + j], _mm512_set1_epi64(1441151881)), 57);// 1441151881 = 2**57 / 1e8
        FORJ2 _mm512_storeu_epi64(&num1_print[j*8], _mm512_or_epi64(num1[j], _mm512_set1_epi64('.' * 256 + '0')));// num1 | ('.' * 256 + '0')
        FORJ2 num_low16[j] = _mm512_sub_epi64(high9_8[i * 2 + j], _mm512_mullo_epi64(num1[j], _mm512_set1_epi64(1e8)));// num_2_9 = high9 - num1*1e8
        FORJ2 num_low16[2+j] = low8_8[i * 2 + j];//num_10_17 = low8

        FORJ4 num1234_8[j] = _mm512_srli_epi64(_mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)), 48);// num1234 = num_low8 / 1e4 = num_low8 * 28147497672 >> 48
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000)));// num5678 = num_low8 - num1234*1e4
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
        //FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);//another way
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778)); // num1234 / 1e3 = num1234 * 16778 >> 24
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10));// ((!L8) & num_tmp) * 10
            //FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_low16_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));
        //compute tail zero number , compute final buffer offset;
        // FORJ4 tz_low16[j] = _mm512_srli_epi64(_mm512_lzcnt_epi64(num_final[j]), 3);//lzcnt(final)>>3
        // FORJ2 tz_8[j] = _mm512_mask_add_epi64(tz_low16[2+j], _mm512_cmpeq_epi64_mask(tz_low16[2+j], _mm512_set1_epi64(8)), tz_low16[2+j], tz_low16[j]);//tz_low8 == 8 ? tz_low8+tz_2_9 : tz_low8
        // FORJ2 _mm512_storeu_epi64(&tz[(i * 2 + j) * group], tz_8[j]);
        // FORJ2 _mm512_storeu_epi64(&offset[j*8], _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[j], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[j]) );//18-tz-(tz==16)

        // for (int j = 0; j < group; ++j)
        // {
        //         char *buf_ptr1 = buf_ptr[i * 2 * group + j];
        //         *(u64 *)(buf_ptr1) = num1_print[j]; // write 8 byte but only low 2 byte use;
        //         _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_low16_print[2 * 8 + j], num_low16_print[0 * 8 + j])); // write 16byte
        //         *(i64 *)( buf_ptr1 + offset[j] ) = exp_ptr[e10[2 * i * group + j]];//remove tail zero

        //         char *buf_ptr2 = buf_ptr[(i * 2 + 1) * group + j];
        //         *(u64 *)(buf_ptr2) = num1_print[j+8];
        //         _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_low16_print[3 * 8 + j], num_low16_print[1 * 8 + j])); // write 16byte
        //         *(i64 *)(buf_ptr2 + offset[8 + j]) = exp_ptr[e10[(2 * i + 1) * group + j]];
        // }

		#pragma unroll(group)
		for (int j = 0; j < group; j++)
		{
			int idx = 2 * i * group + j;
			buf_ptr += is_neg[idx];
			//*(int *)(buf_ptr) = digit_000_999[num123[j]];
			//*(unsigned int *)(buf_ptr) = digit_000_999[num123[j]];
			*(u64 *)(buf_ptr) = num1_print[j];
			_mm_storeu_si128((__m128i *)(buf_ptr + 2), _mm_set_epi64x(num_low16_print[2 * 8 + j], num_low16_print[0 * 8 + j])); // write 16byte
			//*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
			//*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
			//_mm_storeu_si128((__m128i *)(buf_ptr),_mm_set_epi64x(digit1000e[num789[j]],digit1000e[num789[j]]));
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]], num12345678[j])); // write 16byte

			long long write_e10_result = exp_ptr[e10[idx]]; // \n
			const long long diff = (((long long)(' ' - '\n')) << (8 * 5));
			// Num_per_row is constant value;
			if (Num_per_row == 0)
			{
				// " "
				write_e10_result += diff;
			}
			else if (Num_per_row == 1)
			{
				// "\n"
				// do nothing
			}
			else if (((Num_per_row & (Num_per_row - 1)) == 0) && (Num_per_row < All_double)) // 2,4,8,16
			{
				//
				write_e10_result += (( (idx+1) & (Num_per_row - 1)) == 0) ? 0 : diff;
			}
			else if (Num_per_row < All_double)
			{
				// is end
				write_e10_result += is_end_ptr[idx];
			}
			else if (Num_per_row == All_double)
			{
				if (idx != All_double)
					write_e10_result += diff;
			}
			else
			{
				write_e10_result += is_end_ptr[idx];
			}
			*(i64 *)( buf_ptr + 18 ) = write_e10_result;
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10_result, num12345678[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]] | is_end_ptr[2 * i * group + j], num12345678[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10[2 * i * group + j], num12345678[j])); // write 16byte
			buf_ptr += 24;
		}
#pragma unroll(group)
		for (int j = 0; j < group; j++)
		{
			int idx = (2 * i + 1) * group + j;
			buf_ptr += is_neg[idx];


			// *(int *)(buf_ptr) = digit_000_999[num123_2[j]];
			// *(int *)(buf_ptr + 4) = digit1000e[num456_2[j]];
			// *(int *)(buf_ptr + 7) = digit1000e[num789_2[j]];
			*(u64 *)(buf_ptr) = num1_print[8+j];
			_mm_storeu_si128((__m128i *)(buf_ptr + 2), _mm_set_epi64x(num_low16_print[3 * 8 + j], num_low16_print[1 * 8 + j])); // write 16byte


			long long write_e10_result = exp_ptr[e10[idx]]; // \n
			const long long diff = (((long long)(' ' - '\n')) << (8 * 5));
			// Num_per_row is constant value;
			if (Num_per_row == 0)
			{
				// " "
				write_e10_result += diff;
			}
			else if (Num_per_row == 1)
			{
				// "\n"
				// do nothing
			}
			else if (((Num_per_row & (Num_per_row - 1)) == 0) && (Num_per_row < All_double))
			{
				//
				write_e10_result += (( (idx+1) & (Num_per_row - 1)) == 0) ? 0 : diff;
			}
			else if (Num_per_row < All_double)
			{
				// is end
				write_e10_result += is_end_ptr[idx];
			}
			else if (Num_per_row == All_double)
			{
				if (idx != All_double - 1)
					write_e10_result += diff;
			}
			else
			{
				write_e10_result += is_end_ptr[idx];
			}
			//_mm_storeu_si128((__m128i *)(buf_ptr),_mm_set_epi64x(digit1000e[num789_2[j]],digit1000e[num789_2[j]]));
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(2 * i + 1) * group + j]], num12345678_2[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10_result, num12345678_2[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[(2 * i + 1) * group + j]] | is_end_ptr[ (2 * i + 1) * group + j], num12345678_2[j])); // write 16byte
			//_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(write_e10[(2 * i + 1) * group + j], num12345678_2[j])); // write 16byte
			*(i64 *)(buf_ptr + 18) = write_e10_result;
			buf_ptr += 24;
		}
    }

	return buf_ptr - buffer_s; // length
}

#if 0
__m512i mul1000(__m512i a)
{
	return _mm512_slli_epi64(a, 10) - (_mm512_slli_epi64(a, 4) +
									   _mm512_slli_epi64(a, 3));
	// return   a*1024 -a*16-a*8;
}
__m512i mul100(__m512i a)
{
	return _mm512_mullo_epi64(a , _mm512_set1_epi64(100));
}
__m512i mul125(__m512i a)
{
	// return a*125;
	return _mm512_slli_epi64(a, 7) - (_mm512_slli_epi64(a, 1) + a);
	// return   a*1024 -a*16-a*8;
}
__m512i mul10_1(__m512i a)
{
	// 10 = 8 + 2
	return _mm512_add_epi64(_mm512_slli_epi64(a, 3) , _mm512_slli_epi64(a, 1));
	// return _mm512_slli_epi64(_mm512_slli_epi64(a, 2) + a , 1);//(4+1)*2
}
__m512i mul10(__m512i a)
{
	// 10 = 8 + 2
	return _mm512_slli_epi64(a, 3) + _mm512_slli_epi64(a, 1);
}
__m512i mul10_2(__m512i a)
{
	// 10 = 8 + 2
	return _mm512_mullo_epi64(a, _mm512_set1_epi64(10));
}
__m512i mul5(__m512i a)
{
	// 5 = 4 + 1
	return _mm512_slli_epi64(a, 2) + a;
}
__m512i mul5_32(__m512i a)
{
	// 5 = 4 + 1
	return _mm512_slli_epi32(a, 2) + a;
}
#endif
#if 0
template <int t = 0, int Precision = 16, int All_double = 32, int Num_per_row = 3>
void my_dou_to_sci_avx512_pure8(const double *value, char **buffer)
{
	const int group = 8;						// avx512 = 8 double
	const int group_count = All_double / group; // 4 = 32/8
	__m512d value_abs_d8[group_count];			// abs(value)
	__m512i value_f_8[group_count];
	__m512i value_e2_8[group_count];
	__m512i value_e10_8[group_count];
	long long e10[All_double];
	long long every_start_pos[All_double];
	__m512i value_i8[group_count];
	__m512i ieee754_exp11_8[group_count];
	__mmask8 cmp_result[group_count];
	__m512i tmp[group_count];
	__m512i clz_8[group_count];
	FORI value_i8[i] = _mm512_loadu_epi64(&value[i * group]);
	FORI _mm512_storeu_epi64(&every_start_pos[i * group], _mm512_srli_epi64(value_i8[i], 63));
	FORI value_abs_d8[i] = _mm512_castsi512_pd(_mm512_and_epi64(value_i8[i], _mm512_set1_epi64(((1ull << 63) - 1))));
	FORI ieee754_exp11_8[i] = _mm512_srli_epi64(_mm512_castpd_si512(value_abs_d8[i]), 52);
	FORI clz_8[i] = _mm512_max_epi64(_mm512_lzcnt_epi64(_mm512_castpd_si512(value_abs_d8[i])), _mm512_set1_epi64(11));
	FORI cmp_result[i] = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1));
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), cmp_result[i],
											 _mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
	FORI tmp[i] = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8[i]), _mm512_set1_epi64(1 - 1023 + 11)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	FORI value_e2_8[i] = _mm512_mask_sub_epi64(tmp[i], cmp_result[i], tmp[i], _mm512_set1_epi64(1));
	FORI FORJ buffer[i * group + j][0] = '-';
	__m512i e10_temp[group_count];
	__m512d pow10_e10_temp_p[group_count];
	__mmask8 cmp2[group_count];
	__m512i nres_e[group_count];
	FORI e10_temp[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18); // =floor(value_e2*log10(2))
	FORI pow10_e10_temp_p[i] = _mm512_i64gather_pd(e10_temp[i], &_10en[324 + 1], sizeof(double));
	FORI value_e10_8[i] = _mm512_mask_add_epi64(e10_temp[i], _mm512_cmple_pd_mask(pow10_e10_temp_p[i], value_abs_d8[i]), e10_temp[i], _mm512_set1_epi64(1));
	// FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(_mm512_castpd_si512(value_abs_d8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	//  FORI cmp2[i] = _mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(2));
	//  FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp2[i], value_e10_8[i], _mm512_set1_epi64(1));
	__m512i high9_8[group_count], low8_8[group_count];
	__m512i pow10_8_f[group_count];
	__m512i a[group_count], b[group_count], c[group_count], d[group_count];
	__m512i ac[group_count], ad[group_count], bc[group_count];
	__m512i res_f[group_count], num0_rest_8[group_count];
	FORI pow10_8_f[i] = _mm512_i64gather_epi64(value_e10_8[i], &powers_ten_reverse[343 - Precision], sizeof(unsigned long long));
	FORI nres_e[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
									  _mm512_srai_epi64(_mm512_mullo_epi64(
															_mm512_sub_epi64(_mm512_set1_epi64(Precision),
																			 value_e10_8[i]),
															_mm512_set1_epi64(1741647)),
														19)); //  62 - e2 - ((16-e10)*1741647>>19) , num*1741647>>19 = num * log2(10)    , 7 <= nres_e <= 10
	FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(_mm512_castpd_si512(value_abs_d8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	const __m512i M32 = _mm512_set1_epi64(0xFFFFFFFFull);
	FORI a[i] = _mm512_srli_epi64(value_f_8[i], 32);
	FORI c[i] = _mm512_srli_epi64(pow10_8_f[i], 32);
	FORI b[i] = _mm512_and_epi64(value_f_8[i], M32);
	FORI d[i] = _mm512_and_epi64(pow10_8_f[i], M32);
	FORI ac[i] = _mm512_mul_epu32(a[i], c[i]);
	FORI ad[i] = _mm512_mul_epu32(a[i], d[i]);
	FORI bc[i] = _mm512_mul_epu32(b[i], c[i]);
	FORI res_f[i] = _mm512_add_epi64(ac[i], _mm512_add_epi64(_mm512_srli_epi64(ad[i], 32),
															 _mm512_srli_epi64(bc[i], 32)));
	FORI num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f[i], _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e[i])), nres_e[i]); // round
	FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),
														_mm512_set1_pd(_10en[-Precision + 8 + 324])));
	FORI low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(int64_t(_10en[Precision - 8 + 324]))));
	for (int i = 0; i < group_count; ++i)
	{
		const __m512i ZERO_8 = _mm512_set1_epi64(48ull * (1ull << (8 * 0)) +
												 48ull * (1ull << (8 * 1)) +
												 48ull * (1ull << (8 * 2)) +
												 48ull * (1ull << (8 * 3)) +
												 48ull * (1ull << (8 * 4)) +
												 48ull * (1ull << (8 * 5)) +
												 48ull * (1ull << (8 * 6)) +
												 48ull * (1ull << (8 * 7)));
		const __m512i ZERO_8_2 = _mm512_set1_epi64(48ull * (1ull << (8 * 0)) +
												   0ull * (1ull << (8 * 1)) +
												   48ull * (1ull << (8 * 2)) +
												   48ull * (1ull << (8 * 3)) +
												   48ull * (1ull << (8 * 4)) +
												   48ull * (1ull << (8 * 5)) +
												   48ull * (1ull << (8 * 6)) +
												   48ull * (1ull << (8 * 7)));
		alignas(64) long long num123[8], num456[8], num789[8], num12[8], num345[8], num678[8];
		const __m512i M54 = _mm512_set1_epi64((1ull << 54) - 1);
		__m512i M55 = _mm512_set1_epi64((1ull << 55) - 1);
		const __m512i M56 = _mm512_set1_epi64((1ull << 56) - 1);
		const __m512i M57 = _mm512_set1_epi64((1ull << 57) - 1);
		const __m512i M53 = _mm512_set1_epi64((1ull << 53) - 1);
		const __m512i M52 = _mm512_set1_epi64((1ull << 52) - 1);
		const __m512i M51 = _mm512_set1_epi64((1ull << 51) - 1);
		const __m512i M50 = _mm512_set1_epi64((1ull << 50) - 1);
		const __m512i M49 = _mm512_set1_epi64((1ull << 49) - 1);
		const __m512i M48 = _mm512_set1_epi64((1ull << 48) - 1);
		const __m512i M[8] = {M48};
		__m512i num12456789_8 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(7205759404));		// ceil(2**56/1e7)
		__m512i num12456789_8_2 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1441151881ull)); // ceil(2**57/1e8)
		__m512i num12456789_final = _mm512_set1_epi64(0);
		__m512i num12456789_final2 = _mm512_set1_epi64(0);
		__m512i num12_high9_8;
		for (int j = 0; j < 7; ++j)
		{
			if (j > 0)
				num12456789_final |= (_mm512_slli_epi64(_mm512_srli_epi64(num12456789_8, 56), ((j - 1) * 8)));
			else
				num12_high9_8 = _mm512_srli_epi64(num12456789_8, 56);

			if (j == 0)
				num12456789_final2 |= (_mm512_slli_epi64(_mm512_srli_epi64(num12456789_8_2, 57), ((j) * 8)));
			if (j == 1)
				num12456789_final2 |= _mm512_slli_epi64(_mm512_set1_epi64('.'), j * 8);
			if (j > 0)
				num12456789_final2 |= (_mm512_slli_epi64(_mm512_srli_epi64(num12456789_8_2, 57), ((j + 1) * 8)));

			if (j != 6)
				num12456789_8_2 = mul10_2(_mm512_and_epi64(num12456789_8_2, M57));

			num12456789_8 = mul10_1(_mm512_and_epi64(num12456789_8, M56));
		}
		__m512i num89_8 = mul100(_mm512_and_epi64(num12456789_8_2, M57));
		//__m512i tmp_v = mul10_1(_mm512_and_epi64(num12456789_8_2, M57));
		// __m512i num89_8 = (_mm512_srli_epi64( tmp_v  , 57) | 48) |
		// 	_mm512_srli_epi64((_mm512_srli_epi64( mul10_1(_mm512_and_epi64(tmp_v, M57))  , 57) | 48), 8 );

		num12456789_final |= ZERO_8;
		num12456789_final2 |= ZERO_8_2;
		//__m512i num0_8 = (_mm512_srli_epi64(num12456789_8,56-0) | (48<<0) ) | ('.'<<8);
		__m512i num0_8 = (_mm512_set1_epi64(0) | (48)) | ('.' << 8);

		__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(18014398510));
		__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);

		__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000));
		__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
		__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
		__m512i num789_8 = _mm512_srli_epi64(num789__8, 54);
		__m512i num_456789_8 = _mm512_and_epi64(num123_456789_8, M54);
		__m512i num456789_8_final = _mm512_set1_epi64(0);
		for (int j = 0; j < 6; ++j)
		{
			num456789_8_final |= _mm512_slli_epi64(_mm512_srli_epi64(num_456789_8, 54), ((j) * 8));
			num_456789_8 = mul10_1(_mm512_and_epi64(num_456789_8, M54));
		}
		num456789_8_final |= ZERO_8;

		// __m512i num12_345678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(18014398510));
		// __m512i num12_8 = _mm512_srli_epi64(num12_345678_8, 54);
		// __m512i num345_678_8 = _mm512_mullo_epi64(_mm512_and_epi64(num12_345678_8, M54), _mm512_set1_epi64(1000));
		// __m512i num345_8 = _mm512_srli_epi64(num345_678_8, 54);
		// __m512i num678__8 = _mm512_mullo_epi64(_mm512_and_epi64(num345_678_8, M54), _mm512_set1_epi64(1000));
		// __m512i num678_8 = _mm512_srli_epi64(num678__8, 54);

		__m512i num1245678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(7205759404));   // ceil(2**56/1e7)
		__m512i num1245678_8_2 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(3602879702)); // ceil(2**55/1e7)
		__m512i num1245678_final = _mm512_set1_epi64(0);
		__m512i num1245678_final2 = _mm512_set1_epi64(0);
		for (int j = 0; j < 8; ++j)
		{
			num1245678_final |= (_mm512_slli_epi64(_mm512_srli_epi64(num1245678_8, 56), (j * 8)));
			if (1)
			{
				num1245678_8 = mul10_1(_mm512_and_epi64(num1245678_8, M56));
			}
			else
			{
				num1245678_8 = mul10_2(_mm512_and_epi64(num1245678_8, M56));
			}

			num1245678_final2 |= (_mm512_slli_epi64(_mm512_srli_epi64(num1245678_8_2, 55 - j), (j * 8)));
			num1245678_8_2 = mul5(_mm512_and_epi64(num1245678_8_2, _mm512_srai_epi64(M55, j)));
		}
		num1245678_final |= ZERO_8;
		num1245678_final2 |= ZERO_8;
		_mm512_store_epi64(num123, num123_8); // high9
		_mm512_store_epi64(num456, num456_8);
		_mm512_store_epi64(num789, num789_8);
		// _mm512_store_epi64(num12, num12_8); // low8
		// _mm512_store_epi64(num345, num345_8);
		// _mm512_store_epi64(num678, num678_8);
		alignas(64) long long num1245678[8], num89_tmp[8];
		_mm512_store_epi64(num1245678, num1245678_final);
		_mm512_storeu_epi64(num89_tmp, num89_8);
		for (int j = 0; j < group; ++j)
		{
			const long long *exp_ptr3 = &exp_result3[324];
			char *const buffer_char_ptr = (char *)&buffer[i * group + j][every_start_pos[i * group + j]];
			// char *const buffer_char_ptr = (char *)&buffer[i * group + j][ (*(unsigned long long*)&value[i*group+j])>>63 ];

			// *(short *)(buffer_char_ptr) = num0_8[j];
			// *(long long *)(buffer_char_ptr+2) = num12456789_final[j];

			*(int *)(buffer_char_ptr) = digit_000_999[num123[j]];
			*(int *)(buffer_char_ptr + 4) = digit1000e[num456[j]];
			*(int *)(buffer_char_ptr + 7) = digit1000e[num789[j]];

			//*(long long *)(buffer_char_ptr + 4) = digit1000e[num456[j]] | ( ((long long)digit1000e[num789[j]] )<<0);
			//*(int *)(buffer_char_ptr + 7) = digit1000e[num789[j]];
			//*(long long *)(buffer_char_ptr + 4) = num456789_8_final[j];
			//_mm_shuffle_epi32( _mm_set_epi64x( num456789_8_final[j] , digit_000_999[num123[j]] ) ,);
			//_mm_storeu_si128( (__m128i*)buffer_char_ptr, _mm_set_epi64x( num456789_8_final[j] , digit_000_999[num123[j]] ));

			//*(int *)(buffer_char_ptr) = digit_00_99[num12_high9_8[j]];
			//*(long long *)(buffer_char_ptr + 3) = num12456789_final[j];

			//*(long long *)(buffer_char_ptr) = num12456789_final2[j];
			//*(short *)(buffer_char_ptr+8) = short_array[num89_8[j]];
			//*(unsigned short *)(buffer_char_ptr + 8) = (num89_tmp[j]);

			//*(int *)(buffer_char_ptr + 7) = digit1000e[num789[j]];

			// *(short *)(buffer_char_ptr + 10) = short_array[num12[j]];
			// *(int *)(buffer_char_ptr + 12) = digit1000e[num345[j]];
			// *(int *)(buffer_char_ptr + 15) = digit1000e[num678[j]];

			//*(long long *)(buffer_char_ptr + 10) = num1245678_final[j];
			//*(long long *)(buffer_char_ptr + 10) = num1245678[j];
			//*(long long *)&buffer[i * group + j][every_start_pos[i * group + j] + 18] = exp_ptr3[e10[i * group + j]];

			_mm_storeu_si128((__m128i *)(buffer_char_ptr + 10), _mm_set_epi64x(exp_ptr3[e10[i * group + j]], num1245678[j])); // write 16byte

			//*(long long *)(buffer_char_ptr + 10) = num1245678_final2[j];
		}
	}
}
#endif
template <int t = 0, int Precision = 16, int All_double = 32, int Num_per_row = 3>
__attribute__((always_inline)) void my_dou_to_sci_avx512_pure9(double *value, char **buffer)
{
	const int group = 8;						// avx512 = 8 double
	const int group_count = All_double / group; // 4 = 32/8
	__m512i value_abs_i8[group_count];			// abs(value)
	__m512i value_f_8[group_count];
	__m512i value_e2_8[group_count];
	__m512i value_e10_8[group_count];
	__m512i value_write_ptr_8[group_count];
	long long e10[All_double];
	char *value_write_ptr[All_double];
	__m512i value_i_8[group_count];
	__m512i ieee754_exp11_8[group_count];
	__mmask8 cmp_result_8[group_count];
	__m512i tmp_8[group_count];
	__m512i clz_8[group_count];
	__m512i high9_8[group_count], low8_8[group_count];
	__m512i pow10_f_8[group_count];
	__m512i a[group_count], b[group_count], c[group_count], d[group_count];
	__m512i ac[group_count], ad[group_count], bc[group_count];
	__m512i res_f_8[group_count], num0_rest_8[group_count], num0_rest_8_1[group_count];
	__m512i e10_temp_8[group_count];
	__m512i nres_e_8[group_count], nres_e_8_compute1[group_count], nres_e_8_compute2[group_count];
	__mmask8 cmp_lt_E16_8[group_count];


	FORI value_i_8[i] = _mm512_loadu_epi64(&value[i * group]);
	FORI value_abs_i8[i] = _mm512_and_epi64(value_i_8[i], _mm512_set1_epi64(((1ull << 63) - 1)));
	//FORI value_abs_i8[i] = _mm512_andnot_epi64(_mm512_set1_epi64(((1ull << 63))), value_i_8[i]);
	FORI ieee754_exp11_8[i] = _mm512_srli_epi64((value_abs_i8[i]), 52);
	// FORI value_write_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), _mm512_srli_epi64(value_i_8[i], 63));
	// FORI _mm512_storeu_epi64(&value_write_ptr[i * group], value_write_ptr_8[i]);
	FORI clz_8[i] = _mm512_max_epi64(_mm512_lzcnt_epi64((value_abs_i8[i])), _mm512_set1_epi64(11));
	FORI cmp_result_8[i] = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1)); // !=0  equal  >=1
	FORI tmp_8[i] = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8[i]), _mm512_set1_epi64(-1011)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	FORI value_e2_8[i] = _mm512_mask_sub_epi64(tmp_8[i], cmp_result_8[i], tmp_8[i], _mm512_set1_epi64(1));
	FORI e10_temp_8[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18); // = floor(value_e2*log10(2))
	const int one_zero = 0;																					 // 0 or 1 can be right; set 0 can be fast
	FORI value_e10_8[i] = _mm512_add_epi64(e10_temp_8[i], _mm512_set1_epi64(one_zero));
	const unsigned long long *powers_ptr = &powers_ten_reverse[343 + 1 - one_zero - Precision]; // 343 - 15
	FORI pow10_f_8[i] = _mm512_i64gather_epi64(value_e10_8[i], powers_ptr, sizeof(unsigned long long)); // very low speed instruction;
	FORI nres_e_8[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
										_mm512_srai_epi64(_mm512_mullo_epi64(
															  _mm512_sub_epi64(_mm512_set1_epi64(Precision + one_zero - 1),
																			   value_e10_8[i]),
															  _mm512_set1_epi64(1741647)),
														  19)); // -(e2-63 + ((16-e10)*1741647>>19)-63 + 64) = 62 - e2 - ((16-e10)*1741647>>19) , (num*1741647)>>19 = floor(num * log2(10))
	FORI value_write_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), _mm512_srli_epi64(value_i_8[i], 63));
	FORI _mm512_storeu_epi64(&value_write_ptr[i * group], value_write_ptr_8[i]);
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64((value_abs_i8[i]), clz_8[i]), cmp_result_8[i],
											 _mm512_sllv_epi64((value_abs_i8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
#if 1
	const __m512i M32 = _mm512_set1_epi64(0xFFFFFFFFull);
	FORI a[i] = _mm512_srli_epi64(value_f_8[i], 32);
	FORI c[i] = _mm512_srli_epi64(pow10_f_8[i], 32);
	FORI ac[i] = _mm512_mul_epu32(a[i], c[i]);
	FORI bc[i] = _mm512_mul_epu32(value_f_8[i], c[i]);// b = value_f_8 & M32
	FORI ad[i] = _mm512_mul_epu32(a[i], pow10_f_8[i]);// d = pow10_f_8 & M32
	FORI res_f_8[i] = _mm512_add_epi64(ac[i], _mm512_add_epi64(_mm512_srli_epi64(ad[i], 32),
															   _mm512_srli_epi64(bc[i], 32))); // ac+ (ad>>32) + (bc>>32) ;
#else																						   // not finish
	// FORI res_f_8[i] = _mm512_madd52hi_epu64(_mm512_set1_epi64(0), _mm512_srli_epi64(value_f_8[i], 12), _mm512_srli_epi64(pow10_f_8[i], 12)) << 12;
	// FORI res_f_8[i] = _mm512_madd52hi_epu64(_mm512_srli_epi64(pow10_f_8[i], 12),_mm512_srli_epi64(value_f_8[i], 12), _mm512_srli_epi64(pow10_f_8[i], 12)) << 12;
	// FORI res_f_8[i] = _mm512_madd52hi_epu64(_mm512_srli_epi64(pow10_f_8[i], 11),value_i_8[i], _mm512_srli_epi64(pow10_f_8[i], 12)) << 12;
#endif
	
	FORI num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f_8[i], _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e_8[i])), nres_e_8[i]); // round
	FORI num0_rest_8_1[i] = _mm512_srlv_epi64(_mm512_add_epi64(_mm512_srli_epi64(res_f_8[i], 1), _mm512_srli_epi64(res_f_8[i], 3)) +
												  _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), _mm512_sub_epi64(nres_e_8[i], _mm512_set1_epi64(4))),
											  _mm512_sub_epi64(nres_e_8[i], _mm512_set1_epi64(4)));
	FORI cmp_lt_E16_8[i] = _mm512_cmplt_epi64_mask(num0_rest_8[i], _mm512_set1_epi64((unsigned long long)1e16)); // < 1e16
	FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp_lt_E16_8[i], value_e10_8[i], _mm512_set1_epi64(1));
	FORI num0_rest_8[i] = _mm512_mask_blend_epi64(cmp_lt_E16_8[i], num0_rest_8[i], num0_rest_8_1[i]);
	FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask((value_abs_i8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0))); // 0=0e0
	FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),		  // round down
														_mm512_set1_pd(1e-8 /* _10en[-Precision + 8 + 324] */)));									  // 1e17/1e8 = 9 digit
	FORI low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8 /*int64_t(_10en[Precision - 8 + 324]*/))); // 1e17%1e8 = 8 digit
#if 0
	if (0)
		for (int i = 0; i < group_count; ++i)
		{
			const long long *exp_ptr = &exp_result3[324];
			const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30
			const __m512i M48 = _mm512_set1_epi64((1ull << 48) - 1);
			const __m512i M54 = _mm512_set1_epi64((1ull << 54) - 1);
			const __m512i M56 = _mm512_set1_epi64((1ull << 56) - 1);
			const __m512i L8 = _mm512_set1_epi64(0xFF00000000000000ull); // 8
			const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);
			const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);

			// high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),
			// 												_mm512_set1_pd(_10en[-Precision + 8 + 324])));// 1e17/1e8=1e9
			// low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(int64_t(_10en[Precision - 8 + 324]))));//1e17%1e8
			__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(18014398510ull)); // ceil(2**54/1e6)
			__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
			__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000)); // 1000 < 2**10
			//__m512i num456_789_8 = mul1000(_mm512_and_epi64(num123_456789_8, M54));
			__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
			__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
			//__m512i num789__8 = mul1000(_mm512_and_epi64(num456_789_8, M54));
			__m512i num789_8 = _mm512_srli_epi64(num789__8, 54);
			alignas(64) long long num123[8], num456[8], num789[8];
			_mm512_store_epi64(num123, num123_8); // high9
			_mm512_store_epi64(num456, num456_8);
			_mm512_store_epi64(num789, num789_8);

			__m512i num456789_merge = _mm512_or_epi64(_mm512_slli_epi64(num789_8, 32), num456_8);
			__m512i num1_8 = (high9_8[i] * 1441151881) >> 57;
			__m512i num1_8_write = num1_8 | (('.' << 8) + '0');
			__m512i num23456789_8 = high9_8[i] - num1_8 * _mm512_set1_epi64(1e8);
			__m512i num789_final = _mm512_set1_epi64(0x303030ull);
			__m512i num789_8_new = num456_789_8;
			alignas(64) long long num789_f[8];
			_mm512_store_epi64(num789_f, num789_final);

			// __m512i num12_345678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(18014398510));
			// __m512i num12_8 = _mm512_srli_epi64(num12_345678_8, 54);
			// __m512i num345_678_8 = _mm512_mullo_epi64(_mm512_and_epi64(num12_345678_8, M54), _mm512_set1_epi64(1000));
			// __m512i num345_8 = _mm512_srli_epi64(num345_678_8, 54);
			// __m512i num678__8 = _mm512_mullo_epi64(_mm512_and_epi64(num345_678_8, M54), _mm512_set1_epi64(1000));
			// __m512i num678_8 = _mm512_srli_epi64(num678__8, 54);

			__m512i num1245678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(7205759404ull)); // ceil(2**56/1e7)
			__m512i num1245678_final_8 = DIGIT_ZERO_8;
			// 28147497672 ,2**48/1e4
			// 16778 2**24/1e3
			for (int j = 0; j < 8; ++j)
			{
				if (j == 7)
					num1245678_final_8 = _mm512_or_epi64(num1245678_final_8, _mm512_and_epi64(num1245678_8, L8));
				// num1245678_final_8 = _mm512_mask_ternarylogic_epi64(num1245678_8, 0xFF, L8, num1245678_final_8, 0b11101010);//0b11101010  (a and b) or c
				else
					num1245678_final_8 = _mm512_or_epi64(num1245678_final_8, _mm512_srli_epi64(_mm512_and_epi64(num1245678_8, L8), 56 - (j * 8)));
				num1245678_8 = mul10_2(_mm512_and_epi64(num1245678_8, M56));
			}

			__m512i num1234_5678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
			__m512i num1234_8 = _mm512_srli_epi64(num1234_5678_8, 48);
			//__m512i num5678_8 = _mm512_srli_epi64((num1234_5678_8 & M48) * 10000ull ,48);
			//__m512i num5678_8 = low8_8[i] - num1234_8 * 10000ull ;
			__m512i num5678_8 = _mm512_sub_epi64(low8_8[i], _mm512_mullo_epi64(num1234_8, _mm512_set1_epi64(10000)));
			//__m512i num5678_1234_merge = _mm512_or_epi64( _mm512_slli_epi64(num5678_8,32 ) , num1234_8);
			__m512i num5678_1234_merge = _mm512_mask_shuffle_epi32(num1234_8, (__mmask16)0b1010101010101010, num5678_8, _MM_PERM_CAAA);
			__m512i num_tmp = _mm512_mullo_epi32(num5678_1234_merge, _mm512_set1_epi32(16778));
			__m512i num_final = _mm512_set1_epi32(0x30303030);

			// __m512i num2345_6789_8 = _mm512_mullo_epi64(num23456789_8, _mm512_set1_epi64(28147497672ull));//2**48/1e4
			// __m512i num2345_8 = _mm512_srli_epi64( num2345_6789_8, 48);
			// __m512i num6789_8 = _mm512_srli_epi64((num2345_6789_8 & M48) * 10000ull ,48);
			// //__m512i num6789_8 = num2345_6789_8 - num2345_8 * 10000ull ;
			// __m512i num6789_2345_merge = _mm512_or_epi64( _mm512_slli_epi64(num6789_8,32 ) , num2345_8);
			// __m512i num_tmp_1 =  _mm512_mullo_epi32( num6789_2345_merge , _mm512_set1_epi32(16778) );//2**24/1e3
			// __m512i num_final_high9 = _mm512_set1_epi32( 0x30303030 );
			//_mm512_andnot_epi64(a,b)  ;  (not a) & b

			for (int j = 0; j < 4; ++j)
			{
				num_final |= ((num_tmp & L8_16) >> (24 - (j * 8)));
				// num_tmp = _mm512_mullo_epi32( _mm512_andnot_epi32( L8_16 , num_tmp ) , _mm512_set1_epi32(10) );
				num_tmp = _mm512_mullo_epi32(_mm512_and_epi32(M24_16, num_tmp), _mm512_set1_epi32(10));
				//__m512i num_tmp_2 = _mm512_and_epi32( M24_16 , num_tmp ) ;
				// num_tmp = _mm512_slli_epi32(num_tmp_2 , 3) + num_tmp_2 + num_tmp_2;
				// num_tmp = _mm512_mul_epu32( _mm512_andnot_epi32( L8_16 , num_tmp ) , _mm512_set1_epu32(10u) );
				// num_tmp = (num_tmp&M24_16)*10;

				// num_final_high9 |= ((num_tmp_1&L8_16) >> (24-(j*8)) );
				// num_tmp_1 = (num_tmp_1 & M24_16)*10;
			}
			// num_final |= num_tmp;
			for (int j = 0; j < 4; ++j)
			{
				// num_final_high9 |= ((num_tmp_1&L8_16) >> (24-(j*8)) );
				// num_tmp_1 = (num_tmp_1 & M24_16)*10;
			}

			alignas(64) long long num12345678[8];
			_mm512_store_epi64(num12345678, num_final);
			// alignas(64) long long num23456789[8];
			//_mm512_store_epi64(num23456789, num_final_high9);
			//_mm512_store_epi64(num1245678, num1245678_final_8);
			for (int j = 0; j < group; ++j)
			{

				char *const buf_ptr = (char *)&buffer[i * group + j][is_negative[i * group + j]];
				// char *const buf_ptr = (char *)&buffer[i * group + j][0];

				*(int *)(buf_ptr) = digit_000_999[num123[j]];
				*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
				*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
				// *(int *)(buf_ptr) = 0;
				// *(long long *)(buf_ptr+4) = 0;

				// *(short *)(buf_ptr) = num1[j];
				// *(long long *)(buf_ptr+2) = num_rest[j];

				//__m128i num_pre = _mm_set_epi64x(num1_8_write[j],num23456789[j]);
				//*(short *)(buf_ptr) = num1_8_write[j];
				//*(long long *)(buf_ptr + 2) = num23456789[j];
				//_mm_storeu_si128((__m128i *)(buf_ptr),num_pre);

				//*(int *)(buf_ptr + 7) = num789_f[j];
				//*(long long *)(buf_ptr + 4) = digit1000e[num456[j]] | digit1000e[num789[j]];
				//_mm_set_epi32( 0,digit1000e[num789[j]], digit1000e[num456[j]],digit_000_999[num123[j]] );
				//_mm_storeu_si128( (__m128i *)buf_ptr, _mm_set_epi32( 0,digit1000e[num789[j]], digit1000e[num456[j]],digit_000_999[num123[j]] )  );
				// getcycle();
				_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[i * group + j]], num12345678[j])); // write 16byte
																														  //*(long long *)(buf_ptr + 10) = num12345678[j];
																														  //*(long long *)(buf_ptr + 18) = exp_ptr[e10[i * group + j]];

				//_mm_storeu_si128((__m128i *)(buf_ptr + 2), _mm_set_epi64x(num12345678[j], num23456789[j] ));

				// getcycle();
			}
		}
#endif
	if(0)
	for (int i = 0; i < group_count / 2; ++i)
	{
		const long long *exp_ptr = &exp_result3[324 + 1 - one_zero];
		// const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
		const __m512i M54 = _mm512_set1_epi64((1ull << 54) - 1); // low 54 bit
		// const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);//not use
		const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u); // high 8 bit

		__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i * 2 + 0], _mm512_set1_epi64(18014398510ull));   // ceil(2**54/1e6)
		__m512i num123_456789_8_2 = _mm512_mullo_epi64(high9_8[i * 2 + 1], _mm512_set1_epi64(18014398510ull)); // ceil(2**54/1e6)
		__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
		__m512i num123_8_2 = _mm512_srli_epi64(num123_456789_8_2, 54);
		__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000));		// 1000 < 2**10
		__m512i num456_789_8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8_2, M54), _mm512_set1_epi64(1000)); // 1000 < 2**10
		__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
		__m512i num456_8_2 = _mm512_srli_epi64(num456_789_8_2, 54);
		__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
		__m512i num789__8_2 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8_2, M54), _mm512_set1_epi64(1000));
		__m512i num789_8 = _mm512_srli_epi64(num789__8, 54);
		__m512i num789_8_2 = _mm512_srli_epi64(num789__8_2, 54);

		long long num123[8], num456[8], num789[8];
		long long num123_2[8], num456_2[8], num789_2[8];

		_mm512_storeu_epi64(num123, num123_8);
		_mm512_storeu_epi64(num456, num456_8);
		_mm512_storeu_epi64(num789, num789_8);
		_mm512_storeu_epi64(num123_2, num123_8_2);
		_mm512_storeu_epi64(num456_2, num456_8_2);
		_mm512_storeu_epi64(num789_2, num789_8_2);

		__m512i num1234_5678_8 = _mm512_mullo_epi64(low8_8[i * 2 + 0], _mm512_set1_epi64(28147497672ull));	 // 2**48/1e4
		__m512i num1234_5678_8_2 = _mm512_mullo_epi64(low8_8[i * 2 + 1], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
		__m512i num1234_8 = _mm512_srli_epi64(num1234_5678_8, 48);
		__m512i num1234_8_2 = _mm512_srli_epi64(num1234_5678_8_2, 48);
		__m512i num5678_8 = _mm512_sub_epi64(low8_8[i * 2 + 0], _mm512_mullo_epi64(num1234_8, _mm512_set1_epi64(10000)));
		__m512i num5678_8_2 = _mm512_sub_epi64(low8_8[i * 2 + 1], _mm512_mullo_epi64(num1234_8_2, _mm512_set1_epi64(10000)));
		//__m512i num5678_1234_merge = _mm512_or_epi64( _mm512_slli_epi64(num5678_8,32 ) , num1234_8);
		//__m512i num5678_1234_merge_2 = _mm512_or_epi64( _mm512_slli_epi64(num5678_8_2,32 ) , num1234_8_2);
		__m512i num5678_1234_merge = _mm512_mask_shuffle_epi32(num1234_8, (__mmask16)0b1010101010101010, num5678_8, _MM_PERM_CAAA);
		__m512i num5678_1234_merge_2 = _mm512_mask_shuffle_epi32(num1234_8_2, (__mmask16)0b1010101010101010, num5678_8_2, _MM_PERM_CAAA);
		__m512i num_tmp = _mm512_mullo_epi32(num5678_1234_merge, _mm512_set1_epi32(16778));
		__m512i num_tmp_2 = _mm512_mullo_epi32(num5678_1234_merge_2, _mm512_set1_epi32(16778));
		__m512i num_final = _mm512_set1_epi32(0x30303030);
		__m512i num_final_2 = _mm512_set1_epi32(0x30303030);
		for (int j = 0; j < 4; ++j)
		{
			num_final = _mm512_or_epi32(num_final, _mm512_srli_epi32(_mm512_and_epi32(num_tmp, L8_16), 24 - j * 8));
			num_final_2 = _mm512_or_epi32(num_final_2, _mm512_srli_epi32(_mm512_and_epi32(num_tmp_2, L8_16), 24 - j * 8));
			// num_tmp = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp ) , _mm512_set1_epi32(10) );
			// num_tmp_2 = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp_2 ) , _mm512_set1_epi32(10) );
			num_tmp = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp), _mm512_set1_epi32(10));
			num_tmp_2 = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp_2), _mm512_set1_epi32(10)); //_mm512_andnot_epi64(a,b); (not a) & b
		}
		long long num12345678[8];
		long long num12345678_2[8];
		_mm512_storeu_epi64(num12345678, num_final);
		_mm512_storeu_epi64(num12345678_2, num_final_2);
		//__m512i NULL_8 = _mm512_undefined_epi32();
		// __m128i num123_84[4];
		// num123_84[0] = _mm512_extracti32x4_epi32(num123,0);
		// num123_84[1] = _mm512_extracti32x4_epi32(num123,1);
		// num123_84[2] = _mm512_extracti32x4_epi32(num123,2);
		// num123_84[3] = _mm512_extracti32x4_epi32(num123,3);
		// const __m512i idx_32x16bit = _mm512_set_epi16(
		// 		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		// 		0+4*7,
		// 		0+4*6,
		// 		0+4*5,
		// 		0+4*4,
		// 		0+4*3,
		// 		0+4*2,
		// 		0+4*1,
		// 		0+4*0);
		// __m128i num123_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num123_8 ));
		// __m128i num456_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num456_8 ));
		// __m128i num789_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num789_8 ));
		// __m128i num123_2_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num123_8_2 ));
		// __m128i num456_2_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num456_8_2 ));
		// __m128i num789_2_8x16bit = _mm512_castsi512_si128(_mm512_permutexvar_epi16(idx_32x16bit ,num789_8_2 ));
		// printf("num0 =  %d\n",_mm_extract_epi16(num123_8x16bit,0));
		// printf("num1 =  %d\n",_mm_extract_epi16(num123_8x16bit,1));
		// printf("num2 =  %d\n",_mm_extract_epi16(num123_8x16bit,2));
		// printf("num3 =  %d\n",_mm_extract_epi16(num123_8x16bit,3));
		// printf("num4 =  %d\n",_mm_extract_epi16(num123_8x16bit,4));
		// printf("num5 =  %d\n",_mm_extract_epi16(num123_8x16bit,5));
		// printf("num6 =  %d\n",_mm_extract_epi16(num123_8x16bit,6));
		// printf("num7 =  %d\n",_mm_extract_epi16(num123_8x16bit,7));
		//_mm512_i64scatter_epi64(_mm512_set1_epi64(0), );
		for (int j = 0; j < group; ++j)
		{
			{
				char *buf_ptr = value_write_ptr[i * 2 * group + j];
				*(int *)(buf_ptr) = digit_000_999[num123[j]]; // extract
				//*(int *)(buf_ptr) = digit_000_999[ _mm_extract_epi64(_mm512_castsi512_si128(num123_8),0)];
				//*(int *)(buf_ptr) = digit_000_999[ (long long)_mm_extract_epi16(num123_8x16bit,0)];
				// printf(" %d %d \n",_mm_extract_epi64(_mm512_castsi512_si128(num123_8),0) ,_mm_extract_epi16(num123_8x16bit,0));

				*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
				//*(int *)(buf_ptr + 4) = digit1000e[(long long)_mm_extract_epi16(num456_8x16bit,0)];
				//*(int *)(buf_ptr + 4) = digit1000e[_mm_extract_epi64(_mm512_castsi512_si128(num456_8),0)];
				*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
				//*(int *)(buf_ptr + 7) = digit1000e[(long long)_mm_extract_epi16(num789_8x16bit,0)];
				//*(int *)(buf_ptr + 7) = digit1000e[_mm_extract_epi64(_mm512_castsi512_si128(num789_8),0)];
				//*(int *)(buf_ptr + 7) = num789[j];
				_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr[e10[2 * i * group + j]], num12345678[j])); // write 16byte
																															  //*(long long*)(buf_ptr + 10) = num12345678[j];
																															  // num123_8 = _mm512_alignr_epi64(NULL_8,num123_8,1);
																															  // num456_8 = _mm512_alignr_epi64(NULL_8,num456_8,1);
																															  // num789_8 = _mm512_alignr_epi64(NULL_8,num789_8,1);
																															  // num123_8x16bit = _mm_srli_si128(num123_8x16bit,2);// >> 16bit
																															  // num456_8x16bit = _mm_srli_si128(num456_8x16bit,2);// >> 16bit
																															  // num789_8x16bit = _mm_srli_si128(num789_8x16bit,2);// >> 16bit
			}
		}
		for (int j = 0; j < group; ++j)
		{
			{
				char *buf_ptr2 = value_write_ptr[(i * 2 + 1) * group + j];
				*(int *)(buf_ptr2) = digit_000_999[num123_2[j]];
				//*(int *)(buf_ptr2) = digit_000_999[ (long long)_mm_extract_epi16(num123_2_8x16bit,0)];
				//*(int *)(buf_ptr2) = digit_000_999[ _mm_extract_epi64(_mm512_castsi512_si128(num123_8_2),0) ];
				*(int *)(buf_ptr2 + 4) = digit1000e[num456_2[j]];
				//*(int *)(buf_ptr2 + 4) = digit1000e[(long long)_mm_extract_epi16(num456_2_8x16bit,0)];
				//*(int *)(buf_ptr2 + 4) = digit1000e[_mm_extract_epi64(_mm512_castsi512_si128(num456_8_2),0)];
				*(int *)(buf_ptr2 + 7) = digit1000e[num789_2[j]];
				//*(int *)(buf_ptr2 + 7) = digit1000e[(long long)_mm_extract_epi16(num789_2_8x16bit,0)];
				//*(int *)(buf_ptr2 + 7) = digit1000e[_mm_extract_epi64(_mm512_castsi512_si128(num789_8_2),0)];
				//*(int *)(buf_ptr2 + 7) = num789_2[j];
				_mm_storeu_si128((__m128i *)(buf_ptr2 + 10), _mm_set_epi64x(exp_ptr[e10[(i * 2 + 1) * group + j]], num12345678_2[j])); // write 16byte
																																	   //*(long long*)(buf_ptr2 + 10) = num12345678_2[j];
																																	   // num123_8_2 = _mm512_alignr_epi64(NULL_8,num123_8_2,1);
																																	   // num456_8_2 = _mm512_alignr_epi64(NULL_8,num456_8_2,1);
																																	   // num789_8_2 = _mm512_alignr_epi64(NULL_8,num789_8_2,1);
																																	   // num123_2_8x16bit = _mm_srli_si128(num123_2_8x16bit,2);// >> 16bit
																																	   // num456_2_8x16bit = _mm_srli_si128(num456_2_8x16bit,2);// >> 16bit
																																	   // num789_2_8x16bit = _mm_srli_si128(num789_2_8x16bit,2);// >> 16bit
			}
		}
	}
	
	FORI FORJ buffer[i * group + j][0] = '-';
	using u64 = unsigned long long;
	using i64 = long long;
	const long long *exp_ptr = &exp_result3[324 + 1 - one_zero];
    for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)
#define FORJ2 for (int j = 0; j < 2; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1); // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);    // high 8 bit in 32bit

        __m512i num1[2];
        __m512i num_low16[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num1_print[8*2];// "1."
        u64 num_low16_print[8 * 4];// low16 digtit
        u64 offset[8*2];//18-tz-(tz==16)

        FORJ2 num1[j] = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + j], _mm512_set1_epi64(1441151881)), 57);// 1441151881 = 2**57 / 1e8
        FORJ2 _mm512_storeu_epi64(&num1_print[j*8], _mm512_or_epi64(num1[j], _mm512_set1_epi64('.' * 256 + '0')));// num1 | ('.' * 256 + '0')
        FORJ2 num_low16[j] = _mm512_sub_epi64(high9_8[i * 2 + j], _mm512_mullo_epi64(num1[j], _mm512_set1_epi64(1e8)));// num_2_9 = high9 - num1*1e8
        FORJ2 num_low16[2+j] = low8_8[i * 2 + j];//num_10_17 = low8

        FORJ4 num1234_8[j] = _mm512_srli_epi64(_mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)), 48);// num1234 = num_low8 / 1e4 = num_low8 * 28147497672 >> 48
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000)));// num5678 = num_low8 - num1234*1e4
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
        //FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);//another way
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778)); // num1234 / 1e3 = num1234 * 16778 >> 24
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10));// ((!L8) & num_tmp) * 10
            //FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_low16_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));

        FORJ
        {
                char *buf_ptr1 = value_write_ptr[i * 2 * group + j];
                *(u64 *)(buf_ptr1) = num1_print[j]; // write 8 byte but only low 2 byte use;
                _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_low16_print[2 * 8 + j], num_low16_print[0 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr1 + 18) = exp_ptr[e10[2 * i * group + j]];

                char *buf_ptr2 = value_write_ptr[(i * 2 + 1) * group + j];
                *(u64 *)(buf_ptr2) = num1_print[8+j];
                _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_low16_print[3 * 8 + j], num_low16_print[1 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr2 + 18) = exp_ptr[e10[(2 * i + 1) * group + j]];
        }
    }
}

#if 0
template <int t = 0, int Precision = 16, int All_double = 32, int Num_per_row = 3>
void my_dou_to_sci_avx512_pure10(const double *value, char **buffer)
{
	using ull = unsigned long long;
	using ll = long long;
	const int rest = 0;					// All_double - 32;
	const int group = 8;				// avx512 = 8 double
	const int group_count = 32 / group; // 4 = 32/8
	__m512d value_abs_d8[group_count];
	double value_abs_d[rest];
	__m512i value_f_8[group_count];
	ull value_f[rest];
	__m512i value_e2_8[group_count];
	ll value_e2[rest];
	__m512i value_e10_8[group_count];
	ll value_e10[rest];
	long long e10[32 + rest];
	long long every_start_pos[32 + rest];
	__m512i value_i8[group_count];
	ll value_i8_s[rest];
	__m512i ieee754_exp11_8[group_count];
	ll ieee754_exp11[rest];
	__mmask8 cmp_result_8[group_count];
	ull cmp_result[rest];
	__m512i tmp_8[group_count];
	ll tmp[rest];
	__m512i clz_8[group_count];
	int clz[rest];

	FORI value_i8[i] = _mm512_loadu_epi64(&value[i * group]);
	FORR value_i8_s[i] = *(ll *)&value[32 + i];
	FORI value_abs_d8[i] = _mm512_castsi512_pd(_mm512_and_epi64(value_i8[i], _mm512_set1_epi64(((1ull << 63) - 1))));
	FORR *(long long *)&value_abs_d[i] = (value_i8_s[i] & ((1ull << 63) - 1));
	FORI ieee754_exp11_8[i] = _mm512_srli_epi64(_mm512_castpd_si512(value_abs_d8[i]), 52);
	FORR ieee754_exp11[i] = (*(long long *)&value_abs_d[i]) >> 52;
	FORI _mm512_storeu_epi64(&every_start_pos[i * group], _mm512_srli_epi64(value_i8[i], 63));
	FORI clz_8[i] = _mm512_max_epi64(_mm512_lzcnt_epi64(_mm512_castpd_si512(value_abs_d8[i])), _mm512_set1_epi64(11));
	FORR clz[i] = std::max((int)__builtin_clzll((*(long long *)&value_abs_d[i])), (int)11);
	FORI cmp_result_8[i] = _mm512_cmpge_epi64_mask(ieee754_exp11_8[i], _mm512_set1_epi64(1));
	FORR cmp_result[i] = (ieee754_exp11[i] >= 1);
	// FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), cmp_result[i],
	// 										 _mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i]), _mm512_set1_epi64(1ull << 63));
	FORI tmp_8[i] = _mm512_add_epi64(_mm512_sub_epi64(ieee754_exp11_8[i], clz_8[i]), _mm512_set1_epi64(1 - 1023 + 11)); //(ieee754_exp11_8[i] + 1 - 1023 + 11 - clz_8);
	FORR tmp[i] = ieee754_exp11[i] - clz[i] + (1 - 1023 + 11);
	FORI value_e2_8[i] = _mm512_mask_sub_epi64(tmp_8[i], cmp_result_8[i], tmp_8[i], _mm512_set1_epi64(1));
	FORR value_e2[i] = tmp[i] - cmp_result[i];
	FORI FORJ buffer[i * group + j][0] = '-';
	FORR buffer[32 + i][0] = '-';
	__m512i e10_temp_8[group_count];
	//__m512d pow10_e10_temp_p[group_count];
	//__mmask8 cmp2[group_count];
	__m512i nres_e_8[group_count];
	int nres_e[rest];
	FORI e10_temp_8[i] = _mm512_srai_epi64(_mm512_mullo_epi64(value_e2_8[i], _mm512_set1_epi64(78913)), 18); // = floor(value_e2*log10(2))
	// FORI pow10_e10_temp_p[i] = _mm512_i64gather_pd(e10_temp[i], &_10en[324 + 1], sizeof(double));
	// FORI value_e10_8[i] = _mm512_mask_add_epi64(e10_temp[i], _mm512_cmple_pd_mask(pow10_e10_temp_p[i], value_abs_d8[i]), e10_temp[i], _mm512_set1_epi64(1));
	FORI value_e10_8[i] = _mm512_add_epi64(e10_temp_8[i], _mm512_set1_epi64(1));
	FORR value_e10[i] = ((value_e2[i] * 78913ll) >> 18) + 1;
	// FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(_mm512_castpd_si512(value_abs_d8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	//  FORI cmp2[i] = _mm512_cmpeq_epi64_mask(value_abs_i8[i], _mm512_set1_epi64(2));
	//  FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp2[i], value_e10_8[i], _mm512_set1_epi64(1));
	__m512i high9_8[group_count], low8_8[group_count];
	ull high9[rest];
	ull low8[rest];
	__m512i pow10_8_f[group_count];
	ull pow10_f[rest];
	__m512i a[group_count], b[group_count], c[group_count], d[group_count];
	__m512i ac[group_count], ad[group_count], bc[group_count];
	__m512i res_f_8[group_count], num0_rest_8[group_count], num0_rest_8_1[group_count];
	ull res_f[rest], num0_rest[rest], num0_rest_1[rest];
	const int four_zero = 0;
	FORI pow10_8_f[i] = _mm512_i64gather_epi64(value_e10_8[i], &powers_ten_reverse[343 - Precision], sizeof(unsigned long long));
	FORR pow10_f[i] = powers_ten_reverse[343 - Precision + value_e10[i]];
	FORI nres_e_8[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
										_mm512_srai_epi64(_mm512_mullo_epi64(
															  _mm512_sub_epi64(_mm512_set1_epi64(Precision),
																			   value_e10_8[i]),
															  _mm512_set1_epi64(1741647)),
														  19)) -
					   four_zero; // -(e2-63 + ((16-e10)*1741647>>19)-63 + 64) = 62 - e2 - ((16-e10)*1741647>>19) , (num*1741647)>>19 = num * log2(10)    , 7 <= nres_e <= 10
	FORR nres_e[i] = 62 - value_e2[i] - (((Precision - value_e10[i]) * 1741647ll) >> 19);
	// FORI nres_e[i] = _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(62), value_e2_8[i]),
	// 								  _mm512_srai_epi64(_mm512_mullo_epi64(
	// 														_mm512_sub_epi64(_mm512_set1_epi64(Precision-1),
	// 																		 e10_temp[i]),
	// 														_mm512_set1_epi64(1741647)),
	// 													19)); //  62 - e2 - ((16-e10)*1741647>>19) , num*1741647>>19 = num * log2(10)    , 7 <= nres_e <= 10
	FORI value_f_8[i] = _mm512_mask_or_epi64(_mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i] - four_zero), cmp_result_8[i],
											 _mm512_sllv_epi64(_mm512_castpd_si512(value_abs_d8[i]), clz_8[i] - four_zero), _mm512_set1_epi64(1ull << (63 - four_zero)));
	FORR value_f[i] = ((*(ull *)&value_abs_d[i]) << clz[i]) | (cmp_result[i] << 63);
	const __m512i M32 = _mm512_set1_epi64(0xFFFFFFFFull);
	FORI a[i] = _mm512_srli_epi64(value_f_8[i], 32);
	FORI c[i] = _mm512_srli_epi64(pow10_8_f[i], 32);
	FORI b[i] = _mm512_and_epi64(value_f_8[i], M32);
	FORI d[i] = _mm512_and_epi64(pow10_8_f[i], M32);
	FORI ac[i] = _mm512_mul_epu32(a[i], c[i]);
	FORI ad[i] = _mm512_mul_epu32(a[i], d[i]);
	FORI bc[i] = _mm512_mul_epu32(b[i], c[i]);
	FORI res_f_8[i] = _mm512_add_epi64(ac[i], _mm512_add_epi64(_mm512_srli_epi64(ad[i], 32),
															   _mm512_srli_epi64(bc[i], 32))); // ac+ (ad>>32) + (bc>>32) ;
	FORR _mulx_u64(value_f[i], pow10_f[i], &res_f[i]);

	// FORI res_f[i] = _mm512_add_epi64(_mm512_add_epi64(ac[i], _mm512_srli_epi64(ad[i], 32)),
	// 														 _mm512_srli_epi64(bc[i], 32));// ac+ (ad>>32) + (bc>>32) ;
	FORI num0_rest_8[i] = _mm512_srlv_epi64(_mm512_add_epi64(res_f_8[i], _mm512_rolv_epi64(_mm512_set1_epi64(1ull << 63), nres_e_8[i])), nres_e_8[i]); // round
	FORR num0_rest[i] = (res_f[i] + (1ull << (nres_e[i] - 1))) >> nres_e[i];
	// FORI num0_rest_8_1[i] = mul10_1(_mm512_srlv_epi64(res_f[i], nres_e[i])) +
	// 					    _mm512_srlv_epi64 (( _mm512_and_epi64( res_f[i] , (1ull << nres_e[i] ) - 1  ) * 10) , nres_e[i]);
	// FORI num0_rest_8_1[i] = _mm512_srlv_epi64( _mm512_srri_epi64(num0_rest_8[i],4) * 10 , nres_e[i] - 4);
	FORI num0_rest_8_1[i] = mul10_2(_mm512_srlv_epi64(res_f_8[i], nres_e_8[i])) +
							_mm512_srlv_epi64((mul10(_mm512_and_epi64(res_f_8[i],
																	  _mm512_sub_epi64(_mm512_sllv_epi64(_mm512_set1_epi64(1), nres_e_8[i]), _mm512_set1_epi64(1))))),
											  nres_e_8[i]);
	FORR num0_rest_1[i] = ((res_f[i] >> nres_e[i]) * 10) + (((res_f[i] & ((1ull << nres_e[i]) - 1)) * 10) >> nres_e[i]);
	// FORI num0_rest_8_1[i] = _mm512_srlv_epi64(num0_rest_8[i] * 10  , nres_e[i]);
	//  FORI num0_rest_8_1[i] = mul10(_mm512_srlv_epi64(res_f[i], nres_e[i])) +
	//  						_mm512_srlv_epi64((mul10(_mm512_and_epi64(res_f[i],
	//  																  _mm512_sub_epi64(_mm512_sllv_epi64(_mm512_set1_epi64(1), nres_e[i]), _mm512_set1_epi64(1))))),
	//  										  nres_e[i]);
	// FORI num0_rest_8_1[i] = _mm512_set1_epi64(0);
	__mmask8 cmp_le_E16_8[group_count];
	int cmp_le_E16[rest];
	FORI cmp_le_E16_8[i] = _mm512_cmplt_epi64_mask(num0_rest_8[i], _mm512_set1_epi64((unsigned long long)1e16));
	FORR cmp_le_E16[i] = num0_rest[i] < (ull)1e16;
	// FORI FORJ {
	// 	if( (cmp_le_E16[i]>>j) & 1)printf("no nres_e[%d][%d]=%d\n",i,j,nres_e[i][j]);
	// 	else printf("yes nres_e[%d][%d]=%d\n",i,j,nres_e[i][j]);
	// }
	FORI value_e10_8[i] = _mm512_mask_sub_epi64(value_e10_8[i], cmp_le_E16_8[i], value_e10_8[i], _mm512_set1_epi64(1));
	FORR value_e10[i] = value_e10[i] - cmp_le_E16[i];
	FORI num0_rest_8[i] = _mm512_mask_blend_epi64(cmp_le_E16_8[i], num0_rest_8[i], num0_rest_8_1[i]);
	FORR num0_rest[i] = cmp_le_E16[i] ? num0_rest_1[i] : num0_rest[i];
	// FORR printf("num0_rest[%d]=%lld\n",32+i,num0_rest[i]);

	FORI _mm512_storeu_epi64(&e10[i * group], _mm512_mask_blend_epi64(_mm512_cmpeq_epi64_mask(_mm512_castpd_si512(value_abs_d8[i]), _mm512_set1_epi64(0)), value_e10_8[i], _mm512_set1_epi64(0)));
	// FORR e10[32 + i] = (*(ll*)&value_abs_d[i]) == 0 ? 0 : value_e10[i];
	FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(num0_rest_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC),
														_mm512_set1_pd(_10en[-Precision + 8 + 324]))); // 1e17/1e8=1e9
	FORR high9[i] = num0_rest[i] / int(1e8);
	FORI low8_8[i] = _mm512_sub_epi64(num0_rest_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(int64_t(_10en[Precision - 8 + 324])))); // 1e17%1e8
	FORR low8[i] = num0_rest[i] % int(1e8);
	// FORR printf("high9[%d] = %d,low8[%d] = %d\n",32+i,high9[i],32+i,low8[i]);
#pragma unroll(2)
	for (int i = 0; i < group_count; ++i)
	{
		// const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(48ull * (1ull << (8 * 0)) +
		// 											   48ull * (1ull << (8 * 1)) +
		// 											   48ull * (1ull << (8 * 2)) +
		// 											   48ull * (1ull << (8 * 3)) +
		// 											   48ull * (1ull << (8 * 4)) +
		// 											   48ull * (1ull << (8 * 5)) +
		// 											   48ull * (1ull << (8 * 6)) +
		// 											   48ull * (1ull << (8 * 7)));//0x3030303030303030ull
		const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull);
		const __m512i M54_8 = _mm512_set1_epi64((1ull << 54) - 1);
		const __m512i M56_8 = _mm512_set1_epi64((1ull << 56) - 1);
		const __m512i L8_8 = _mm512_set1_epi64(0xFF00000000000000ull); // 8

		const ull M54 = (1ull << 54) - 1;
		const ull M56 = (1ull << 56) - 1;
		const ull L8 = 0xFF00000000000000ull;
		const ull DIGIT_ZERO = 0x3030303030303030ull;

		__m512i num123_456789_8 = _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(18014398510ull)); // ceil(2**54/1e6)
		__m512i num123_8 = _mm512_srli_epi64(num123_456789_8, 54);
		//__m512i num456_789_8 = _mm512_mullo_epi64(_mm512_and_epi64(num123_456789_8, M54), _mm512_set1_epi64(1000)); // 1000 < 2**10
		__m512i num456_789_8 = mul1000(_mm512_and_epi64(num123_456789_8, M54_8)); // 1000 < 2**10
		__m512i num456_8 = _mm512_srli_epi64(num456_789_8, 54);
		//__m512i num789__8 = _mm512_mullo_epi64(_mm512_and_epi64(num456_789_8, M54), _mm512_set1_epi64(1000));
		__m512i num789__8 = mul125(_mm512_and_epi64(num456_789_8, M54_8));
		__m512i num789_8 = _mm512_srli_epi64(num789__8, 51);

		// 		// high9
		// 		ull num123_456789 = high9[i]*18014398510ull;
		// 		ull num123_s = num123_456789 >> 54;
		// 		ull num456_789 = (num123_456789 & M54) * 1000ull;
		// 		ull num456_s = num456_789 >> 54;
		// 		ull num789_= (num456_789 & M54) * 125;
		// 		ull num789_s = num789_ >> 51;

		// 		ull num1245678_s = low8[i] * 7205759404ull; // ceil(2**56/1e7)
		// 		ull num1245678_final = DIGIT_ZERO;
		// #pragma unroll(8)
		// 		for (int j = 0; j < 8; ++j)
		// 		{
		// 			if (j == 7)
		// 				num1245678_final |= (num1245678_s & L8);
		// 			else
		// 			    num1245678_final |= ( (num1245678_s & L8) >> (56-(j*8)) );
		// 			num1245678_s = (num1245678_s & M56)*10ull;
		// 		}

		alignas(64) long long num123[8], num456[8], num789[8];
		_mm512_store_epi64(num123, num123_8); // high9
		_mm512_store_epi64(num456, num456_8);
		_mm512_store_epi64(num789, num789_8);

		// __m512i num12_345678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(18014398510));
		// __m512i num12_8 = _mm512_srli_epi64(num12_345678_8, 54);
		// __m512i num345_678_8 = _mm512_mullo_epi64(_mm512_and_epi64(num12_345678_8, M54), _mm512_set1_epi64(1000));
		// __m512i num345_8 = _mm512_srli_epi64(num345_678_8, 54);
		// __m512i num678__8 = _mm512_mullo_epi64(_mm512_and_epi64(num345_678_8, M54), _mm512_set1_epi64(1000));
		// __m512i num678_8 = _mm512_srli_epi64(num678__8, 54);

		__m512i num1245678_8 = _mm512_mullo_epi64(low8_8[i], _mm512_set1_epi64(7205759404ull)); // ceil(2**56/1e7)
		__m512i num1245678_final_8 = DIGIT_ZERO_8;
#pragma unroll(8)
		for (int j = 0; j < 8; ++j)
		{
			if (j == 7)
				num1245678_final_8 = _mm512_or_epi64(num1245678_final_8, _mm512_and_epi64(num1245678_8, L8_8));
			// num1245678_final = _mm512_mask_ternarylogic_epi64(num1245678_8, 0xFF, L8, num1245678_final, 0b11101010);//0b11101010  (a and b) or c
			else
				num1245678_final_8 = _mm512_or_epi64(num1245678_final_8, _mm512_srli_epi64(_mm512_and_epi64(num1245678_8, L8_8), 56 - (j * 8)));

			num1245678_8 = mul10_1(_mm512_and_epi64(num1245678_8, M56_8));
		}
		alignas(64) long long num1245678[8];
		_mm512_store_epi64(num1245678, num1245678_final_8);
		for (int j = 0; j < group; ++j)
		{
			const long long *exp_ptr3 = &exp_result3[324];
			char *const buf_ptr = (char *)&buffer[i * group + j][every_start_pos[i * group + j]];
			*(int *)(buf_ptr) = digit_000_999[num123[j]];
			*(int *)(buf_ptr + 4) = digit1000e[num456[j]];
			*(int *)(buf_ptr + 7) = digit1000e[num789[j]];
			_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr3[e10[i * group + j]], num1245678[j])); // write 16byte
		}

		// {
		// 	const long long *exp_ptr3 = &exp_result3[324];
		// 	char *const buf_ptr = (char *)&buffer[32+i][ (*(ull*)&value[32+i]) >> 63];
		// 	*(int *)(buf_ptr) = digit_000_999[num123_s];
		// 	*(int *)(buf_ptr + 4) = digit1000e[num456_s];
		// 	*(int *)(buf_ptr + 7) = digit1000e[num789_s];
		// 	_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr3[  (*(ll*)&value_abs_d[i]) == 0 ? 0 : value_e10[i]  ], num1245678_final)); // write 16byte
		// }
	}
	if (0)
		FORR
		{

			const ull M54 = (1ull << 54) - 1;
			const ull M56 = (1ull << 56) - 1;
			const ull L8 = 0xFF00000000000000ull;
			const ull DIGIT_ZERO = 0x3030303030303030ull;
			// high9
			ull num123_456789 = high9[i] * 18014398510ull;
			ull num123 = num123_456789 >> 54;
			ull num456_789 = (num123_456789 & M54) * 1000ull;
			ull num456 = num456_789 >> 54;
			ull num789_ = (num456_789 & M54) * 125;
			ull num789 = num789_ >> 51;
			// printf("high9: %lld %lld %lld ,low8: ",num123,num456,num789);
			// low8

			ull num1245678 = low8[i] * 7205759404ull; // ceil(2**56/1e7)
			ull num1245678_final = DIGIT_ZERO;
#pragma unroll(8)
			for (int j = 0; j < 8; ++j)
			{
				if (j == 7)
					num1245678_final |= (num1245678 & L8);
				else
					num1245678_final |= ((num1245678 & L8) >> (56 - (j * 8)));
				num1245678 = (num1245678 & M56) * 10ull;
			}
			{
				const long long *exp_ptr3 = &exp_result3[324];
				char *const buf_ptr = (char *)&buffer[32 + i][(*(ull *)&value[32 + i]) >> 63];
				*(int *)(buf_ptr) = digit_000_999[num123];
				*(int *)(buf_ptr + 4) = digit1000e[num456];
				*(int *)(buf_ptr + 7) = digit1000e[num789];
				// for(int j=0;j<8;++j)printf("%c", *(((char*)&num1245678_final) + j) );
				_mm_storeu_si128((__m128i *)(buf_ptr + 10), _mm_set_epi64x(exp_ptr3[(*(ll *)&value_abs_d[i]) == 0 ? 0 : value_e10[i]], num1245678_final)); // write 16byte
			}
		}
}
#endif
static inline unsigned long long dec_length(const unsigned long long v)
{
    // return value [1,16]
    return (v >= 0) +               // 0
           (v >= 10) +              // 1
           (v >= 100) +             // 2
           (v >= 1000) +            // 3
           (v >= 10000) +           // 4
           (v >= 100000) +          // 5
           (v >= 1000000) +         // 6
           (v >= 10000000) +        // 7
           (v >= 100000000) +       // 8
           (v >= 1000000000) +      // 9
           (v >= 10000000000) +     // 10
           (v >= 100000000000) +    // 11
           (v >= 1000000000000) +   // 12
           (v >= 10000000000000) +  // 13
           (v >= 100000000000000) + // 14
           (v >= 1000000000000000)  // 15
        ;
}
static inline void avx512_u64_mul_u64_epu64(__m512i a, __m512i b, __m512i &result_high, __m512i &result_low)
{
    auto add = [](__m512i x, __m512i y) -> __m512i
    { return _mm512_add_epi64(x, y); };
    __m512i M32_8 = _mm512_set1_epi64(0xFFFFFFFFull);
    //
    __m512i a_high = _mm512_srli_epi64(a, 32);
    __m512i b_high = _mm512_srli_epi64(b, 32);
    //
    __m512i high_high = _mm512_mul_epu32(a_high, b_high);
    __m512i high_low = _mm512_mul_epu32(a_high, b);
    __m512i low_high = _mm512_mul_epu32(a, b_high);
    __m512i low_low = _mm512_mul_epu32(a, b);
    //
    __m512i low_high_low = _mm512_and_epi64(low_high, M32_8);
    __m512i low_low_high = _mm512_srli_epi64(low_low, 32);

    high_low = add(high_low, add(low_low_high, low_high_low));
    result_high = add(add(high_high, _mm512_srli_epi64(high_low, 32)), _mm512_srli_epi64(low_high, 32));
    result_low = _mm512_mullo_epi64(a, b);
}
static inline void avx512_u128_mul_u64_epu64(__m512i ah, __m512i al, __m512i b, __m512i &r1, __m512i &r2, __m512i &r3)
{
    // auto add =[](__m512i x, __m512i y)->__m512i{return _mm512_add_epi64(x, y);};
    __m512i high_high, high_low, low_high, low_low;
    avx512_u64_mul_u64_epu64(ah, b, high_high, high_low);
    avx512_u64_mul_u64_epu64(al, b, low_high, low_low);
    r3 = low_low;
    r2 = _mm512_add_epi64(high_low, low_high);
    r1 = _mm512_mask_add_epi64(high_high, _mm512_cmplt_epu64_mask(r2, high_low), high_high, _mm512_set1_epi64(1));
}
static inline __m512i avx512_roundOdd(__m512i ah, __m512i al, __m512i b)
{
    __m512i r1, r2, r3;
    avx512_u128_mul_u64_epu64(ah, al, b, r1, r2, r3);
    // return r1 | (r2 > 1);
    return _mm512_mask_or_epi64(r1, _mm512_cmpgt_epu64_mask(r2, _mm512_set1_epi64(1)), r1, _mm512_set1_epi64(1));
}
static inline __m512i roundOdd(__m512i r1, __m512i r2)
{
    return _mm512_mask_or_epi64(r1, _mm512_cmpgt_epu64_mask(r2, _mm512_set1_epi64(1)), r1, _mm512_set1_epi64(1));
}
void d2s_32v_impl(double* value,char** buffer){
	// base on schubfach algorithm;
    // avx512 implementation;

#define FORI for (int i = 0; i < group_count; ++i)
#define FORJ for (int j = 0; j < group; ++j)
#define M(v) __m512i v[group_count];

	using u64 = unsigned long long;
    using i64 = long long;
    // ASCII : e-324 -> e+308
    const long long exp_result3[308 - (-324) + 1] = {0x3432332d65, 0x3332332d65, 0x3232332d65, 0x3132332d65, 0x3032332d65, 0x3931332d65, 0x3831332d65, 0x3731332d65, 0x3631332d65, 0x3531332d65, 0x3431332d65, 0x3331332d65, 0x3231332d65, 0x3131332d65, 0x3031332d65, 0x3930332d65, 0x3830332d65, 0x3730332d65, 0x3630332d65, 0x3530332d65, 0x3430332d65, 0x3330332d65, 0x3230332d65, 0x3130332d65, 0x3030332d65, 0x3939322d65, 0x3839322d65, 0x3739322d65, 0x3639322d65, 0x3539322d65, 0x3439322d65, 0x3339322d65, 0x3239322d65, 0x3139322d65, 0x3039322d65, 0x3938322d65, 0x3838322d65, 0x3738322d65, 0x3638322d65, 0x3538322d65, 0x3438322d65, 0x3338322d65, 0x3238322d65, 0x3138322d65, 0x3038322d65, 0x3937322d65, 0x3837322d65, 0x3737322d65, 0x3637322d65, 0x3537322d65, 0x3437322d65, 0x3337322d65, 0x3237322d65, 0x3137322d65, 0x3037322d65, 0x3936322d65, 0x3836322d65, 0x3736322d65, 0x3636322d65, 0x3536322d65, 0x3436322d65, 0x3336322d65, 0x3236322d65, 0x3136322d65, 0x3036322d65, 0x3935322d65, 0x3835322d65, 0x3735322d65, 0x3635322d65, 0x3535322d65, 0x3435322d65, 0x3335322d65, 0x3235322d65, 0x3135322d65, 0x3035322d65, 0x3934322d65, 0x3834322d65, 0x3734322d65, 0x3634322d65, 0x3534322d65, 0x3434322d65, 0x3334322d65, 0x3234322d65, 0x3134322d65, 0x3034322d65, 0x3933322d65, 0x3833322d65, 0x3733322d65, 0x3633322d65, 0x3533322d65, 0x3433322d65, 0x3333322d65, 0x3233322d65, 0x3133322d65, 0x3033322d65, 0x3932322d65, 0x3832322d65, 0x3732322d65, 0x3632322d65, 0x3532322d65, 0x3432322d65, 0x3332322d65, 0x3232322d65, 0x3132322d65, 0x3032322d65, 0x3931322d65, 0x3831322d65, 0x3731322d65, 0x3631322d65, 0x3531322d65, 0x3431322d65, 0x3331322d65, 0x3231322d65, 0x3131322d65, 0x3031322d65, 0x3930322d65, 0x3830322d65, 0x3730322d65, 0x3630322d65, 0x3530322d65, 0x3430322d65, 0x3330322d65, 0x3230322d65, 0x3130322d65, 0x3030322d65, 0x3939312d65, 0x3839312d65, 0x3739312d65, 0x3639312d65, 0x3539312d65, 0x3439312d65, 0x3339312d65, 0x3239312d65, 0x3139312d65, 0x3039312d65, 0x3938312d65, 0x3838312d65, 0x3738312d65, 0x3638312d65, 0x3538312d65, 0x3438312d65, 0x3338312d65, 0x3238312d65, 0x3138312d65, 0x3038312d65, 0x3937312d65, 0x3837312d65, 0x3737312d65, 0x3637312d65, 0x3537312d65, 0x3437312d65, 0x3337312d65, 0x3237312d65, 0x3137312d65, 0x3037312d65, 0x3936312d65, 0x3836312d65, 0x3736312d65, 0x3636312d65, 0x3536312d65, 0x3436312d65, 0x3336312d65, 0x3236312d65, 0x3136312d65, 0x3036312d65, 0x3935312d65, 0x3835312d65, 0x3735312d65, 0x3635312d65, 0x3535312d65, 0x3435312d65, 0x3335312d65, 0x3235312d65, 0x3135312d65, 0x3035312d65, 0x3934312d65, 0x3834312d65, 0x3734312d65, 0x3634312d65, 0x3534312d65, 0x3434312d65, 0x3334312d65, 0x3234312d65, 0x3134312d65, 0x3034312d65, 0x3933312d65, 0x3833312d65, 0x3733312d65, 0x3633312d65, 0x3533312d65, 0x3433312d65, 0x3333312d65, 0x3233312d65, 0x3133312d65, 0x3033312d65, 0x3932312d65, 0x3832312d65, 0x3732312d65, 0x3632312d65, 0x3532312d65, 0x3432312d65, 0x3332312d65, 0x3232312d65, 0x3132312d65, 0x3032312d65, 0x3931312d65, 0x3831312d65, 0x3731312d65, 0x3631312d65, 0x3531312d65, 0x3431312d65, 0x3331312d65, 0x3231312d65, 0x3131312d65, 0x3031312d65, 0x3930312d65, 0x3830312d65, 0x3730312d65, 0x3630312d65, 0x3530312d65, 0x3430312d65, 0x3330312d65, 0x3230312d65, 0x3130312d65, 0x3030312d65, 0x39392d65, 0x38392d65, 0x37392d65, 0x36392d65, 0x35392d65, 0x34392d65, 0x33392d65, 0x32392d65, 0x31392d65, 0x30392d65, 0x39382d65, 0x38382d65, 0x37382d65, 0x36382d65, 0x35382d65, 0x34382d65, 0x33382d65, 0x32382d65, 0x31382d65, 0x30382d65, 0x39372d65, 0x38372d65, 0x37372d65, 0x36372d65, 0x35372d65, 0x34372d65, 0x33372d65, 0x32372d65, 0x31372d65, 0x30372d65, 0x39362d65, 0x38362d65, 0x37362d65, 0x36362d65, 0x35362d65, 0x34362d65, 0x33362d65, 0x32362d65, 0x31362d65, 0x30362d65, 0x39352d65, 0x38352d65, 0x37352d65, 0x36352d65, 0x35352d65, 0x34352d65, 0x33352d65, 0x32352d65, 0x31352d65, 0x30352d65, 0x39342d65, 0x38342d65, 0x37342d65, 0x36342d65, 0x35342d65, 0x34342d65, 0x33342d65, 0x32342d65, 0x31342d65, 0x30342d65, 0x39332d65, 0x38332d65, 0x37332d65, 0x36332d65, 0x35332d65, 0x34332d65, 0x33332d65, 0x32332d65, 0x31332d65, 0x30332d65, 0x39322d65, 0x38322d65, 0x37322d65, 0x36322d65, 0x35322d65, 0x34322d65, 0x33322d65, 0x32322d65, 0x31322d65, 0x30322d65, 0x39312d65, 0x38312d65, 0x37312d65, 0x36312d65, 0x35312d65, 0x34312d65, 0x33312d65, 0x32312d65, 0x31312d65, 0x30312d65, 0x39302d65, 0x38302d65, 0x37302d65, 0x36302d65, 0x35302d65, 0x34302d65, 0x33302d65, 0x32302d65, 0x31302d65, 0x30302b65, 0x31302b65, 0x32302b65, 0x33302b65, 0x34302b65, 0x35302b65, 0x36302b65, 0x37302b65, 0x38302b65, 0x39302b65, 0x30312b65, 0x31312b65, 0x32312b65, 0x33312b65, 0x34312b65, 0x35312b65, 0x36312b65, 0x37312b65, 0x38312b65, 0x39312b65, 0x30322b65, 0x31322b65, 0x32322b65, 0x33322b65, 0x34322b65, 0x35322b65, 0x36322b65, 0x37322b65, 0x38322b65, 0x39322b65, 0x30332b65, 0x31332b65, 0x32332b65, 0x33332b65, 0x34332b65, 0x35332b65, 0x36332b65, 0x37332b65, 0x38332b65, 0x39332b65, 0x30342b65, 0x31342b65, 0x32342b65, 0x33342b65, 0x34342b65, 0x35342b65, 0x36342b65, 0x37342b65, 0x38342b65, 0x39342b65, 0x30352b65, 0x31352b65, 0x32352b65, 0x33352b65, 0x34352b65, 0x35352b65, 0x36352b65, 0x37352b65, 0x38352b65, 0x39352b65, 0x30362b65, 0x31362b65, 0x32362b65, 0x33362b65, 0x34362b65, 0x35362b65, 0x36362b65, 0x37362b65, 0x38362b65, 0x39362b65, 0x30372b65, 0x31372b65, 0x32372b65, 0x33372b65, 0x34372b65, 0x35372b65, 0x36372b65, 0x37372b65, 0x38372b65, 0x39372b65, 0x30382b65, 0x31382b65, 0x32382b65, 0x33382b65, 0x34382b65, 0x35382b65, 0x36382b65, 0x37382b65, 0x38382b65, 0x39382b65, 0x30392b65, 0x31392b65, 0x32392b65, 0x33392b65, 0x34392b65, 0x35392b65, 0x36392b65, 0x37392b65, 0x38392b65, 0x39392b65, 0x3030312b65, 0x3130312b65, 0x3230312b65, 0x3330312b65, 0x3430312b65, 0x3530312b65, 0x3630312b65, 0x3730312b65, 0x3830312b65, 0x3930312b65, 0x3031312b65, 0x3131312b65, 0x3231312b65, 0x3331312b65, 0x3431312b65, 0x3531312b65, 0x3631312b65, 0x3731312b65, 0x3831312b65, 0x3931312b65, 0x3032312b65, 0x3132312b65, 0x3232312b65, 0x3332312b65, 0x3432312b65, 0x3532312b65, 0x3632312b65, 0x3732312b65, 0x3832312b65, 0x3932312b65, 0x3033312b65, 0x3133312b65, 0x3233312b65, 0x3333312b65, 0x3433312b65, 0x3533312b65, 0x3633312b65, 0x3733312b65, 0x3833312b65, 0x3933312b65, 0x3034312b65, 0x3134312b65, 0x3234312b65, 0x3334312b65, 0x3434312b65, 0x3534312b65, 0x3634312b65, 0x3734312b65, 0x3834312b65, 0x3934312b65, 0x3035312b65, 0x3135312b65, 0x3235312b65, 0x3335312b65, 0x3435312b65, 0x3535312b65, 0x3635312b65, 0x3735312b65, 0x3835312b65, 0x3935312b65, 0x3036312b65, 0x3136312b65, 0x3236312b65, 0x3336312b65, 0x3436312b65, 0x3536312b65, 0x3636312b65, 0x3736312b65, 0x3836312b65, 0x3936312b65, 0x3037312b65, 0x3137312b65, 0x3237312b65, 0x3337312b65, 0x3437312b65, 0x3537312b65, 0x3637312b65, 0x3737312b65, 0x3837312b65, 0x3937312b65, 0x3038312b65, 0x3138312b65, 0x3238312b65, 0x3338312b65, 0x3438312b65, 0x3538312b65, 0x3638312b65, 0x3738312b65, 0x3838312b65, 0x3938312b65, 0x3039312b65, 0x3139312b65, 0x3239312b65, 0x3339312b65, 0x3439312b65, 0x3539312b65, 0x3639312b65, 0x3739312b65, 0x3839312b65, 0x3939312b65, 0x3030322b65, 0x3130322b65, 0x3230322b65, 0x3330322b65, 0x3430322b65, 0x3530322b65, 0x3630322b65, 0x3730322b65, 0x3830322b65, 0x3930322b65, 0x3031322b65, 0x3131322b65, 0x3231322b65, 0x3331322b65, 0x3431322b65, 0x3531322b65, 0x3631322b65, 0x3731322b65, 0x3831322b65, 0x3931322b65, 0x3032322b65, 0x3132322b65, 0x3232322b65, 0x3332322b65, 0x3432322b65, 0x3532322b65, 0x3632322b65, 0x3732322b65, 0x3832322b65, 0x3932322b65, 0x3033322b65, 0x3133322b65, 0x3233322b65, 0x3333322b65, 0x3433322b65, 0x3533322b65, 0x3633322b65, 0x3733322b65, 0x3833322b65, 0x3933322b65, 0x3034322b65, 0x3134322b65, 0x3234322b65, 0x3334322b65, 0x3434322b65, 0x3534322b65, 0x3634322b65, 0x3734322b65, 0x3834322b65, 0x3934322b65, 0x3035322b65, 0x3135322b65, 0x3235322b65, 0x3335322b65, 0x3435322b65, 0x3535322b65, 0x3635322b65, 0x3735322b65, 0x3835322b65, 0x3935322b65, 0x3036322b65, 0x3136322b65, 0x3236322b65, 0x3336322b65, 0x3436322b65, 0x3536322b65, 0x3636322b65, 0x3736322b65, 0x3836322b65, 0x3936322b65, 0x3037322b65, 0x3137322b65, 0x3237322b65, 0x3337322b65, 0x3437322b65, 0x3537322b65, 0x3637322b65, 0x3737322b65, 0x3837322b65, 0x3937322b65, 0x3038322b65, 0x3138322b65, 0x3238322b65, 0x3338322b65, 0x3438322b65, 0x3538322b65, 0x3638322b65, 0x3738322b65, 0x3838322b65, 0x3938322b65, 0x3039322b65, 0x3139322b65, 0x3239322b65, 0x3339322b65, 0x3439322b65, 0x3539322b65, 0x3639322b65, 0x3739322b65, 0x3839322b65, 0x3939322b65, 0x3030332b65, 0x3130332b65, 0x3230332b65, 0x3330332b65, 0x3430332b65, 0x3530332b65, 0x3630332b65, 0x3730332b65, 0x3830332b65};
    const int group = 8;                 // avx512 : 512bit = 8 double
    const int group_count = 4;           // 4*8 = 32 double
    const int All = group_count * group; // 32
    // for(int i=0;i<All;i++) printf("v[%d]=%.16le\n",i,v[i]);
    const int kMin = -292;
    const int kMax = 324;
	struct u64x2{
		u64 hi;
		u64 lo;
	};
    static const u64x2 g[kMax - kMin + 1] = {
        {0xFF77B1FCBEBCDC4F, 0x25E8E89C13BB0F7B}, // -292
        {0x9FAACF3DF73609B1, 0x77B191618C54E9AD}, // -291
        {0xC795830D75038C1D, 0xD59DF5B9EF6A2418}, // -290
        {0xF97AE3D0D2446F25, 0x4B0573286B44AD1E}, // -289
        {0x9BECCE62836AC577, 0x4EE367F9430AEC33}, // -288
        {0xC2E801FB244576D5, 0x229C41F793CDA740}, // -287
        {0xF3A20279ED56D48A, 0x6B43527578C11110}, // -286
        {0x9845418C345644D6, 0x830A13896B78AAAA}, // -285
        {0xBE5691EF416BD60C, 0x23CC986BC656D554}, // -284
        {0xEDEC366B11C6CB8F, 0x2CBFBE86B7EC8AA9}, // -283
        {0x94B3A202EB1C3F39, 0x7BF7D71432F3D6AA}, // -282
        {0xB9E08A83A5E34F07, 0xDAF5CCD93FB0CC54}, // -281
        {0xE858AD248F5C22C9, 0xD1B3400F8F9CFF69}, // -280
        {0x91376C36D99995BE, 0x23100809B9C21FA2}, // -279
        {0xB58547448FFFFB2D, 0xABD40A0C2832A78B}, // -278
        {0xE2E69915B3FFF9F9, 0x16C90C8F323F516D}, // -277
        {0x8DD01FAD907FFC3B, 0xAE3DA7D97F6792E4}, // -276
        {0xB1442798F49FFB4A, 0x99CD11CFDF41779D}, // -275
        {0xDD95317F31C7FA1D, 0x40405643D711D584}, // -274
        {0x8A7D3EEF7F1CFC52, 0x482835EA666B2573}, // -273
        {0xAD1C8EAB5EE43B66, 0xDA3243650005EED0}, // -272
        {0xD863B256369D4A40, 0x90BED43E40076A83}, // -271
        {0x873E4F75E2224E68, 0x5A7744A6E804A292}, // -270
        {0xA90DE3535AAAE202, 0x711515D0A205CB37}, // -269
        {0xD3515C2831559A83, 0x0D5A5B44CA873E04}, // -268
        {0x8412D9991ED58091, 0xE858790AFE9486C3}, // -267
        {0xA5178FFF668AE0B6, 0x626E974DBE39A873}, // -266
        {0xCE5D73FF402D98E3, 0xFB0A3D212DC81290}, // -265
        {0x80FA687F881C7F8E, 0x7CE66634BC9D0B9A}, // -264
        {0xA139029F6A239F72, 0x1C1FFFC1EBC44E81}, // -263
        {0xC987434744AC874E, 0xA327FFB266B56221}, // -262
        {0xFBE9141915D7A922, 0x4BF1FF9F0062BAA9}, // -261
        {0x9D71AC8FADA6C9B5, 0x6F773FC3603DB4AA}, // -260
        {0xC4CE17B399107C22, 0xCB550FB4384D21D4}, // -259
        {0xF6019DA07F549B2B, 0x7E2A53A146606A49}, // -258
        {0x99C102844F94E0FB, 0x2EDA7444CBFC426E}, // -257
        {0xC0314325637A1939, 0xFA911155FEFB5309}, // -256
        {0xF03D93EEBC589F88, 0x793555AB7EBA27CB}, // -255
        {0x96267C7535B763B5, 0x4BC1558B2F3458DF}, // -254
        {0xBBB01B9283253CA2, 0x9EB1AAEDFB016F17}, // -253
        {0xEA9C227723EE8BCB, 0x465E15A979C1CADD}, // -252
        {0x92A1958A7675175F, 0x0BFACD89EC191ECA}, // -251
        {0xB749FAED14125D36, 0xCEF980EC671F667C}, // -250
        {0xE51C79A85916F484, 0x82B7E12780E7401B}, // -249
        {0x8F31CC0937AE58D2, 0xD1B2ECB8B0908811}, // -248
        {0xB2FE3F0B8599EF07, 0x861FA7E6DCB4AA16}, // -247
        {0xDFBDCECE67006AC9, 0x67A791E093E1D49B}, // -246
        {0x8BD6A141006042BD, 0xE0C8BB2C5C6D24E1}, // -245
        {0xAECC49914078536D, 0x58FAE9F773886E19}, // -244
        {0xDA7F5BF590966848, 0xAF39A475506A899F}, // -243
        {0x888F99797A5E012D, 0x6D8406C952429604}, // -242
        {0xAAB37FD7D8F58178, 0xC8E5087BA6D33B84}, // -241
        {0xD5605FCDCF32E1D6, 0xFB1E4A9A90880A65}, // -240
        {0x855C3BE0A17FCD26, 0x5CF2EEA09A550680}, // -239
        {0xA6B34AD8C9DFC06F, 0xF42FAA48C0EA481F}, // -238
        {0xD0601D8EFC57B08B, 0xF13B94DAF124DA27}, // -237
        {0x823C12795DB6CE57, 0x76C53D08D6B70859}, // -236
        {0xA2CB1717B52481ED, 0x54768C4B0C64CA6F}, // -235
        {0xCB7DDCDDA26DA268, 0xA9942F5DCF7DFD0A}, // -234
        {0xFE5D54150B090B02, 0xD3F93B35435D7C4D}, // -233
        {0x9EFA548D26E5A6E1, 0xC47BC5014A1A6DB0}, // -232
        {0xC6B8E9B0709F109A, 0x359AB6419CA1091C}, // -231
        {0xF867241C8CC6D4C0, 0xC30163D203C94B63}, // -230
        {0x9B407691D7FC44F8, 0x79E0DE63425DCF1E}, // -229
        {0xC21094364DFB5636, 0x985915FC12F542E5}, // -228
        {0xF294B943E17A2BC4, 0x3E6F5B7B17B2939E}, // -227
        {0x979CF3CA6CEC5B5A, 0xA705992CEECF9C43}, // -226
        {0xBD8430BD08277231, 0x50C6FF782A838354}, // -225
        {0xECE53CEC4A314EBD, 0xA4F8BF5635246429}, // -224
        {0x940F4613AE5ED136, 0x871B7795E136BE9A}, // -223
        {0xB913179899F68584, 0x28E2557B59846E40}, // -222
        {0xE757DD7EC07426E5, 0x331AEADA2FE589D0}, // -221
        {0x9096EA6F3848984F, 0x3FF0D2C85DEF7622}, // -220
        {0xB4BCA50B065ABE63, 0x0FED077A756B53AA}, // -219
        {0xE1EBCE4DC7F16DFB, 0xD3E8495912C62895}, // -218
        {0x8D3360F09CF6E4BD, 0x64712DD7ABBBD95D}, // -217
        {0xB080392CC4349DEC, 0xBD8D794D96AACFB4}, // -216
        {0xDCA04777F541C567, 0xECF0D7A0FC5583A1}, // -215
        {0x89E42CAAF9491B60, 0xF41686C49DB57245}, // -214
        {0xAC5D37D5B79B6239, 0x311C2875C522CED6}, // -213
        {0xD77485CB25823AC7, 0x7D633293366B828C}, // -212
        {0x86A8D39EF77164BC, 0xAE5DFF9C02033198}, // -211
        {0xA8530886B54DBDEB, 0xD9F57F830283FDFD}, // -210
        {0xD267CAA862A12D66, 0xD072DF63C324FD7C}, // -209
        {0x8380DEA93DA4BC60, 0x4247CB9E59F71E6E}, // -208
        {0xA46116538D0DEB78, 0x52D9BE85F074E609}, // -207
        {0xCD795BE870516656, 0x67902E276C921F8C}, // -206
        {0x806BD9714632DFF6, 0x00BA1CD8A3DB53B7}, // -205
        {0xA086CFCD97BF97F3, 0x80E8A40ECCD228A5}, // -204
        {0xC8A883C0FDAF7DF0, 0x6122CD128006B2CE}, // -203
        {0xFAD2A4B13D1B5D6C, 0x796B805720085F82}, // -202
        {0x9CC3A6EEC6311A63, 0xCBE3303674053BB1}, // -201
        {0xC3F490AA77BD60FC, 0xBEDBFC4411068A9D}, // -200
        {0xF4F1B4D515ACB93B, 0xEE92FB5515482D45}, // -199
        {0x991711052D8BF3C5, 0x751BDD152D4D1C4B}, // -198
        {0xBF5CD54678EEF0B6, 0xD262D45A78A0635E}, // -197
        {0xEF340A98172AACE4, 0x86FB897116C87C35}, // -196
        {0x9580869F0E7AAC0E, 0xD45D35E6AE3D4DA1}, // -195
        {0xBAE0A846D2195712, 0x8974836059CCA10A}, // -194
        {0xE998D258869FACD7, 0x2BD1A438703FC94C}, // -193
        {0x91FF83775423CC06, 0x7B6306A34627DDD0}, // -192
        {0xB67F6455292CBF08, 0x1A3BC84C17B1D543}, // -191
        {0xE41F3D6A7377EECA, 0x20CABA5F1D9E4A94}, // -190
        {0x8E938662882AF53E, 0x547EB47B7282EE9D}, // -189
        {0xB23867FB2A35B28D, 0xE99E619A4F23AA44}, // -188
        {0xDEC681F9F4C31F31, 0x6405FA00E2EC94D5}, // -187
        {0x8B3C113C38F9F37E, 0xDE83BC408DD3DD05}, // -186
        {0xAE0B158B4738705E, 0x9624AB50B148D446}, // -185
        {0xD98DDAEE19068C76, 0x3BADD624DD9B0958}, // -184
        {0x87F8A8D4CFA417C9, 0xE54CA5D70A80E5D7}, // -183
        {0xA9F6D30A038D1DBC, 0x5E9FCF4CCD211F4D}, // -182
        {0xD47487CC8470652B, 0x7647C32000696720}, // -181
        {0x84C8D4DFD2C63F3B, 0x29ECD9F40041E074}, // -180
        {0xA5FB0A17C777CF09, 0xF468107100525891}, // -179
        {0xCF79CC9DB955C2CC, 0x7182148D4066EEB5}, // -178
        {0x81AC1FE293D599BF, 0xC6F14CD848405531}, // -177
        {0xA21727DB38CB002F, 0xB8ADA00E5A506A7D}, // -176
        {0xCA9CF1D206FDC03B, 0xA6D90811F0E4851D}, // -175
        {0xFD442E4688BD304A, 0x908F4A166D1DA664}, // -174
        {0x9E4A9CEC15763E2E, 0x9A598E4E043287FF}, // -173
        {0xC5DD44271AD3CDBA, 0x40EFF1E1853F29FE}, // -172
        {0xF7549530E188C128, 0xD12BEE59E68EF47D}, // -171
        {0x9A94DD3E8CF578B9, 0x82BB74F8301958CF}, // -170
        {0xC13A148E3032D6E7, 0xE36A52363C1FAF02}, // -169
        {0xF18899B1BC3F8CA1, 0xDC44E6C3CB279AC2}, // -168
        {0x96F5600F15A7B7E5, 0x29AB103A5EF8C0BA}, // -167
        {0xBCB2B812DB11A5DE, 0x7415D448F6B6F0E8}, // -166
        {0xEBDF661791D60F56, 0x111B495B3464AD22}, // -165
        {0x936B9FCEBB25C995, 0xCAB10DD900BEEC35}, // -164
        {0xB84687C269EF3BFB, 0x3D5D514F40EEA743}, // -163
        {0xE65829B3046B0AFA, 0x0CB4A5A3112A5113}, // -162
        {0x8FF71A0FE2C2E6DC, 0x47F0E785EABA72AC}, // -161
        {0xB3F4E093DB73A093, 0x59ED216765690F57}, // -160
        {0xE0F218B8D25088B8, 0x306869C13EC3532D}, // -159
        {0x8C974F7383725573, 0x1E414218C73A13FC}, // -158
        {0xAFBD2350644EEACF, 0xE5D1929EF90898FB}, // -157
        {0xDBAC6C247D62A583, 0xDF45F746B74ABF3A}, // -156
        {0x894BC396CE5DA772, 0x6B8BBA8C328EB784}, // -155
        {0xAB9EB47C81F5114F, 0x066EA92F3F326565}, // -154
        {0xD686619BA27255A2, 0xC80A537B0EFEFEBE}, // -153
        {0x8613FD0145877585, 0xBD06742CE95F5F37}, // -152
        {0xA798FC4196E952E7, 0x2C48113823B73705}, // -151
        {0xD17F3B51FCA3A7A0, 0xF75A15862CA504C6}, // -150
        {0x82EF85133DE648C4, 0x9A984D73DBE722FC}, // -149
        {0xA3AB66580D5FDAF5, 0xC13E60D0D2E0EBBB}, // -148
        {0xCC963FEE10B7D1B3, 0x318DF905079926A9}, // -147
        {0xFFBBCFE994E5C61F, 0xFDF17746497F7053}, // -146
        {0x9FD561F1FD0F9BD3, 0xFEB6EA8BEDEFA634}, // -145
        {0xC7CABA6E7C5382C8, 0xFE64A52EE96B8FC1}, // -144
        {0xF9BD690A1B68637B, 0x3DFDCE7AA3C673B1}, // -143
        {0x9C1661A651213E2D, 0x06BEA10CA65C084F}, // -142
        {0xC31BFA0FE5698DB8, 0x486E494FCFF30A63}, // -141
        {0xF3E2F893DEC3F126, 0x5A89DBA3C3EFCCFB}, // -140
        {0x986DDB5C6B3A76B7, 0xF89629465A75E01D}, // -139
        {0xBE89523386091465, 0xF6BBB397F1135824}, // -138
        {0xEE2BA6C0678B597F, 0x746AA07DED582E2D}, // -137
        {0x94DB483840B717EF, 0xA8C2A44EB4571CDD}, // -136
        {0xBA121A4650E4DDEB, 0x92F34D62616CE414}, // -135
        {0xE896A0D7E51E1566, 0x77B020BAF9C81D18}, // -134
        {0x915E2486EF32CD60, 0x0ACE1474DC1D122F}, // -133
        {0xB5B5ADA8AAFF80B8, 0x0D819992132456BB}, // -132
        {0xE3231912D5BF60E6, 0x10E1FFF697ED6C6A}, // -131
        {0x8DF5EFABC5979C8F, 0xCA8D3FFA1EF463C2}, // -130
        {0xB1736B96B6FD83B3, 0xBD308FF8A6B17CB3}, // -129
        {0xDDD0467C64BCE4A0, 0xAC7CB3F6D05DDBDF}, // -128
        {0x8AA22C0DBEF60EE4, 0x6BCDF07A423AA96C}, // -127
        {0xAD4AB7112EB3929D, 0x86C16C98D2C953C7}, // -126
        {0xD89D64D57A607744, 0xE871C7BF077BA8B8}, // -125
        {0x87625F056C7C4A8B, 0x11471CD764AD4973}, // -124
        {0xA93AF6C6C79B5D2D, 0xD598E40D3DD89BD0}, // -123
        {0xD389B47879823479, 0x4AFF1D108D4EC2C4}, // -122
        {0x843610CB4BF160CB, 0xCEDF722A585139BB}, // -121
        {0xA54394FE1EEDB8FE, 0xC2974EB4EE658829}, // -120
        {0xCE947A3DA6A9273E, 0x733D226229FEEA33}, // -119
        {0x811CCC668829B887, 0x0806357D5A3F5260}, // -118
        {0xA163FF802A3426A8, 0xCA07C2DCB0CF26F8}, // -117
        {0xC9BCFF6034C13052, 0xFC89B393DD02F0B6}, // -116
        {0xFC2C3F3841F17C67, 0xBBAC2078D443ACE3}, // -115
        {0x9D9BA7832936EDC0, 0xD54B944B84AA4C0E}, // -114
        {0xC5029163F384A931, 0x0A9E795E65D4DF12}, // -113
        {0xF64335BCF065D37D, 0x4D4617B5FF4A16D6}, // -112
        {0x99EA0196163FA42E, 0x504BCED1BF8E4E46}, // -111
        {0xC06481FB9BCF8D39, 0xE45EC2862F71E1D7}, // -110
        {0xF07DA27A82C37088, 0x5D767327BB4E5A4D}, // -109
        {0x964E858C91BA2655, 0x3A6A07F8D510F870}, // -108
        {0xBBE226EFB628AFEA, 0x890489F70A55368C}, // -107
        {0xEADAB0ABA3B2DBE5, 0x2B45AC74CCEA842F}, // -106
        {0x92C8AE6B464FC96F, 0x3B0B8BC90012929E}, // -105
        {0xB77ADA0617E3BBCB, 0x09CE6EBB40173745}, // -104
        {0xE55990879DDCAABD, 0xCC420A6A101D0516}, // -103
        {0x8F57FA54C2A9EAB6, 0x9FA946824A12232E}, // -102
        {0xB32DF8E9F3546564, 0x47939822DC96ABFA}, // -101
        {0xDFF9772470297EBD, 0x59787E2B93BC56F8}, // -100
        {0x8BFBEA76C619EF36, 0x57EB4EDB3C55B65B}, //  -99
        {0xAEFAE51477A06B03, 0xEDE622920B6B23F2}, //  -98
        {0xDAB99E59958885C4, 0xE95FAB368E45ECEE}, //  -97
        {0x88B402F7FD75539B, 0x11DBCB0218EBB415}, //  -96
        {0xAAE103B5FCD2A881, 0xD652BDC29F26A11A}, //  -95
        {0xD59944A37C0752A2, 0x4BE76D3346F04960}, //  -94
        {0x857FCAE62D8493A5, 0x6F70A4400C562DDC}, //  -93
        {0xA6DFBD9FB8E5B88E, 0xCB4CCD500F6BB953}, //  -92
        {0xD097AD07A71F26B2, 0x7E2000A41346A7A8}, //  -91
        {0x825ECC24C873782F, 0x8ED400668C0C28C9}, //  -90
        {0xA2F67F2DFA90563B, 0x728900802F0F32FB}, //  -89
        {0xCBB41EF979346BCA, 0x4F2B40A03AD2FFBA}, //  -88
        {0xFEA126B7D78186BC, 0xE2F610C84987BFA9}, //  -87
        {0x9F24B832E6B0F436, 0x0DD9CA7D2DF4D7CA}, //  -86
        {0xC6EDE63FA05D3143, 0x91503D1C79720DBC}, //  -85
        {0xF8A95FCF88747D94, 0x75A44C6397CE912B}, //  -84
        {0x9B69DBE1B548CE7C, 0xC986AFBE3EE11ABB}, //  -83
        {0xC24452DA229B021B, 0xFBE85BADCE996169}, //  -82
        {0xF2D56790AB41C2A2, 0xFAE27299423FB9C4}, //  -81
        {0x97C560BA6B0919A5, 0xDCCD879FC967D41B}, //  -80
        {0xBDB6B8E905CB600F, 0x5400E987BBC1C921}, //  -79
        {0xED246723473E3813, 0x290123E9AAB23B69}, //  -78
        {0x9436C0760C86E30B, 0xF9A0B6720AAF6522}, //  -77
        {0xB94470938FA89BCE, 0xF808E40E8D5B3E6A}, //  -76
        {0xE7958CB87392C2C2, 0xB60B1D1230B20E05}, //  -75
        {0x90BD77F3483BB9B9, 0xB1C6F22B5E6F48C3}, //  -74
        {0xB4ECD5F01A4AA828, 0x1E38AEB6360B1AF4}, //  -73
        {0xE2280B6C20DD5232, 0x25C6DA63C38DE1B1}, //  -72
        {0x8D590723948A535F, 0x579C487E5A38AD0F}, //  -71
        {0xB0AF48EC79ACE837, 0x2D835A9DF0C6D852}, //  -70
        {0xDCDB1B2798182244, 0xF8E431456CF88E66}, //  -69
        {0x8A08F0F8BF0F156B, 0x1B8E9ECB641B5900}, //  -68
        {0xAC8B2D36EED2DAC5, 0xE272467E3D222F40}, //  -67
        {0xD7ADF884AA879177, 0x5B0ED81DCC6ABB10}, //  -66
        {0x86CCBB52EA94BAEA, 0x98E947129FC2B4EA}, //  -65
        {0xA87FEA27A539E9A5, 0x3F2398D747B36225}, //  -64
        {0xD29FE4B18E88640E, 0x8EEC7F0D19A03AAE}, //  -63
        {0x83A3EEEEF9153E89, 0x1953CF68300424AD}, //  -62
        {0xA48CEAAAB75A8E2B, 0x5FA8C3423C052DD8}, //  -61
        {0xCDB02555653131B6, 0x3792F412CB06794E}, //  -60
        {0x808E17555F3EBF11, 0xE2BBD88BBEE40BD1}, //  -59
        {0xA0B19D2AB70E6ED6, 0x5B6ACEAEAE9D0EC5}, //  -58
        {0xC8DE047564D20A8B, 0xF245825A5A445276}, //  -57
        {0xFB158592BE068D2E, 0xEED6E2F0F0D56713}, //  -56
        {0x9CED737BB6C4183D, 0x55464DD69685606C}, //  -55
        {0xC428D05AA4751E4C, 0xAA97E14C3C26B887}, //  -54
        {0xF53304714D9265DF, 0xD53DD99F4B3066A9}, //  -53
        {0x993FE2C6D07B7FAB, 0xE546A8038EFE402A}, //  -52
        {0xBF8FDB78849A5F96, 0xDE98520472BDD034}, //  -51
        {0xEF73D256A5C0F77C, 0x963E66858F6D4441}, //  -50
        {0x95A8637627989AAD, 0xDDE7001379A44AA9}, //  -49
        {0xBB127C53B17EC159, 0x5560C018580D5D53}, //  -48
        {0xE9D71B689DDE71AF, 0xAAB8F01E6E10B4A7}, //  -47
        {0x9226712162AB070D, 0xCAB3961304CA70E9}, //  -46
        {0xB6B00D69BB55C8D1, 0x3D607B97C5FD0D23}, //  -45
        {0xE45C10C42A2B3B05, 0x8CB89A7DB77C506B}, //  -44
        {0x8EB98A7A9A5B04E3, 0x77F3608E92ADB243}, //  -43
        {0xB267ED1940F1C61C, 0x55F038B237591ED4}, //  -42
        {0xDF01E85F912E37A3, 0x6B6C46DEC52F6689}, //  -41
        {0x8B61313BBABCE2C6, 0x2323AC4B3B3DA016}, //  -40
        {0xAE397D8AA96C1B77, 0xABEC975E0A0D081B}, //  -39
        {0xD9C7DCED53C72255, 0x96E7BD358C904A22}, //  -38
        {0x881CEA14545C7575, 0x7E50D64177DA2E55}, //  -37
        {0xAA242499697392D2, 0xDDE50BD1D5D0B9EA}, //  -36
        {0xD4AD2DBFC3D07787, 0x955E4EC64B44E865}, //  -35
        {0x84EC3C97DA624AB4, 0xBD5AF13BEF0B113F}, //  -34
        {0xA6274BBDD0FADD61, 0xECB1AD8AEACDD58F}, //  -33
        {0xCFB11EAD453994BA, 0x67DE18EDA5814AF3}, //  -32
        {0x81CEB32C4B43FCF4, 0x80EACF948770CED8}, //  -31
        {0xA2425FF75E14FC31, 0xA1258379A94D028E}, //  -30
        {0xCAD2F7F5359A3B3E, 0x096EE45813A04331}, //  -29
        {0xFD87B5F28300CA0D, 0x8BCA9D6E188853FD}, //  -28
        {0x9E74D1B791E07E48, 0x775EA264CF55347E}, //  -27
        {0xC612062576589DDA, 0x95364AFE032A819E}, //  -26
        {0xF79687AED3EEC551, 0x3A83DDBD83F52205}, //  -25
        {0x9ABE14CD44753B52, 0xC4926A9672793543}, //  -24
        {0xC16D9A0095928A27, 0x75B7053C0F178294}, //  -23
        {0xF1C90080BAF72CB1, 0x5324C68B12DD6339}, //  -22
        {0x971DA05074DA7BEE, 0xD3F6FC16EBCA5E04}, //  -21
        {0xBCE5086492111AEA, 0x88F4BB1CA6BCF585}, //  -20
        {0xEC1E4A7DB69561A5, 0x2B31E9E3D06C32E6}, //  -19
        {0x9392EE8E921D5D07, 0x3AFF322E62439FD0}, //  -18
        {0xB877AA3236A4B449, 0x09BEFEB9FAD487C3}, //  -17
        {0xE69594BEC44DE15B, 0x4C2EBE687989A9B4}, //  -16
        {0x901D7CF73AB0ACD9, 0x0F9D37014BF60A11}, //  -15
        {0xB424DC35095CD80F, 0x538484C19EF38C95}, //  -14
        {0xE12E13424BB40E13, 0x2865A5F206B06FBA}, //  -13
        {0x8CBCCC096F5088CB, 0xF93F87B7442E45D4}, //  -12
        {0xAFEBFF0BCB24AAFE, 0xF78F69A51539D749}, //  -11
        {0xDBE6FECEBDEDD5BE, 0xB573440E5A884D1C}, //  -10
        {0x89705F4136B4A597, 0x31680A88F8953031}, //   -9
        {0xABCC77118461CEFC, 0xFDC20D2B36BA7C3E}, //   -8
        {0xD6BF94D5E57A42BC, 0x3D32907604691B4D}, //   -7
        {0x8637BD05AF6C69B5, 0xA63F9A49C2C1B110}, //   -6
        {0xA7C5AC471B478423, 0x0FCF80DC33721D54}, //   -5
        {0xD1B71758E219652B, 0xD3C36113404EA4A9}, //   -4
        {0x83126E978D4FDF3B, 0x645A1CAC083126EA}, //   -3
        {0xA3D70A3D70A3D70A, 0x3D70A3D70A3D70A4}, //   -2
        {0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCD}, //   -1
        {0x8000000000000000, 0x0000000000000000}, //    0
        {0xA000000000000000, 0x0000000000000000}, //    1
        {0xC800000000000000, 0x0000000000000000}, //    2
        {0xFA00000000000000, 0x0000000000000000}, //    3
        {0x9C40000000000000, 0x0000000000000000}, //    4
        {0xC350000000000000, 0x0000000000000000}, //    5
        {0xF424000000000000, 0x0000000000000000}, //    6
        {0x9896800000000000, 0x0000000000000000}, //    7
        {0xBEBC200000000000, 0x0000000000000000}, //    8
        {0xEE6B280000000000, 0x0000000000000000}, //    9
        {0x9502F90000000000, 0x0000000000000000}, //   10
        {0xBA43B74000000000, 0x0000000000000000}, //   11
        {0xE8D4A51000000000, 0x0000000000000000}, //   12
        {0x9184E72A00000000, 0x0000000000000000}, //   13
        {0xB5E620F480000000, 0x0000000000000000}, //   14
        {0xE35FA931A0000000, 0x0000000000000000}, //   15
        {0x8E1BC9BF04000000, 0x0000000000000000}, //   16
        {0xB1A2BC2EC5000000, 0x0000000000000000}, //   17
        {0xDE0B6B3A76400000, 0x0000000000000000}, //   18
        {0x8AC7230489E80000, 0x0000000000000000}, //   19
        {0xAD78EBC5AC620000, 0x0000000000000000}, //   20
        {0xD8D726B7177A8000, 0x0000000000000000}, //   21
        {0x878678326EAC9000, 0x0000000000000000}, //   22
        {0xA968163F0A57B400, 0x0000000000000000}, //   23
        {0xD3C21BCECCEDA100, 0x0000000000000000}, //   24
        {0x84595161401484A0, 0x0000000000000000}, //   25
        {0xA56FA5B99019A5C8, 0x0000000000000000}, //   26
        {0xCECB8F27F4200F3A, 0x0000000000000000}, //   27
        {0x813F3978F8940984, 0x4000000000000000}, //   28
        {0xA18F07D736B90BE5, 0x5000000000000000}, //   29
        {0xC9F2C9CD04674EDE, 0xA400000000000000}, //   30
        {0xFC6F7C4045812296, 0x4D00000000000000}, //   31
        {0x9DC5ADA82B70B59D, 0xF020000000000000}, //   32
        {0xC5371912364CE305, 0x6C28000000000000}, //   33
        {0xF684DF56C3E01BC6, 0xC732000000000000}, //   34
        {0x9A130B963A6C115C, 0x3C7F400000000000}, //   35
        {0xC097CE7BC90715B3, 0x4B9F100000000000}, //   36
        {0xF0BDC21ABB48DB20, 0x1E86D40000000000}, //   37
        {0x96769950B50D88F4, 0x1314448000000000}, //   38
        {0xBC143FA4E250EB31, 0x17D955A000000000}, //   39
        {0xEB194F8E1AE525FD, 0x5DCFAB0800000000}, //   40
        {0x92EFD1B8D0CF37BE, 0x5AA1CAE500000000}, //   41
        {0xB7ABC627050305AD, 0xF14A3D9E40000000}, //   42
        {0xE596B7B0C643C719, 0x6D9CCD05D0000000}, //   43
        {0x8F7E32CE7BEA5C6F, 0xE4820023A2000000}, //   44
        {0xB35DBF821AE4F38B, 0xDDA2802C8A800000}, //   45
        {0xE0352F62A19E306E, 0xD50B2037AD200000}, //   46
        {0x8C213D9DA502DE45, 0x4526F422CC340000}, //   47
        {0xAF298D050E4395D6, 0x9670B12B7F410000}, //   48
        {0xDAF3F04651D47B4C, 0x3C0CDD765F114000}, //   49
        {0x88D8762BF324CD0F, 0xA5880A69FB6AC800}, //   50
        {0xAB0E93B6EFEE0053, 0x8EEA0D047A457A00}, //   51
        {0xD5D238A4ABE98068, 0x72A4904598D6D880}, //   52
        {0x85A36366EB71F041, 0x47A6DA2B7F864750}, //   53
        {0xA70C3C40A64E6C51, 0x999090B65F67D924}, //   54
        {0xD0CF4B50CFE20765, 0xFFF4B4E3F741CF6D}, //   55
        {0x82818F1281ED449F, 0xBFF8F10E7A8921A5}, //   56
        {0xA321F2D7226895C7, 0xAFF72D52192B6A0E}, //   57
        {0xCBEA6F8CEB02BB39, 0x9BF4F8A69F764491}, //   58
        {0xFEE50B7025C36A08, 0x02F236D04753D5B5}, //   59
        {0x9F4F2726179A2245, 0x01D762422C946591}, //   60
        {0xC722F0EF9D80AAD6, 0x424D3AD2B7B97EF6}, //   61
        {0xF8EBAD2B84E0D58B, 0xD2E0898765A7DEB3}, //   62
        {0x9B934C3B330C8577, 0x63CC55F49F88EB30}, //   63
        {0xC2781F49FFCFA6D5, 0x3CBF6B71C76B25FC}, //   64
        {0xF316271C7FC3908A, 0x8BEF464E3945EF7B}, //   65
        {0x97EDD871CFDA3A56, 0x97758BF0E3CBB5AD}, //   66
        {0xBDE94E8E43D0C8EC, 0x3D52EEED1CBEA318}, //   67
        {0xED63A231D4C4FB27, 0x4CA7AAA863EE4BDE}, //   68
        {0x945E455F24FB1CF8, 0x8FE8CAA93E74EF6B}, //   69
        {0xB975D6B6EE39E436, 0xB3E2FD538E122B45}, //   70
        {0xE7D34C64A9C85D44, 0x60DBBCA87196B617}, //   71
        {0x90E40FBEEA1D3A4A, 0xBC8955E946FE31CE}, //   72
        {0xB51D13AEA4A488DD, 0x6BABAB6398BDBE42}, //   73
        {0xE264589A4DCDAB14, 0xC696963C7EED2DD2}, //   74
        {0x8D7EB76070A08AEC, 0xFC1E1DE5CF543CA3}, //   75
        {0xB0DE65388CC8ADA8, 0x3B25A55F43294BCC}, //   76
        {0xDD15FE86AFFAD912, 0x49EF0EB713F39EBF}, //   77
        {0x8A2DBF142DFCC7AB, 0x6E3569326C784338}, //   78
        {0xACB92ED9397BF996, 0x49C2C37F07965405}, //   79
        {0xD7E77A8F87DAF7FB, 0xDC33745EC97BE907}, //   80
        {0x86F0AC99B4E8DAFD, 0x69A028BB3DED71A4}, //   81
        {0xA8ACD7C0222311BC, 0xC40832EA0D68CE0D}, //   82
        {0xD2D80DB02AABD62B, 0xF50A3FA490C30191}, //   83
        {0x83C7088E1AAB65DB, 0x792667C6DA79E0FB}, //   84
        {0xA4B8CAB1A1563F52, 0x577001B891185939}, //   85
        {0xCDE6FD5E09ABCF26, 0xED4C0226B55E6F87}, //   86
        {0x80B05E5AC60B6178, 0x544F8158315B05B5}, //   87
        {0xA0DC75F1778E39D6, 0x696361AE3DB1C722}, //   88
        {0xC913936DD571C84C, 0x03BC3A19CD1E38EA}, //   89
        {0xFB5878494ACE3A5F, 0x04AB48A04065C724}, //   90
        {0x9D174B2DCEC0E47B, 0x62EB0D64283F9C77}, //   91
        {0xC45D1DF942711D9A, 0x3BA5D0BD324F8395}, //   92
        {0xF5746577930D6500, 0xCA8F44EC7EE3647A}, //   93
        {0x9968BF6ABBE85F20, 0x7E998B13CF4E1ECC}, //   94
        {0xBFC2EF456AE276E8, 0x9E3FEDD8C321A67F}, //   95
        {0xEFB3AB16C59B14A2, 0xC5CFE94EF3EA101F}, //   96
        {0x95D04AEE3B80ECE5, 0xBBA1F1D158724A13}, //   97
        {0xBB445DA9CA61281F, 0x2A8A6E45AE8EDC98}, //   98
        {0xEA1575143CF97226, 0xF52D09D71A3293BE}, //   99
        {0x924D692CA61BE758, 0x593C2626705F9C57}, //  100
        {0xB6E0C377CFA2E12E, 0x6F8B2FB00C77836D}, //  101
        {0xE498F455C38B997A, 0x0B6DFB9C0F956448}, //  102
        {0x8EDF98B59A373FEC, 0x4724BD4189BD5EAD}, //  103
        {0xB2977EE300C50FE7, 0x58EDEC91EC2CB658}, //  104
        {0xDF3D5E9BC0F653E1, 0x2F2967B66737E3EE}, //  105
        {0x8B865B215899F46C, 0xBD79E0D20082EE75}, //  106
        {0xAE67F1E9AEC07187, 0xECD8590680A3AA12}, //  107
        {0xDA01EE641A708DE9, 0xE80E6F4820CC9496}, //  108
        {0x884134FE908658B2, 0x3109058D147FDCDE}, //  109
        {0xAA51823E34A7EEDE, 0xBD4B46F0599FD416}, //  110
        {0xD4E5E2CDC1D1EA96, 0x6C9E18AC7007C91B}, //  111
        {0x850FADC09923329E, 0x03E2CF6BC604DDB1}, //  112
        {0xA6539930BF6BFF45, 0x84DB8346B786151D}, //  113
        {0xCFE87F7CEF46FF16, 0xE612641865679A64}, //  114
        {0x81F14FAE158C5F6E, 0x4FCB7E8F3F60C07F}, //  115
        {0xA26DA3999AEF7749, 0xE3BE5E330F38F09E}, //  116
        {0xCB090C8001AB551C, 0x5CADF5BFD3072CC6}, //  117
        {0xFDCB4FA002162A63, 0x73D9732FC7C8F7F7}, //  118
        {0x9E9F11C4014DDA7E, 0x2867E7FDDCDD9AFB}, //  119
        {0xC646D63501A1511D, 0xB281E1FD541501B9}, //  120
        {0xF7D88BC24209A565, 0x1F225A7CA91A4227}, //  121
        {0x9AE757596946075F, 0x3375788DE9B06959}, //  122
        {0xC1A12D2FC3978937, 0x0052D6B1641C83AF}, //  123
        {0xF209787BB47D6B84, 0xC0678C5DBD23A49B}, //  124
        {0x9745EB4D50CE6332, 0xF840B7BA963646E1}, //  125
        {0xBD176620A501FBFF, 0xB650E5A93BC3D899}, //  126
        {0xEC5D3FA8CE427AFF, 0xA3E51F138AB4CEBF}, //  127
        {0x93BA47C980E98CDF, 0xC66F336C36B10138}, //  128
        {0xB8A8D9BBE123F017, 0xB80B0047445D4185}, //  129
        {0xE6D3102AD96CEC1D, 0xA60DC059157491E6}, //  130
        {0x9043EA1AC7E41392, 0x87C89837AD68DB30}, //  131
        {0xB454E4A179DD1877, 0x29BABE4598C311FC}, //  132
        {0xE16A1DC9D8545E94, 0xF4296DD6FEF3D67B}, //  133
        {0x8CE2529E2734BB1D, 0x1899E4A65F58660D}, //  134
        {0xB01AE745B101E9E4, 0x5EC05DCFF72E7F90}, //  135
        {0xDC21A1171D42645D, 0x76707543F4FA1F74}, //  136
        {0x899504AE72497EBA, 0x6A06494A791C53A9}, //  137
        {0xABFA45DA0EDBDE69, 0x0487DB9D17636893}, //  138
        {0xD6F8D7509292D603, 0x45A9D2845D3C42B7}, //  139
        {0x865B86925B9BC5C2, 0x0B8A2392BA45A9B3}, //  140
        {0xA7F26836F282B732, 0x8E6CAC7768D7141F}, //  141
        {0xD1EF0244AF2364FF, 0x3207D795430CD927}, //  142
        {0x8335616AED761F1F, 0x7F44E6BD49E807B9}, //  143
        {0xA402B9C5A8D3A6E7, 0x5F16206C9C6209A7}, //  144
        {0xCD036837130890A1, 0x36DBA887C37A8C10}, //  145
        {0x802221226BE55A64, 0xC2494954DA2C978A}, //  146
        {0xA02AA96B06DEB0FD, 0xF2DB9BAA10B7BD6D}, //  147
        {0xC83553C5C8965D3D, 0x6F92829494E5ACC8}, //  148
        {0xFA42A8B73ABBF48C, 0xCB772339BA1F17FA}, //  149
        {0x9C69A97284B578D7, 0xFF2A760414536EFC}, //  150
        {0xC38413CF25E2D70D, 0xFEF5138519684ABB}, //  151
        {0xF46518C2EF5B8CD1, 0x7EB258665FC25D6A}, //  152
        {0x98BF2F79D5993802, 0xEF2F773FFBD97A62}, //  153
        {0xBEEEFB584AFF8603, 0xAAFB550FFACFD8FB}, //  154
        {0xEEAABA2E5DBF6784, 0x95BA2A53F983CF39}, //  155
        {0x952AB45CFA97A0B2, 0xDD945A747BF26184}, //  156
        {0xBA756174393D88DF, 0x94F971119AEEF9E5}, //  157
        {0xE912B9D1478CEB17, 0x7A37CD5601AAB85E}, //  158
        {0x91ABB422CCB812EE, 0xAC62E055C10AB33B}, //  159
        {0xB616A12B7FE617AA, 0x577B986B314D600A}, //  160
        {0xE39C49765FDF9D94, 0xED5A7E85FDA0B80C}, //  161
        {0x8E41ADE9FBEBC27D, 0x14588F13BE847308}, //  162
        {0xB1D219647AE6B31C, 0x596EB2D8AE258FC9}, //  163
        {0xDE469FBD99A05FE3, 0x6FCA5F8ED9AEF3BC}, //  164
        {0x8AEC23D680043BEE, 0x25DE7BB9480D5855}, //  165
        {0xADA72CCC20054AE9, 0xAF561AA79A10AE6B}, //  166
        {0xD910F7FF28069DA4, 0x1B2BA1518094DA05}, //  167
        {0x87AA9AFF79042286, 0x90FB44D2F05D0843}, //  168
        {0xA99541BF57452B28, 0x353A1607AC744A54}, //  169
        {0xD3FA922F2D1675F2, 0x42889B8997915CE9}, //  170
        {0x847C9B5D7C2E09B7, 0x69956135FEBADA12}, //  171
        {0xA59BC234DB398C25, 0x43FAB9837E699096}, //  172
        {0xCF02B2C21207EF2E, 0x94F967E45E03F4BC}, //  173
        {0x8161AFB94B44F57D, 0x1D1BE0EEBAC278F6}, //  174
        {0xA1BA1BA79E1632DC, 0x6462D92A69731733}, //  175
        {0xCA28A291859BBF93, 0x7D7B8F7503CFDCFF}, //  176
        {0xFCB2CB35E702AF78, 0x5CDA735244C3D43F}, //  177
        {0x9DEFBF01B061ADAB, 0x3A0888136AFA64A8}, //  178
        {0xC56BAEC21C7A1916, 0x088AAA1845B8FDD1}, //  179
        {0xF6C69A72A3989F5B, 0x8AAD549E57273D46}, //  180
        {0x9A3C2087A63F6399, 0x36AC54E2F678864C}, //  181
        {0xC0CB28A98FCF3C7F, 0x84576A1BB416A7DE}, //  182
        {0xF0FDF2D3F3C30B9F, 0x656D44A2A11C51D6}, //  183
        {0x969EB7C47859E743, 0x9F644AE5A4B1B326}, //  184
        {0xBC4665B596706114, 0x873D5D9F0DDE1FEF}, //  185
        {0xEB57FF22FC0C7959, 0xA90CB506D155A7EB}, //  186
        {0x9316FF75DD87CBD8, 0x09A7F12442D588F3}, //  187
        {0xB7DCBF5354E9BECE, 0x0C11ED6D538AEB30}, //  188
        {0xE5D3EF282A242E81, 0x8F1668C8A86DA5FB}, //  189
        {0x8FA475791A569D10, 0xF96E017D694487BD}, //  190
        {0xB38D92D760EC4455, 0x37C981DCC395A9AD}, //  191
        {0xE070F78D3927556A, 0x85BBE253F47B1418}, //  192
        {0x8C469AB843B89562, 0x93956D7478CCEC8F}, //  193
        {0xAF58416654A6BABB, 0x387AC8D1970027B3}, //  194
        {0xDB2E51BFE9D0696A, 0x06997B05FCC0319F}, //  195
        {0x88FCF317F22241E2, 0x441FECE3BDF81F04}, //  196
        {0xAB3C2FDDEEAAD25A, 0xD527E81CAD7626C4}, //  197
        {0xD60B3BD56A5586F1, 0x8A71E223D8D3B075}, //  198
        {0x85C7056562757456, 0xF6872D5667844E4A}, //  199
        {0xA738C6BEBB12D16C, 0xB428F8AC016561DC}, //  200
        {0xD106F86E69D785C7, 0xE13336D701BEBA53}, //  201
        {0x82A45B450226B39C, 0xECC0024661173474}, //  202
        {0xA34D721642B06084, 0x27F002D7F95D0191}, //  203
        {0xCC20CE9BD35C78A5, 0x31EC038DF7B441F5}, //  204
        {0xFF290242C83396CE, 0x7E67047175A15272}, //  205
        {0x9F79A169BD203E41, 0x0F0062C6E984D387}, //  206
        {0xC75809C42C684DD1, 0x52C07B78A3E60869}, //  207
        {0xF92E0C3537826145, 0xA7709A56CCDF8A83}, //  208
        {0x9BBCC7A142B17CCB, 0x88A66076400BB692}, //  209
        {0xC2ABF989935DDBFE, 0x6ACFF893D00EA436}, //  210
        {0xF356F7EBF83552FE, 0x0583F6B8C4124D44}, //  211
        {0x98165AF37B2153DE, 0xC3727A337A8B704B}, //  212
        {0xBE1BF1B059E9A8D6, 0x744F18C0592E4C5D}, //  213
        {0xEDA2EE1C7064130C, 0x1162DEF06F79DF74}, //  214
        {0x9485D4D1C63E8BE7, 0x8ADDCB5645AC2BA9}, //  215
        {0xB9A74A0637CE2EE1, 0x6D953E2BD7173693}, //  216
        {0xE8111C87C5C1BA99, 0xC8FA8DB6CCDD0438}, //  217
        {0x910AB1D4DB9914A0, 0x1D9C9892400A22A3}, //  218
        {0xB54D5E4A127F59C8, 0x2503BEB6D00CAB4C}, //  219
        {0xE2A0B5DC971F303A, 0x2E44AE64840FD61E}, //  220
        {0x8DA471A9DE737E24, 0x5CEAECFED289E5D3}, //  221
        {0xB10D8E1456105DAD, 0x7425A83E872C5F48}, //  222
        {0xDD50F1996B947518, 0xD12F124E28F7771A}, //  223
        {0x8A5296FFE33CC92F, 0x82BD6B70D99AAA70}, //  224
        {0xACE73CBFDC0BFB7B, 0x636CC64D1001550C}, //  225
        {0xD8210BEFD30EFA5A, 0x3C47F7E05401AA4F}, //  226
        {0x8714A775E3E95C78, 0x65ACFAEC34810A72}, //  227
        {0xA8D9D1535CE3B396, 0x7F1839A741A14D0E}, //  228
        {0xD31045A8341CA07C, 0x1EDE48111209A051}, //  229
        {0x83EA2B892091E44D, 0x934AED0AAB460433}, //  230
        {0xA4E4B66B68B65D60, 0xF81DA84D56178540}, //  231
        {0xCE1DE40642E3F4B9, 0x36251260AB9D668F}, //  232
        {0x80D2AE83E9CE78F3, 0xC1D72B7C6B42601A}, //  233
        {0xA1075A24E4421730, 0xB24CF65B8612F820}, //  234
        {0xC94930AE1D529CFC, 0xDEE033F26797B628}, //  235
        {0xFB9B7CD9A4A7443C, 0x169840EF017DA3B2}, //  236
        {0x9D412E0806E88AA5, 0x8E1F289560EE864F}, //  237
        {0xC491798A08A2AD4E, 0xF1A6F2BAB92A27E3}, //  238
        {0xF5B5D7EC8ACB58A2, 0xAE10AF696774B1DC}, //  239
        {0x9991A6F3D6BF1765, 0xACCA6DA1E0A8EF2A}, //  240
        {0xBFF610B0CC6EDD3F, 0x17FD090A58D32AF4}, //  241
        {0xEFF394DCFF8A948E, 0xDDFC4B4CEF07F5B1}, //  242
        {0x95F83D0A1FB69CD9, 0x4ABDAF101564F98F}, //  243
        {0xBB764C4CA7A4440F, 0x9D6D1AD41ABE37F2}, //  244
        {0xEA53DF5FD18D5513, 0x84C86189216DC5EE}, //  245
        {0x92746B9BE2F8552C, 0x32FD3CF5B4E49BB5}, //  246
        {0xB7118682DBB66A77, 0x3FBC8C33221DC2A2}, //  247
        {0xE4D5E82392A40515, 0x0FABAF3FEAA5334B}, //  248
        {0x8F05B1163BA6832D, 0x29CB4D87F2A7400F}, //  249
        {0xB2C71D5BCA9023F8, 0x743E20E9EF511013}, //  250
        {0xDF78E4B2BD342CF6, 0x914DA9246B255417}, //  251
        {0x8BAB8EEFB6409C1A, 0x1AD089B6C2F7548F}, //  252
        {0xAE9672ABA3D0C320, 0xA184AC2473B529B2}, //  253
        {0xDA3C0F568CC4F3E8, 0xC9E5D72D90A2741F}, //  254
        {0x8865899617FB1871, 0x7E2FA67C7A658893}, //  255
        {0xAA7EEBFB9DF9DE8D, 0xDDBB901B98FEEAB8}, //  256
        {0xD51EA6FA85785631, 0x552A74227F3EA566}, //  257
        {0x8533285C936B35DE, 0xD53A88958F872760}, //  258
        {0xA67FF273B8460356, 0x8A892ABAF368F138}, //  259
        {0xD01FEF10A657842C, 0x2D2B7569B0432D86}, //  260
        {0x8213F56A67F6B29B, 0x9C3B29620E29FC74}, //  261
        {0xA298F2C501F45F42, 0x8349F3BA91B47B90}, //  262
        {0xCB3F2F7642717713, 0x241C70A936219A74}, //  263
        {0xFE0EFB53D30DD4D7, 0xED238CD383AA0111}, //  264
        {0x9EC95D1463E8A506, 0xF4363804324A40AB}, //  265
        {0xC67BB4597CE2CE48, 0xB143C6053EDCD0D6}, //  266
        {0xF81AA16FDC1B81DA, 0xDD94B7868E94050B}, //  267
        {0x9B10A4E5E9913128, 0xCA7CF2B4191C8327}, //  268
        {0xC1D4CE1F63F57D72, 0xFD1C2F611F63A3F1}, //  269
        {0xF24A01A73CF2DCCF, 0xBC633B39673C8CED}, //  270
        {0x976E41088617CA01, 0xD5BE0503E085D814}, //  271
        {0xBD49D14AA79DBC82, 0x4B2D8644D8A74E19}, //  272
        {0xEC9C459D51852BA2, 0xDDF8E7D60ED1219F}, //  273
        {0x93E1AB8252F33B45, 0xCABB90E5C942B504}, //  274
        {0xB8DA1662E7B00A17, 0x3D6A751F3B936244}, //  275
        {0xE7109BFBA19C0C9D, 0x0CC512670A783AD5}, //  276
        {0x906A617D450187E2, 0x27FB2B80668B24C6}, //  277
        {0xB484F9DC9641E9DA, 0xB1F9F660802DEDF7}, //  278
        {0xE1A63853BBD26451, 0x5E7873F8A0396974}, //  279
        {0x8D07E33455637EB2, 0xDB0B487B6423E1E9}, //  280
        {0xB049DC016ABC5E5F, 0x91CE1A9A3D2CDA63}, //  281
        {0xDC5C5301C56B75F7, 0x7641A140CC7810FC}, //  282
        {0x89B9B3E11B6329BA, 0xA9E904C87FCB0A9E}, //  283
        {0xAC2820D9623BF429, 0x546345FA9FBDCD45}, //  284
        {0xD732290FBACAF133, 0xA97C177947AD4096}, //  285
        {0x867F59A9D4BED6C0, 0x49ED8EABCCCC485E}, //  286
        {0xA81F301449EE8C70, 0x5C68F256BFFF5A75}, //  287
        {0xD226FC195C6A2F8C, 0x73832EEC6FFF3112}, //  288
        {0x83585D8FD9C25DB7, 0xC831FD53C5FF7EAC}, //  289
        {0xA42E74F3D032F525, 0xBA3E7CA8B77F5E56}, //  290
        {0xCD3A1230C43FB26F, 0x28CE1BD2E55F35EC}, //  291
        {0x80444B5E7AA7CF85, 0x7980D163CF5B81B4}, //  292
        {0xA0555E361951C366, 0xD7E105BCC3326220}, //  293
        {0xC86AB5C39FA63440, 0x8DD9472BF3FEFAA8}, //  294
        {0xFA856334878FC150, 0xB14F98F6F0FEB952}, //  295
        {0x9C935E00D4B9D8D2, 0x6ED1BF9A569F33D4}, //  296
        {0xC3B8358109E84F07, 0x0A862F80EC4700C9}, //  297
        {0xF4A642E14C6262C8, 0xCD27BB612758C0FB}, //  298
        {0x98E7E9CCCFBD7DBD, 0x8038D51CB897789D}, //  299
        {0xBF21E44003ACDD2C, 0xE0470A63E6BD56C4}, //  300
        {0xEEEA5D5004981478, 0x1858CCFCE06CAC75}, //  301
        {0x95527A5202DF0CCB, 0x0F37801E0C43EBC9}, //  302
        {0xBAA718E68396CFFD, 0xD30560258F54E6BB}, //  303
        {0xE950DF20247C83FD, 0x47C6B82EF32A206A}, //  304
        {0x91D28B7416CDD27E, 0x4CDC331D57FA5442}, //  305
        {0xB6472E511C81471D, 0xE0133FE4ADF8E953}, //  306
        {0xE3D8F9E563A198E5, 0x58180FDDD97723A7}, //  307
        {0x8E679C2F5E44FF8F, 0x570F09EAA7EA7649}, //  308
        {0xB201833B35D63F73, 0x2CD2CC6551E513DB}, //  309
        {0xDE81E40A034BCF4F, 0xF8077F7EA65E58D2}, //  310
        {0x8B112E86420F6191, 0xFB04AFAF27FAF783}, //  311
        {0xADD57A27D29339F6, 0x79C5DB9AF1F9B564}, //  312
        {0xD94AD8B1C7380874, 0x18375281AE7822BD}, //  313
        {0x87CEC76F1C830548, 0x8F2293910D0B15B6}, //  314
        {0xA9C2794AE3A3C69A, 0xB2EB3875504DDB23}, //  315
        {0xD433179D9C8CB841, 0x5FA60692A46151EC}, //  316
        {0x849FEEC281D7F328, 0xDBC7C41BA6BCD334}, //  317
        {0xA5C7EA73224DEFF3, 0x12B9B522906C0801}, //  318
        {0xCF39E50FEAE16BEF, 0xD768226B34870A01}, //  319
        {0x81842F29F2CCE375, 0xE6A1158300D46641}, //  320
        {0xA1E53AF46F801C53, 0x60495AE3C1097FD1}, //  321
        {0xCA5E89B18B602368, 0x385BB19CB14BDFC5}, //  322
        {0xFCF62C1DEE382C42, 0x46729E03DD9ED7B6}, //  323
        {0x9E19DB92B4E31BA9, 0x6C07A2C26A8346D2}, //  324
    };
    
    const u64 M52 = (1ull << 52) - 1;
    const u64 M63 = (1ull << 63) - 1;
    const u64 M32 = (1ull << 32) - 1;
    const u64 E16 = 1e16;
    const u64 E15 = 1e15;
    const u64 _9E15 = 9e15;
    const double E_N309 = 1e-309;
    const u64 E_N309_U = *(u64 *)&E_N309;
    const u64 Inf_U = (0x7ffull << 52);
    const u64 Inf_E_N309_U = Inf_U - E_N309_U;
    const u64 Max_Nan = M63;

    // variable define
    M(vi_8);
    M(vi_abs_8);
    M(vi_abs_offset_8);
    u64 vi_abs_offset[All];
    // u64 vi_abs[All];
    M(sign_8);
    M(frac_8);
    M(exp_8);
    M(mantissa_8);
    __mmask8 normal_8[group_count];
    __mmask8 lower_boundary_is_closer_8[group_count];
    M(c_8);
    M(q_8);
    M(cb_8);
    M(cbl_8);
    M(cbr_8);
    M(k_8);
    M(nk_8);
    M(h_8);
    M(pow10_hi_8);
    M(pow10_lo_8);
    M(vbl_8);
    M(vb_8);
    M(vbr_8);
    M(lower_8);
    M(upper_8);
    M(s_8);
    M(tmp_high_8);
    M(tmp_low_8);
    M(sp_8);
    M(sp10_8);
    M(sp10_add10_8);
    M(sp10_mul4_8);
    M(sp10_add10_mul4_8);
    M(digit_out_8);
    M(s_mul4_8);
    __mmask8 mask_8[group_count];
    M(tmp1_8);
    M(tmp2_8);
    M(tmp3_8);
    M(e10_8);
    M(high9_8);
    M(low8_8);
    M(buf_ptr_8);
    char *buf_ptr[All];
    i64 e10[All];
    M(h1_8);
    M(D64_h1_8);
    M(D64_h_8);
    M(r1_tmp);
    M(r2_tmp);
    M(r3_tmp);
    M(r1_vbl_8);
    M(r2_vbl_8);
    M(r3_vbl_8);
    M(r1_vb_8);
    M(r2_vb_8);
    M(r3_vb_8);
    M(r1_vbr_8);
    M(r2_vbr_8);
    M(r3_vbr_8);
    M(pow10_sl_h1_r1_8);
    M(pow10_sl_h1_r2_8);
    M(pow10_sl_h1_r3_8);
    M(pow10_sl_h_r1_8);
    M(pow10_sl_h_r2_8);
    M(pow10_sl_h_r3_8);
    __mmask8 check_is_digit16_8[group_count];
    u64 high9[All];
    u64 low8[All];
    u64 tz[All];
    u64 digit_out[All];

    // ===== calc digit_out and e10; result = digit_out * 10^e10  =====

    FORI vi_8[i] = _mm512_loadu_epi64(&value[i * group]);
    FORI vi_abs_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M63));                 // vi & M63
    FORI sign_8[i] = _mm512_srli_epi64(vi_8[i], 63);                                      // vi>>63
    FORI vi_abs_offset_8[i] = _mm512_sub_epi64(vi_abs_8[i], _mm512_set1_epi64(E_N309_U)); // vi_abs - *(u64*)&(1e-309)
    FORI _mm512_storeu_epi64(&vi_abs_offset[i * group], vi_abs_offset_8[i]);
    FORI buf_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), sign_8[i]); // buf_ptr+=sign
    FORI _mm512_storeu_epi64(&buf_ptr[i * group], buf_ptr_8[i]);
    FORI frac_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M52));                                                                                   // vi&M52
    FORI exp_8[i] = _mm512_srli_epi64(vi_abs_8[i], 52);                                                                                                   // vi_abs>>52
    FORI normal_8[i] = _mm512_cmpneq_epu64_mask(exp_8[i], _mm512_set1_epi64(0));                                                                          // exp != 0
    FORI c_8[i] = _mm512_mask_blend_epi64(normal_8[i], frac_8[i], _mm512_or_epi64(frac_8[i], _mm512_set1_epi64(1ull << 52)));                             // c = frac | (normal << 52);
    FORI q_8[i] = _mm512_mask_blend_epi64(normal_8[i], _mm512_set1_epi64(-1074), _mm512_sub_epi64(exp_8[i], _mm512_set1_epi64(1075)));                    // q = exp - 1074 - normal; // exp - 1074 - 1 or exp - 1074 - 0
    FORI lower_boundary_is_closer_8[i] = _mm512_cmpeq_epu64_mask(frac_8[i], _mm512_set1_epi64(0));                                                        // lower_boundary_is_closer = (frac == 0);
    FORI cb_8[i] = _mm512_slli_epi64(c_8[i], 2);                                                                                                          // 4 * c
    FORI cbl_8[i] = _mm512_mask_sub_epi64(_mm512_sub_epi64(cb_8[i], _mm512_set1_epi64(2)), lower_boundary_is_closer_8[i], cb_8[i], _mm512_set1_epi64(1)); // 4 * c - 2 + lower_boundary_is_closer;
    // FORI cbr_8[i] = _mm512_add_epi64(cb_8[i], _mm512_set1_epi64(2));                                                                                   // 4 * c + 2;
    FORI k_8[i] = _mm512_srai_epi64(_mm512_mask_sub_epi64(_mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          lower_boundary_is_closer_8[i],
                                                          _mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          _mm512_set1_epi64(524031)),
                                    22);                           // k = (q * 1262611 - (lower_boundary_is_closer ? 524031 : 0)) >> 22;
    FORI nk_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(0), k_8[i]); //-k
    FORI h_8[i] = _mm512_add_epi64(_mm512_add_epi64(q_8[i], _mm512_set1_epi64(1)),
                                   _mm512_srai_epi64(_mm512_mullo_epi64(nk_8[i],
                                                                        _mm512_set1_epi64(1741647)),
                                                     19));                                              // h = q + FloorLog2Pow10(-k) + 1;
    FORI pow10_hi_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), &g[-kMin], sizeof(u64)); // 2 * (-k)
    const char *pow10_lo_ptr = ((char *)&g[-kMin]) + sizeof(u64);
    //FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), pow10_lo_ptr, sizeof(u64)); // 2 * (-k) + 1
    // FORI FORJ buffer[i * group + j][0] = '-';
    
#if 0
    // avx512_roundOdd may not efficient, how to optimize?
    FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    FORI vb_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]));
    FORI vbr_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbr_8[i], h_8[i]));
#else
    FORI h1_8[i] = _mm512_add_epi64(h_8[i], _mm512_set1_epi64(1));       // h + 1
    FORI D64_h_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h_8[i]);   // D64_h = 64 - h;
    FORI D64_h1_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h1_8[i]); // D64_h1 = 64 - (h + 1);
    FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), pow10_lo_ptr, sizeof(u64)); // 2 * (-k) + 1
    // FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    // for(int i=0;i<group_count;++i)
    // for(int i=0;i<group_count-1;++i)avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    // for(int i=group_count-1;i<group_count;++i)avx512_u128_mul_u64_epu64_2(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI vbl_8[i] = roundOdd(r1_vbl_8[i], r2_vbl_8[i]); // r1 | ( r2 > 1 );
    // cbl
    // cb = lower_boundary_is_closer_8 ? cbl + 1 : cbl + 2
    // cbr = cb + 2

    // FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]), r1_8[i], r2_8[i], r3_8[i]);
    // FORI vb_8[i] = roundOdd(r1_8[i], r2_8[i]); // r1 | ( r2 > 1 );

    // pow10 << h
    FORI pow10_sl_h_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h_8[i]);                                                            // pow10_hi>>(64-h)
    FORI pow10_sl_h_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h_8[i])); // pow10_hi<<h | pow10_lo>>(64-h)
    FORI pow10_sl_h_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h_8[i]);                                                                // pow10_lo<<h

    // pow10 << (h+1)
    FORI pow10_sl_h1_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h1_8[i]);                                                             // pow10_hi>>(64-(h+1))
    FORI pow10_sl_h1_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h1_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h1_8[i])); // pow10_hi<<(h+1) | pow10_lo>>(64-(h+1))
    FORI pow10_sl_h1_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h1_8[i]);                                                                 // pow10_lo<<(h+1)

    // lower_boundary_is_closer ? (pow10 << h) : (pow10<<(h+1)) ;
    FORI r1_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r1_8[i], pow10_sl_h_r1_8[1]);
    FORI r2_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r2_8[i], pow10_sl_h_r2_8[1]);
    FORI r3_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r3_8[i], pow10_sl_h_r3_8[1]);
    //FORI r1_tmp[i] = pow10_sl_h1_r1_8[i];
    //FORI r2_tmp[i] = pow10_sl_h1_r2_8[i];
    //FORI r3_tmp[i] = pow10_sl_h1_r3_8[i];

    // cb = cbl + 1 or cbl + 2; u192 + u192
    FORI r3_vb_8[i] = _mm512_add_epi64(r3_vbl_8[i], r3_tmp[i]);
    FORI r2_vb_8[i] = _mm512_add_epi64(r2_vbl_8[i], r2_tmp[i]);
    // remove next line can pass the check , can be faster but is all can be right ?  how to prove ?
    // FORI r2_vb_8[i] = _mm512_mask_add_epi64(r2_vb_8[i], _mm512_cmplt_epu64_mask(r3_vb_8[i], r3_vbl_8[i]), r2_vb_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vb_8[i] = _mm512_add_epi64(r1_vbl_8[i], r1_tmp[i]);
    FORI r1_vb_8[i] = _mm512_mask_add_epi64(r1_vb_8[i], _mm512_cmplt_epu64_mask(r2_vb_8[i], r2_vbl_8[i]), r1_vb_8[i], _mm512_set1_epi64(1)); // carry
    //

    // cbr = cb + 2 ; u192 + u192
    FORI r3_vbr_8[i] = _mm512_add_epi64(r3_vb_8[i], pow10_sl_h1_r3_8[i]);
    FORI r2_vbr_8[i] = _mm512_add_epi64(r2_vb_8[i], pow10_sl_h1_r2_8[i]);
    // FORI r2_vbr_8[i] = _mm512_mask_add_epi64(r2_vbr_8[i], _mm512_cmplt_epu64_mask(r3_vbr_8[i], r3_vb_8[i]), r2_vbr_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vbr_8[i] = _mm512_add_epi64(r1_vb_8[i], pow10_sl_h1_r1_8[i]);
    FORI r1_vbr_8[i] = _mm512_mask_add_epi64(r1_vbr_8[i], _mm512_cmplt_epu64_mask(r2_vbr_8[i], r2_vb_8[i]), r1_vbr_8[i], _mm512_set1_epi64(1)); // carry
    //
    FORI vb_8[i] = roundOdd(r1_vb_8[i], r2_vb_8[i]);    // r1 | ( r2 > 1 );
    FORI vbr_8[i] = roundOdd(r1_vbr_8[i], r2_vbr_8[i]); // r1 | ( r2 > 1 );
#endif

    FORI lower_8[i] = _mm512_add_epi64(vbl_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbl + (c & 1);
    FORI upper_8[i] = _mm512_sub_epi64(vbr_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbr - (c & 1);
    FORI s_8[i] = _mm512_srli_epi64(vb_8[i], 2);                                                  // vb / 4 == vb >> 2
    // 1844674407370955161 = ceil(2**64 / 10)  ; 2**64 > 1e17*10
    // n / 10 = (n * 1844674407370955161) >> 64
    FORI avx512_u64_mul_u64_epu64(s_8[i], _mm512_set1_epi64(1844674407370955162ull), sp_8[i], tmp_low_8[i]); // sp = s / 10;
    FORI sp10_8[i] = _mm512_mullo_epi64(sp_8[i], _mm512_set1_epi64(10));                                     // sp10 = sp * 10;
    FORI sp10_add10_8[i] = _mm512_add_epi64(sp10_8[i], _mm512_set1_epi64(10));                               // sp * 10 + 10
    FORI sp10_mul4_8[i] = _mm512_slli_epi64(sp10_8[i], 2);                                                   // sp10 * 4
    FORI sp10_add10_mul4_8[i] = _mm512_slli_epi64(sp10_add10_8[i], 2);                                       // (sp10 + 10) * 4
    // u64 digit_out = s + (((4 * s) < std::min(lower, upper - 3)) | ((0b11001000 >> (vb & 7)) & 1));//s or s + 1
    // if (lower <= sp10 * 4)digit_out = sp10;
    // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    FORI digit_out_8[i] = s_8[i];
    // FORI s_mul4_8[i] = _mm512_slli_epi64(s_8[i], 2);                                                                                           // s * 4 == vb & (-4)
    FORI s_mul4_8[i] = _mm512_and_epi64(_mm512_set1_epi64(-4), vb_8[i]);
    // FORI s_mul4_8[i] = _mm512_andnot_epi64(_mm512_set1_epi64(3),vb_8[i]);
    FORI tmp1_8[i] = _mm512_srlv_epi64(_mm512_set1_epi64(0b11001000), _mm512_and_epi64(vb_8[i], _mm512_set1_epi64(7)));                        // ((0b11001000 >> (vb & 7))
    FORI mask_8[i] = _mm512_cmplt_epi64_mask(s_mul4_8[i], _mm512_min_epi64(lower_8[i], _mm512_sub_epi64(upper_8[i], _mm512_set1_epi64(3))));   // 4*s <= min(lower,upper-3)
    FORI tmp2_8[i] = _mm512_mask_blend_epi64(mask_8[i], _mm512_set1_epi64(0), _mm512_set1_epi64(1));                                           // if( 4*s <= min(lower,upper-3) ) tmp2 = 1;
    FORI tmp3_8[i] = _mm512_or_epi64(_mm512_and_epi64(tmp1_8[i], _mm512_set1_epi64(1)), tmp2_8[i]);                                            // tmp3 = (tmp1 & 1) | tmp2  ; // tmp3 = 0 or 1
    FORI digit_out_8[i] = _mm512_add_epi64(digit_out_8[i], tmp3_8[i]);                                                                         // s or s+1
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(lower_8[i], sp10_mul4_8[i]), digit_out_8[i], sp10_8[i]);             // if (lower <= sp10 * 4)digit_out = sp10;
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(sp10_add10_mul4_8[i], upper_8[i]), digit_out_8[i], sp10_add10_8[i]); // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    // print_8(digit_out_8[0]);
    // printf("len=%d\n",DecimalLength(digit_out_8[0][0]));
    // print_8(k_8[0]);
    // const __m512i E16_8 = _mm512_set1_epi64(E16);
    const __m512i E15_8 = _mm512_set1_epi64(E15);
    const __m512i _9E15_8 = _mm512_set1_epi64(_9E15);                                                       // 1e16-1e15=9e15
    FORI check_is_digit16_8[i] = _mm512_cmplt_epu64_mask(_mm512_sub_epi64(digit_out_8[i], E15_8), _9E15_8); // digit_out_8 in [1e15,1e16)
    FORI e10_8[i] = _mm512_add_epi64(k_8[i], _mm512_mask_blend_epi64(check_is_digit16_8[i], _mm512_set1_epi64(16), _mm512_set1_epi64(15)));
    // FORI digit_out_8[i] = _mm512_mask_blend_epi64(check_is_digit16_8[i],
    //                                               digit_out_8[i],
    //                                               _mm512_mullo_epi64(digit_out_8[i], _mm512_set1_epi64(10))); // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;
    FORI digit_out_8[i] = _mm512_mask_mullo_epi64(digit_out_8[i], check_is_digit16_8[i], digit_out_8[i], _mm512_set1_epi64(10)); // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;
    // FORI e10_8[i] = _mm512_mask_add_epi64(_mm512_add_epi64(k_8[i], _mm512_set1_epi64(16)), check_is_digit16_8[i], k_8[i], _mm512_set1_epi64(15));//if(1e15 <= digit_out_8 < 1e16) k+=15; else k+=16;

    //  ===== calc digit_out and e10 end; =====
    // print digit_out and  e10

    FORI _mm512_storeu_epi64(&e10[i * group], e10_8[i]);
    FORI _mm512_storeu_epi64(&digit_out[i * group], digit_out_8[i]);
    // print_8(digit_out_8[0]);
    // printf("len = %d\n",dec_length(digit_out_8[0][0]));
    //  print_8(e10_8[0]);
    FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(digit_out_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC), // round down
                                                        _mm512_set1_pd(1e-8)));                                                              // 1e17/1e8 = 9 digit ; digit17 / digit8 = digit9
    FORI low8_8[i] = _mm512_sub_epi64(digit_out_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8)));                               // 1e17%1e8 = 8 digit
    //  print all digit 17;
    FORI FORJ buffer[i * group + j][0] = '-';
#if 1
    const long long *exp_ptr = &exp_result3[324];
    for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1); // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);    // high 8 bit in 32bit

        // 1441151881 = 2**57 / 1e8
        u64 num1_print[8], num1_2_print[8];
        __m512i num1 = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + 0], _mm512_set1_epi64(1441151881)), 57); // high9/1e8
        __m512i num1_2 = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + 1], _mm512_set1_epi64(1441151881)), 57);
        _mm512_storeu_epi64(num1_print, _mm512_or_epi64(num1, _mm512_set1_epi64('.' * 256 + '0')));
        _mm512_storeu_epi64(num1_2_print, _mm512_or_epi64(num1_2, _mm512_set1_epi64('.' * 256 + '0')));
        __m512i num2_9 = _mm512_sub_epi64(high9_8[i * 2 + 0], _mm512_mullo_epi64(num1, _mm512_set1_epi64(1e8))); // num2_9 = high9 - num1*(10^8)
        __m512i num2_9_2 = _mm512_sub_epi64(high9_8[i * 2 + 1], _mm512_mullo_epi64(num1_2, _mm512_set1_epi64(1e8)));

        __m512i num_low16[4];
        __m512i num1234_5678_8[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num_final_print[4 * 8];
        num_low16[0] = num2_9;
        num_low16[1] = num2_9_2;
        num_low16[2] = low8_8[i * 2 + 0];
        num_low16[3] = low8_8[i * 2 + 1];

        FORJ4 num1234_5678_8[j] = _mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
        FORJ4 num1234_8[j] = _mm512_srli_epi64(num1234_5678_8[j], 48);
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000)));
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
		//FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778));
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10));
            // FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_final_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));
        FORJ4 tz_low16[j] = _mm512_srli_epi64(_mm512_lzcnt_epi64(num_final[j]), 3);
        tz_8[0] = _mm512_mask_add_epi64(tz_low16[2], _mm512_cmpeq_epi64_mask(tz_low16[2], _mm512_set1_epi64(8)), tz_low16[2], tz_low16[0]);
        tz_8[1] = _mm512_mask_add_epi64(tz_low16[3], _mm512_cmpeq_epi64_mask(tz_low16[3], _mm512_set1_epi64(8)), tz_low16[3], tz_low16[1]);
        _mm512_storeu_epi64(&tz[(i * 2) * group], tz_8[0]);
        _mm512_storeu_epi64(&tz[(i * 2 + 1) * group], tz_8[1]);
        unsigned long long offset1[8], offset2[8];
        _mm512_storeu_epi64(offset1, _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[0], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[0]));
        _mm512_storeu_epi64(offset2, _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[1], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[1]));
        //_mm512_storeu_epi64(offset1, _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(18), tz_8[0]) , _mm512_srli_epi64( tz_8[0], 4)));
        //_mm512_storeu_epi64(offset2, _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(18), tz_8[0]) , _mm512_srli_epi64( tz_8[1], 4)));

        
        for (int j = 0; j < group; ++j)
        {
            
                char *buf_ptr1 = buf_ptr[i * 2 * group + j];
                *(u64 *)(buf_ptr1) = num1_print[j]; // write 8 byte but only low 2 byte use;
                _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_final_print[2 * 8 + j], num_final_print[0 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr1 + offset1[j]) = exp_ptr[e10[2 * i * group + j]];

                char *buf_ptr2 = buf_ptr[(i * 2 + 1) * group + j];
                *(u64 *)(buf_ptr2) = num1_2_print[j];
                _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_final_print[3 * 8 + j], num_final_print[1 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr2 + offset2[j]) = exp_ptr[e10[(2 * i + 1) * group + j]];
            
        }
    }


#endif

    // adjust { Nan , Inf , 0 , <1e-309 } double value , unlikely ,
    if (1)
        FORI FORJ
        {
            // if(vi_abs[i*group+j] - E_N309_U > (0x7ffull<<52) - E_N309_U)
            // if(vi_abs[i*group + j] == 0)memcpy(buf_ptr[i*group+j],"0\0",2);
            // if (vi_abs[i*group+j] - E_N309_U >= ( ((0x7ffull << 52)) - E_N309_U) ) // unlikely
            if (vi_abs_offset[i * group + j] >= (Inf_E_N309_U))
            {
                if (vi_abs_offset[i * group + j] <= (Max_Nan - E_N309_U))
                {
                    memcpy(buf_ptr[i * group + j], vi_abs_offset[i * group + j] == Inf_E_N309_U ? "inf\0" : "nan\0", 4);
                }
                else
                {
                    // adjust to shortest print
                    if (vi_abs_offset[i * group + j] == (0ull - E_N309_U))
                    {
                        memcpy(buf_ptr[i * group + j], "0\0", 2);
                        // memcpy(buf_ptr[i * group + j], "0.0\0", 4);
                        continue;
                    }
                    u64 len = dec_length(digit_out[i * group + j]);
                    u64 tz_num = tz[i * group + j];
                    u64 lz_num = 17 - len; // lz_num >= 2
                    u64 signficant = 17 - tz_num - lz_num;
                    u64 start_pos = lz_num + 1;
                    if (signficant > 1ull)
                    {
                        buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        if (signficant <= 9)
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                        else
                        {
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                            *(i64 *)&buf_ptr[i * group + j][2 + 8] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1 + 8];
                        }
                        *(i64 *)&buf_ptr[i * group + j][signficant + 1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    else
                    {
                        *(short *)&buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        *(i64 *)&buf_ptr[i * group + j][1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    // printf("len = %llu lz = %llu tz = %llu signficant = %llu start_pos = %llu\n",len,lz_num,tz_num, signficant,start_pos);
                }
            }
        }
}

extern "C"
{
	int d2e(double value, char *buffer)
	{
		return d2e<16>(value, buffer);
	}
	int d2sci(double value, char *buffer)
	{
		return my_dou_to_sci_opt<16>(value, buffer);
	}
	int my_d2s(double value, char *buffer)
	{
		// return my_dou_to_short_opt<16>(value, buffer);
		return my_dou_to_short_test_opt2<16>(value, buffer);
	}
	int my_d2s_debug(double value, char *buffer)
	{
		return my_dou_to_short_test_opt2<16,1>(value, buffer);
	}
	int d2sci_32(double *value, char *buffer)
	{
		return my_dou_to_sci_avx512_pure2_opt2<0, 16, 32, 1, 0>(value, buffer);
	}
	int d2sci_32_init()
	{
		return my_dou_to_sci_avx512_pure2_opt2<0, 16, 32, 1, 1>(NULL, NULL);
	}
	void d2sci_32v(double *value, char **buffer)
	{
		my_dou_to_sci_avx512_pure9<0, 16, 8 * 4, 3>(value, buffer);
		return;
	}


	void d2s_32v(double *value,char** buffer)
	{
		d2s_32v_impl(value,buffer);
	}
}