#include <immintrin.h>
#include "d2sci_table.h"
static inline unsigned long long dec_length(const unsigned long long v)
{
    // return value [1,16]
    return (v >= 0) +               // 0
           (v >= 10) +              // 1
           (v >= 100) +             // 2
           (v >= 1000) +            // 3
           (v >= 10000) +           // 4
           (v >= 100000) +          // 5
           (v >= 1000000) +         // 6
           (v >= 10000000) +        // 7
           (v >= 100000000) +       // 8
           (v >= 1000000000) +      // 9
           (v >= 10000000000) +     // 10
           (v >= 100000000000) +    // 11
           (v >= 1000000000000) +   // 12
           (v >= 10000000000000) +  // 13
           (v >= 100000000000000) + // 14
           (v >= 1000000000000000)  // 15
        ;
}
static inline void avx512_u64_mul_u64_epu64(__m512i a, __m512i b, __m512i &result_high, __m512i &result_low)
{
    auto add = [](__m512i x, __m512i y) -> __m512i
    { return _mm512_add_epi64(x, y); };
    __m512i M32_8 = _mm512_set1_epi64(0xFFFFFFFFull);
    //
    __m512i a_high = _mm512_srli_epi64(a, 32);
    __m512i b_high = _mm512_srli_epi64(b, 32);
    //
    __m512i high_high = _mm512_mul_epu32(a_high, b_high);
    __m512i high_low = _mm512_mul_epu32(a_high, b);
    __m512i low_high = _mm512_mul_epu32(a, b_high);
    __m512i low_low = _mm512_mul_epu32(a, b);
    //
    __m512i low_high_low = _mm512_and_epi64(low_high, M32_8);
    __m512i low_low_high = _mm512_srli_epi64(low_low, 32);

    high_low = add(high_low, add(low_low_high, low_high_low));
    result_high = add(add(high_high, _mm512_srli_epi64(high_low, 32)), _mm512_srli_epi64(low_high, 32));
    result_low = _mm512_mullo_epi64(a, b);
}
static inline void avx512_u128_mul_u64_epu64(__m512i ah, __m512i al, __m512i b, __m512i &r1, __m512i &r2, __m512i &r3)
{
    // auto add =[](__m512i x, __m512i y)->__m512i{return _mm512_add_epi64(x, y);};
    __m512i high_high, high_low, low_high, low_low;
    avx512_u64_mul_u64_epu64(ah, b, high_high, high_low);
    avx512_u64_mul_u64_epu64(al, b, low_high, low_low);
    r3 = low_low;
    r2 = _mm512_add_epi64(high_low, low_high);
    r1 = _mm512_mask_add_epi64(high_high, _mm512_cmplt_epu64_mask(r2, high_low), high_high, _mm512_set1_epi64(1));
}
static inline __m512i avx512_roundOdd(__m512i ah, __m512i al, __m512i b)
{
    __m512i r1, r2, r3;
    avx512_u128_mul_u64_epu64(ah, al, b, r1, r2, r3);
    // return r1 | (r2 > 1);
    return _mm512_mask_or_epi64(r1, _mm512_cmpgt_epu64_mask(r2, _mm512_set1_epi64(1)), r1, _mm512_set1_epi64(1));
}
static inline __m512i roundOdd(__m512i r1, __m512i r2)
{
    return _mm512_mask_or_epi64(r1, _mm512_cmpgt_epu64_mask(r2, _mm512_set1_epi64(1)), r1, _mm512_set1_epi64(1));
}

#if 0
extern "C" void d2s_v32(double* value,char** buffer){
	// base on schubfach algorithm;
    // avx512 implementation;

#define FORI for (int i = 0; i < group_count; ++i)
#define FORJ for (int j = 0; j < group; ++j)
#define M(v) __m512i v[group_count];

	using u64 = unsigned long long;
    using i64 = long long;
    // ASCII : e-324 -> e+308
    //const long long exp_result3[308 - (-324) + 1] = {0x3432332d65, 0x3332332d65, 0x3232332d65, 0x3132332d65, 0x3032332d65, 0x3931332d65, 0x3831332d65, 0x3731332d65, 0x3631332d65, 0x3531332d65, 0x3431332d65, 0x3331332d65, 0x3231332d65, 0x3131332d65, 0x3031332d65, 0x3930332d65, 0x3830332d65, 0x3730332d65, 0x3630332d65, 0x3530332d65, 0x3430332d65, 0x3330332d65, 0x3230332d65, 0x3130332d65, 0x3030332d65, 0x3939322d65, 0x3839322d65, 0x3739322d65, 0x3639322d65, 0x3539322d65, 0x3439322d65, 0x3339322d65, 0x3239322d65, 0x3139322d65, 0x3039322d65, 0x3938322d65, 0x3838322d65, 0x3738322d65, 0x3638322d65, 0x3538322d65, 0x3438322d65, 0x3338322d65, 0x3238322d65, 0x3138322d65, 0x3038322d65, 0x3937322d65, 0x3837322d65, 0x3737322d65, 0x3637322d65, 0x3537322d65, 0x3437322d65, 0x3337322d65, 0x3237322d65, 0x3137322d65, 0x3037322d65, 0x3936322d65, 0x3836322d65, 0x3736322d65, 0x3636322d65, 0x3536322d65, 0x3436322d65, 0x3336322d65, 0x3236322d65, 0x3136322d65, 0x3036322d65, 0x3935322d65, 0x3835322d65, 0x3735322d65, 0x3635322d65, 0x3535322d65, 0x3435322d65, 0x3335322d65, 0x3235322d65, 0x3135322d65, 0x3035322d65, 0x3934322d65, 0x3834322d65, 0x3734322d65, 0x3634322d65, 0x3534322d65, 0x3434322d65, 0x3334322d65, 0x3234322d65, 0x3134322d65, 0x3034322d65, 0x3933322d65, 0x3833322d65, 0x3733322d65, 0x3633322d65, 0x3533322d65, 0x3433322d65, 0x3333322d65, 0x3233322d65, 0x3133322d65, 0x3033322d65, 0x3932322d65, 0x3832322d65, 0x3732322d65, 0x3632322d65, 0x3532322d65, 0x3432322d65, 0x3332322d65, 0x3232322d65, 0x3132322d65, 0x3032322d65, 0x3931322d65, 0x3831322d65, 0x3731322d65, 0x3631322d65, 0x3531322d65, 0x3431322d65, 0x3331322d65, 0x3231322d65, 0x3131322d65, 0x3031322d65, 0x3930322d65, 0x3830322d65, 0x3730322d65, 0x3630322d65, 0x3530322d65, 0x3430322d65, 0x3330322d65, 0x3230322d65, 0x3130322d65, 0x3030322d65, 0x3939312d65, 0x3839312d65, 0x3739312d65, 0x3639312d65, 0x3539312d65, 0x3439312d65, 0x3339312d65, 0x3239312d65, 0x3139312d65, 0x3039312d65, 0x3938312d65, 0x3838312d65, 0x3738312d65, 0x3638312d65, 0x3538312d65, 0x3438312d65, 0x3338312d65, 0x3238312d65, 0x3138312d65, 0x3038312d65, 0x3937312d65, 0x3837312d65, 0x3737312d65, 0x3637312d65, 0x3537312d65, 0x3437312d65, 0x3337312d65, 0x3237312d65, 0x3137312d65, 0x3037312d65, 0x3936312d65, 0x3836312d65, 0x3736312d65, 0x3636312d65, 0x3536312d65, 0x3436312d65, 0x3336312d65, 0x3236312d65, 0x3136312d65, 0x3036312d65, 0x3935312d65, 0x3835312d65, 0x3735312d65, 0x3635312d65, 0x3535312d65, 0x3435312d65, 0x3335312d65, 0x3235312d65, 0x3135312d65, 0x3035312d65, 0x3934312d65, 0x3834312d65, 0x3734312d65, 0x3634312d65, 0x3534312d65, 0x3434312d65, 0x3334312d65, 0x3234312d65, 0x3134312d65, 0x3034312d65, 0x3933312d65, 0x3833312d65, 0x3733312d65, 0x3633312d65, 0x3533312d65, 0x3433312d65, 0x3333312d65, 0x3233312d65, 0x3133312d65, 0x3033312d65, 0x3932312d65, 0x3832312d65, 0x3732312d65, 0x3632312d65, 0x3532312d65, 0x3432312d65, 0x3332312d65, 0x3232312d65, 0x3132312d65, 0x3032312d65, 0x3931312d65, 0x3831312d65, 0x3731312d65, 0x3631312d65, 0x3531312d65, 0x3431312d65, 0x3331312d65, 0x3231312d65, 0x3131312d65, 0x3031312d65, 0x3930312d65, 0x3830312d65, 0x3730312d65, 0x3630312d65, 0x3530312d65, 0x3430312d65, 0x3330312d65, 0x3230312d65, 0x3130312d65, 0x3030312d65, 0x39392d65, 0x38392d65, 0x37392d65, 0x36392d65, 0x35392d65, 0x34392d65, 0x33392d65, 0x32392d65, 0x31392d65, 0x30392d65, 0x39382d65, 0x38382d65, 0x37382d65, 0x36382d65, 0x35382d65, 0x34382d65, 0x33382d65, 0x32382d65, 0x31382d65, 0x30382d65, 0x39372d65, 0x38372d65, 0x37372d65, 0x36372d65, 0x35372d65, 0x34372d65, 0x33372d65, 0x32372d65, 0x31372d65, 0x30372d65, 0x39362d65, 0x38362d65, 0x37362d65, 0x36362d65, 0x35362d65, 0x34362d65, 0x33362d65, 0x32362d65, 0x31362d65, 0x30362d65, 0x39352d65, 0x38352d65, 0x37352d65, 0x36352d65, 0x35352d65, 0x34352d65, 0x33352d65, 0x32352d65, 0x31352d65, 0x30352d65, 0x39342d65, 0x38342d65, 0x37342d65, 0x36342d65, 0x35342d65, 0x34342d65, 0x33342d65, 0x32342d65, 0x31342d65, 0x30342d65, 0x39332d65, 0x38332d65, 0x37332d65, 0x36332d65, 0x35332d65, 0x34332d65, 0x33332d65, 0x32332d65, 0x31332d65, 0x30332d65, 0x39322d65, 0x38322d65, 0x37322d65, 0x36322d65, 0x35322d65, 0x34322d65, 0x33322d65, 0x32322d65, 0x31322d65, 0x30322d65, 0x39312d65, 0x38312d65, 0x37312d65, 0x36312d65, 0x35312d65, 0x34312d65, 0x33312d65, 0x32312d65, 0x31312d65, 0x30312d65, 0x39302d65, 0x38302d65, 0x37302d65, 0x36302d65, 0x35302d65, 0x34302d65, 0x33302d65, 0x32302d65, 0x31302d65, 0x30302b65, 0x31302b65, 0x32302b65, 0x33302b65, 0x34302b65, 0x35302b65, 0x36302b65, 0x37302b65, 0x38302b65, 0x39302b65, 0x30312b65, 0x31312b65, 0x32312b65, 0x33312b65, 0x34312b65, 0x35312b65, 0x36312b65, 0x37312b65, 0x38312b65, 0x39312b65, 0x30322b65, 0x31322b65, 0x32322b65, 0x33322b65, 0x34322b65, 0x35322b65, 0x36322b65, 0x37322b65, 0x38322b65, 0x39322b65, 0x30332b65, 0x31332b65, 0x32332b65, 0x33332b65, 0x34332b65, 0x35332b65, 0x36332b65, 0x37332b65, 0x38332b65, 0x39332b65, 0x30342b65, 0x31342b65, 0x32342b65, 0x33342b65, 0x34342b65, 0x35342b65, 0x36342b65, 0x37342b65, 0x38342b65, 0x39342b65, 0x30352b65, 0x31352b65, 0x32352b65, 0x33352b65, 0x34352b65, 0x35352b65, 0x36352b65, 0x37352b65, 0x38352b65, 0x39352b65, 0x30362b65, 0x31362b65, 0x32362b65, 0x33362b65, 0x34362b65, 0x35362b65, 0x36362b65, 0x37362b65, 0x38362b65, 0x39362b65, 0x30372b65, 0x31372b65, 0x32372b65, 0x33372b65, 0x34372b65, 0x35372b65, 0x36372b65, 0x37372b65, 0x38372b65, 0x39372b65, 0x30382b65, 0x31382b65, 0x32382b65, 0x33382b65, 0x34382b65, 0x35382b65, 0x36382b65, 0x37382b65, 0x38382b65, 0x39382b65, 0x30392b65, 0x31392b65, 0x32392b65, 0x33392b65, 0x34392b65, 0x35392b65, 0x36392b65, 0x37392b65, 0x38392b65, 0x39392b65, 0x3030312b65, 0x3130312b65, 0x3230312b65, 0x3330312b65, 0x3430312b65, 0x3530312b65, 0x3630312b65, 0x3730312b65, 0x3830312b65, 0x3930312b65, 0x3031312b65, 0x3131312b65, 0x3231312b65, 0x3331312b65, 0x3431312b65, 0x3531312b65, 0x3631312b65, 0x3731312b65, 0x3831312b65, 0x3931312b65, 0x3032312b65, 0x3132312b65, 0x3232312b65, 0x3332312b65, 0x3432312b65, 0x3532312b65, 0x3632312b65, 0x3732312b65, 0x3832312b65, 0x3932312b65, 0x3033312b65, 0x3133312b65, 0x3233312b65, 0x3333312b65, 0x3433312b65, 0x3533312b65, 0x3633312b65, 0x3733312b65, 0x3833312b65, 0x3933312b65, 0x3034312b65, 0x3134312b65, 0x3234312b65, 0x3334312b65, 0x3434312b65, 0x3534312b65, 0x3634312b65, 0x3734312b65, 0x3834312b65, 0x3934312b65, 0x3035312b65, 0x3135312b65, 0x3235312b65, 0x3335312b65, 0x3435312b65, 0x3535312b65, 0x3635312b65, 0x3735312b65, 0x3835312b65, 0x3935312b65, 0x3036312b65, 0x3136312b65, 0x3236312b65, 0x3336312b65, 0x3436312b65, 0x3536312b65, 0x3636312b65, 0x3736312b65, 0x3836312b65, 0x3936312b65, 0x3037312b65, 0x3137312b65, 0x3237312b65, 0x3337312b65, 0x3437312b65, 0x3537312b65, 0x3637312b65, 0x3737312b65, 0x3837312b65, 0x3937312b65, 0x3038312b65, 0x3138312b65, 0x3238312b65, 0x3338312b65, 0x3438312b65, 0x3538312b65, 0x3638312b65, 0x3738312b65, 0x3838312b65, 0x3938312b65, 0x3039312b65, 0x3139312b65, 0x3239312b65, 0x3339312b65, 0x3439312b65, 0x3539312b65, 0x3639312b65, 0x3739312b65, 0x3839312b65, 0x3939312b65, 0x3030322b65, 0x3130322b65, 0x3230322b65, 0x3330322b65, 0x3430322b65, 0x3530322b65, 0x3630322b65, 0x3730322b65, 0x3830322b65, 0x3930322b65, 0x3031322b65, 0x3131322b65, 0x3231322b65, 0x3331322b65, 0x3431322b65, 0x3531322b65, 0x3631322b65, 0x3731322b65, 0x3831322b65, 0x3931322b65, 0x3032322b65, 0x3132322b65, 0x3232322b65, 0x3332322b65, 0x3432322b65, 0x3532322b65, 0x3632322b65, 0x3732322b65, 0x3832322b65, 0x3932322b65, 0x3033322b65, 0x3133322b65, 0x3233322b65, 0x3333322b65, 0x3433322b65, 0x3533322b65, 0x3633322b65, 0x3733322b65, 0x3833322b65, 0x3933322b65, 0x3034322b65, 0x3134322b65, 0x3234322b65, 0x3334322b65, 0x3434322b65, 0x3534322b65, 0x3634322b65, 0x3734322b65, 0x3834322b65, 0x3934322b65, 0x3035322b65, 0x3135322b65, 0x3235322b65, 0x3335322b65, 0x3435322b65, 0x3535322b65, 0x3635322b65, 0x3735322b65, 0x3835322b65, 0x3935322b65, 0x3036322b65, 0x3136322b65, 0x3236322b65, 0x3336322b65, 0x3436322b65, 0x3536322b65, 0x3636322b65, 0x3736322b65, 0x3836322b65, 0x3936322b65, 0x3037322b65, 0x3137322b65, 0x3237322b65, 0x3337322b65, 0x3437322b65, 0x3537322b65, 0x3637322b65, 0x3737322b65, 0x3837322b65, 0x3937322b65, 0x3038322b65, 0x3138322b65, 0x3238322b65, 0x3338322b65, 0x3438322b65, 0x3538322b65, 0x3638322b65, 0x3738322b65, 0x3838322b65, 0x3938322b65, 0x3039322b65, 0x3139322b65, 0x3239322b65, 0x3339322b65, 0x3439322b65, 0x3539322b65, 0x3639322b65, 0x3739322b65, 0x3839322b65, 0x3939322b65, 0x3030332b65, 0x3130332b65, 0x3230332b65, 0x3330332b65, 0x3430332b65, 0x3530332b65, 0x3630332b65, 0x3730332b65, 0x3830332b65};
    const int group = 8;                 // avx512 : 512bit = 8 double
    const int group_count = 4;           // 4*8 = 32 double
    const int All = group_count * group; // 32
    // for(int i=0;i<All;i++) printf("v[%d]=%.16le\n",i,v[i]);
    const int kMin = -292;
    const int kMax = 324;
	struct u64x2{
		u64 hi;
		u64 lo;
	};
    static const u64x2 g[kMax - kMin + 1] = {
        {0xFF77B1FCBEBCDC4F, 0x25E8E89C13BB0F7B}, // -292
        {0x9FAACF3DF73609B1, 0x77B191618C54E9AD}, // -291
        {0xC795830D75038C1D, 0xD59DF5B9EF6A2418}, // -290
        {0xF97AE3D0D2446F25, 0x4B0573286B44AD1E}, // -289
        {0x9BECCE62836AC577, 0x4EE367F9430AEC33}, // -288
        {0xC2E801FB244576D5, 0x229C41F793CDA740}, // -287
        {0xF3A20279ED56D48A, 0x6B43527578C11110}, // -286
        {0x9845418C345644D6, 0x830A13896B78AAAA}, // -285
        {0xBE5691EF416BD60C, 0x23CC986BC656D554}, // -284
        {0xEDEC366B11C6CB8F, 0x2CBFBE86B7EC8AA9}, // -283
        {0x94B3A202EB1C3F39, 0x7BF7D71432F3D6AA}, // -282
        {0xB9E08A83A5E34F07, 0xDAF5CCD93FB0CC54}, // -281
        {0xE858AD248F5C22C9, 0xD1B3400F8F9CFF69}, // -280
        {0x91376C36D99995BE, 0x23100809B9C21FA2}, // -279
        {0xB58547448FFFFB2D, 0xABD40A0C2832A78B}, // -278
        {0xE2E69915B3FFF9F9, 0x16C90C8F323F516D}, // -277
        {0x8DD01FAD907FFC3B, 0xAE3DA7D97F6792E4}, // -276
        {0xB1442798F49FFB4A, 0x99CD11CFDF41779D}, // -275
        {0xDD95317F31C7FA1D, 0x40405643D711D584}, // -274
        {0x8A7D3EEF7F1CFC52, 0x482835EA666B2573}, // -273
        {0xAD1C8EAB5EE43B66, 0xDA3243650005EED0}, // -272
        {0xD863B256369D4A40, 0x90BED43E40076A83}, // -271
        {0x873E4F75E2224E68, 0x5A7744A6E804A292}, // -270
        {0xA90DE3535AAAE202, 0x711515D0A205CB37}, // -269
        {0xD3515C2831559A83, 0x0D5A5B44CA873E04}, // -268
        {0x8412D9991ED58091, 0xE858790AFE9486C3}, // -267
        {0xA5178FFF668AE0B6, 0x626E974DBE39A873}, // -266
        {0xCE5D73FF402D98E3, 0xFB0A3D212DC81290}, // -265
        {0x80FA687F881C7F8E, 0x7CE66634BC9D0B9A}, // -264
        {0xA139029F6A239F72, 0x1C1FFFC1EBC44E81}, // -263
        {0xC987434744AC874E, 0xA327FFB266B56221}, // -262
        {0xFBE9141915D7A922, 0x4BF1FF9F0062BAA9}, // -261
        {0x9D71AC8FADA6C9B5, 0x6F773FC3603DB4AA}, // -260
        {0xC4CE17B399107C22, 0xCB550FB4384D21D4}, // -259
        {0xF6019DA07F549B2B, 0x7E2A53A146606A49}, // -258
        {0x99C102844F94E0FB, 0x2EDA7444CBFC426E}, // -257
        {0xC0314325637A1939, 0xFA911155FEFB5309}, // -256
        {0xF03D93EEBC589F88, 0x793555AB7EBA27CB}, // -255
        {0x96267C7535B763B5, 0x4BC1558B2F3458DF}, // -254
        {0xBBB01B9283253CA2, 0x9EB1AAEDFB016F17}, // -253
        {0xEA9C227723EE8BCB, 0x465E15A979C1CADD}, // -252
        {0x92A1958A7675175F, 0x0BFACD89EC191ECA}, // -251
        {0xB749FAED14125D36, 0xCEF980EC671F667C}, // -250
        {0xE51C79A85916F484, 0x82B7E12780E7401B}, // -249
        {0x8F31CC0937AE58D2, 0xD1B2ECB8B0908811}, // -248
        {0xB2FE3F0B8599EF07, 0x861FA7E6DCB4AA16}, // -247
        {0xDFBDCECE67006AC9, 0x67A791E093E1D49B}, // -246
        {0x8BD6A141006042BD, 0xE0C8BB2C5C6D24E1}, // -245
        {0xAECC49914078536D, 0x58FAE9F773886E19}, // -244
        {0xDA7F5BF590966848, 0xAF39A475506A899F}, // -243
        {0x888F99797A5E012D, 0x6D8406C952429604}, // -242
        {0xAAB37FD7D8F58178, 0xC8E5087BA6D33B84}, // -241
        {0xD5605FCDCF32E1D6, 0xFB1E4A9A90880A65}, // -240
        {0x855C3BE0A17FCD26, 0x5CF2EEA09A550680}, // -239
        {0xA6B34AD8C9DFC06F, 0xF42FAA48C0EA481F}, // -238
        {0xD0601D8EFC57B08B, 0xF13B94DAF124DA27}, // -237
        {0x823C12795DB6CE57, 0x76C53D08D6B70859}, // -236
        {0xA2CB1717B52481ED, 0x54768C4B0C64CA6F}, // -235
        {0xCB7DDCDDA26DA268, 0xA9942F5DCF7DFD0A}, // -234
        {0xFE5D54150B090B02, 0xD3F93B35435D7C4D}, // -233
        {0x9EFA548D26E5A6E1, 0xC47BC5014A1A6DB0}, // -232
        {0xC6B8E9B0709F109A, 0x359AB6419CA1091C}, // -231
        {0xF867241C8CC6D4C0, 0xC30163D203C94B63}, // -230
        {0x9B407691D7FC44F8, 0x79E0DE63425DCF1E}, // -229
        {0xC21094364DFB5636, 0x985915FC12F542E5}, // -228
        {0xF294B943E17A2BC4, 0x3E6F5B7B17B2939E}, // -227
        {0x979CF3CA6CEC5B5A, 0xA705992CEECF9C43}, // -226
        {0xBD8430BD08277231, 0x50C6FF782A838354}, // -225
        {0xECE53CEC4A314EBD, 0xA4F8BF5635246429}, // -224
        {0x940F4613AE5ED136, 0x871B7795E136BE9A}, // -223
        {0xB913179899F68584, 0x28E2557B59846E40}, // -222
        {0xE757DD7EC07426E5, 0x331AEADA2FE589D0}, // -221
        {0x9096EA6F3848984F, 0x3FF0D2C85DEF7622}, // -220
        {0xB4BCA50B065ABE63, 0x0FED077A756B53AA}, // -219
        {0xE1EBCE4DC7F16DFB, 0xD3E8495912C62895}, // -218
        {0x8D3360F09CF6E4BD, 0x64712DD7ABBBD95D}, // -217
        {0xB080392CC4349DEC, 0xBD8D794D96AACFB4}, // -216
        {0xDCA04777F541C567, 0xECF0D7A0FC5583A1}, // -215
        {0x89E42CAAF9491B60, 0xF41686C49DB57245}, // -214
        {0xAC5D37D5B79B6239, 0x311C2875C522CED6}, // -213
        {0xD77485CB25823AC7, 0x7D633293366B828C}, // -212
        {0x86A8D39EF77164BC, 0xAE5DFF9C02033198}, // -211
        {0xA8530886B54DBDEB, 0xD9F57F830283FDFD}, // -210
        {0xD267CAA862A12D66, 0xD072DF63C324FD7C}, // -209
        {0x8380DEA93DA4BC60, 0x4247CB9E59F71E6E}, // -208
        {0xA46116538D0DEB78, 0x52D9BE85F074E609}, // -207
        {0xCD795BE870516656, 0x67902E276C921F8C}, // -206
        {0x806BD9714632DFF6, 0x00BA1CD8A3DB53B7}, // -205
        {0xA086CFCD97BF97F3, 0x80E8A40ECCD228A5}, // -204
        {0xC8A883C0FDAF7DF0, 0x6122CD128006B2CE}, // -203
        {0xFAD2A4B13D1B5D6C, 0x796B805720085F82}, // -202
        {0x9CC3A6EEC6311A63, 0xCBE3303674053BB1}, // -201
        {0xC3F490AA77BD60FC, 0xBEDBFC4411068A9D}, // -200
        {0xF4F1B4D515ACB93B, 0xEE92FB5515482D45}, // -199
        {0x991711052D8BF3C5, 0x751BDD152D4D1C4B}, // -198
        {0xBF5CD54678EEF0B6, 0xD262D45A78A0635E}, // -197
        {0xEF340A98172AACE4, 0x86FB897116C87C35}, // -196
        {0x9580869F0E7AAC0E, 0xD45D35E6AE3D4DA1}, // -195
        {0xBAE0A846D2195712, 0x8974836059CCA10A}, // -194
        {0xE998D258869FACD7, 0x2BD1A438703FC94C}, // -193
        {0x91FF83775423CC06, 0x7B6306A34627DDD0}, // -192
        {0xB67F6455292CBF08, 0x1A3BC84C17B1D543}, // -191
        {0xE41F3D6A7377EECA, 0x20CABA5F1D9E4A94}, // -190
        {0x8E938662882AF53E, 0x547EB47B7282EE9D}, // -189
        {0xB23867FB2A35B28D, 0xE99E619A4F23AA44}, // -188
        {0xDEC681F9F4C31F31, 0x6405FA00E2EC94D5}, // -187
        {0x8B3C113C38F9F37E, 0xDE83BC408DD3DD05}, // -186
        {0xAE0B158B4738705E, 0x9624AB50B148D446}, // -185
        {0xD98DDAEE19068C76, 0x3BADD624DD9B0958}, // -184
        {0x87F8A8D4CFA417C9, 0xE54CA5D70A80E5D7}, // -183
        {0xA9F6D30A038D1DBC, 0x5E9FCF4CCD211F4D}, // -182
        {0xD47487CC8470652B, 0x7647C32000696720}, // -181
        {0x84C8D4DFD2C63F3B, 0x29ECD9F40041E074}, // -180
        {0xA5FB0A17C777CF09, 0xF468107100525891}, // -179
        {0xCF79CC9DB955C2CC, 0x7182148D4066EEB5}, // -178
        {0x81AC1FE293D599BF, 0xC6F14CD848405531}, // -177
        {0xA21727DB38CB002F, 0xB8ADA00E5A506A7D}, // -176
        {0xCA9CF1D206FDC03B, 0xA6D90811F0E4851D}, // -175
        {0xFD442E4688BD304A, 0x908F4A166D1DA664}, // -174
        {0x9E4A9CEC15763E2E, 0x9A598E4E043287FF}, // -173
        {0xC5DD44271AD3CDBA, 0x40EFF1E1853F29FE}, // -172
        {0xF7549530E188C128, 0xD12BEE59E68EF47D}, // -171
        {0x9A94DD3E8CF578B9, 0x82BB74F8301958CF}, // -170
        {0xC13A148E3032D6E7, 0xE36A52363C1FAF02}, // -169
        {0xF18899B1BC3F8CA1, 0xDC44E6C3CB279AC2}, // -168
        {0x96F5600F15A7B7E5, 0x29AB103A5EF8C0BA}, // -167
        {0xBCB2B812DB11A5DE, 0x7415D448F6B6F0E8}, // -166
        {0xEBDF661791D60F56, 0x111B495B3464AD22}, // -165
        {0x936B9FCEBB25C995, 0xCAB10DD900BEEC35}, // -164
        {0xB84687C269EF3BFB, 0x3D5D514F40EEA743}, // -163
        {0xE65829B3046B0AFA, 0x0CB4A5A3112A5113}, // -162
        {0x8FF71A0FE2C2E6DC, 0x47F0E785EABA72AC}, // -161
        {0xB3F4E093DB73A093, 0x59ED216765690F57}, // -160
        {0xE0F218B8D25088B8, 0x306869C13EC3532D}, // -159
        {0x8C974F7383725573, 0x1E414218C73A13FC}, // -158
        {0xAFBD2350644EEACF, 0xE5D1929EF90898FB}, // -157
        {0xDBAC6C247D62A583, 0xDF45F746B74ABF3A}, // -156
        {0x894BC396CE5DA772, 0x6B8BBA8C328EB784}, // -155
        {0xAB9EB47C81F5114F, 0x066EA92F3F326565}, // -154
        {0xD686619BA27255A2, 0xC80A537B0EFEFEBE}, // -153
        {0x8613FD0145877585, 0xBD06742CE95F5F37}, // -152
        {0xA798FC4196E952E7, 0x2C48113823B73705}, // -151
        {0xD17F3B51FCA3A7A0, 0xF75A15862CA504C6}, // -150
        {0x82EF85133DE648C4, 0x9A984D73DBE722FC}, // -149
        {0xA3AB66580D5FDAF5, 0xC13E60D0D2E0EBBB}, // -148
        {0xCC963FEE10B7D1B3, 0x318DF905079926A9}, // -147
        {0xFFBBCFE994E5C61F, 0xFDF17746497F7053}, // -146
        {0x9FD561F1FD0F9BD3, 0xFEB6EA8BEDEFA634}, // -145
        {0xC7CABA6E7C5382C8, 0xFE64A52EE96B8FC1}, // -144
        {0xF9BD690A1B68637B, 0x3DFDCE7AA3C673B1}, // -143
        {0x9C1661A651213E2D, 0x06BEA10CA65C084F}, // -142
        {0xC31BFA0FE5698DB8, 0x486E494FCFF30A63}, // -141
        {0xF3E2F893DEC3F126, 0x5A89DBA3C3EFCCFB}, // -140
        {0x986DDB5C6B3A76B7, 0xF89629465A75E01D}, // -139
        {0xBE89523386091465, 0xF6BBB397F1135824}, // -138
        {0xEE2BA6C0678B597F, 0x746AA07DED582E2D}, // -137
        {0x94DB483840B717EF, 0xA8C2A44EB4571CDD}, // -136
        {0xBA121A4650E4DDEB, 0x92F34D62616CE414}, // -135
        {0xE896A0D7E51E1566, 0x77B020BAF9C81D18}, // -134
        {0x915E2486EF32CD60, 0x0ACE1474DC1D122F}, // -133
        {0xB5B5ADA8AAFF80B8, 0x0D819992132456BB}, // -132
        {0xE3231912D5BF60E6, 0x10E1FFF697ED6C6A}, // -131
        {0x8DF5EFABC5979C8F, 0xCA8D3FFA1EF463C2}, // -130
        {0xB1736B96B6FD83B3, 0xBD308FF8A6B17CB3}, // -129
        {0xDDD0467C64BCE4A0, 0xAC7CB3F6D05DDBDF}, // -128
        {0x8AA22C0DBEF60EE4, 0x6BCDF07A423AA96C}, // -127
        {0xAD4AB7112EB3929D, 0x86C16C98D2C953C7}, // -126
        {0xD89D64D57A607744, 0xE871C7BF077BA8B8}, // -125
        {0x87625F056C7C4A8B, 0x11471CD764AD4973}, // -124
        {0xA93AF6C6C79B5D2D, 0xD598E40D3DD89BD0}, // -123
        {0xD389B47879823479, 0x4AFF1D108D4EC2C4}, // -122
        {0x843610CB4BF160CB, 0xCEDF722A585139BB}, // -121
        {0xA54394FE1EEDB8FE, 0xC2974EB4EE658829}, // -120
        {0xCE947A3DA6A9273E, 0x733D226229FEEA33}, // -119
        {0x811CCC668829B887, 0x0806357D5A3F5260}, // -118
        {0xA163FF802A3426A8, 0xCA07C2DCB0CF26F8}, // -117
        {0xC9BCFF6034C13052, 0xFC89B393DD02F0B6}, // -116
        {0xFC2C3F3841F17C67, 0xBBAC2078D443ACE3}, // -115
        {0x9D9BA7832936EDC0, 0xD54B944B84AA4C0E}, // -114
        {0xC5029163F384A931, 0x0A9E795E65D4DF12}, // -113
        {0xF64335BCF065D37D, 0x4D4617B5FF4A16D6}, // -112
        {0x99EA0196163FA42E, 0x504BCED1BF8E4E46}, // -111
        {0xC06481FB9BCF8D39, 0xE45EC2862F71E1D7}, // -110
        {0xF07DA27A82C37088, 0x5D767327BB4E5A4D}, // -109
        {0x964E858C91BA2655, 0x3A6A07F8D510F870}, // -108
        {0xBBE226EFB628AFEA, 0x890489F70A55368C}, // -107
        {0xEADAB0ABA3B2DBE5, 0x2B45AC74CCEA842F}, // -106
        {0x92C8AE6B464FC96F, 0x3B0B8BC90012929E}, // -105
        {0xB77ADA0617E3BBCB, 0x09CE6EBB40173745}, // -104
        {0xE55990879DDCAABD, 0xCC420A6A101D0516}, // -103
        {0x8F57FA54C2A9EAB6, 0x9FA946824A12232E}, // -102
        {0xB32DF8E9F3546564, 0x47939822DC96ABFA}, // -101
        {0xDFF9772470297EBD, 0x59787E2B93BC56F8}, // -100
        {0x8BFBEA76C619EF36, 0x57EB4EDB3C55B65B}, //  -99
        {0xAEFAE51477A06B03, 0xEDE622920B6B23F2}, //  -98
        {0xDAB99E59958885C4, 0xE95FAB368E45ECEE}, //  -97
        {0x88B402F7FD75539B, 0x11DBCB0218EBB415}, //  -96
        {0xAAE103B5FCD2A881, 0xD652BDC29F26A11A}, //  -95
        {0xD59944A37C0752A2, 0x4BE76D3346F04960}, //  -94
        {0x857FCAE62D8493A5, 0x6F70A4400C562DDC}, //  -93
        {0xA6DFBD9FB8E5B88E, 0xCB4CCD500F6BB953}, //  -92
        {0xD097AD07A71F26B2, 0x7E2000A41346A7A8}, //  -91
        {0x825ECC24C873782F, 0x8ED400668C0C28C9}, //  -90
        {0xA2F67F2DFA90563B, 0x728900802F0F32FB}, //  -89
        {0xCBB41EF979346BCA, 0x4F2B40A03AD2FFBA}, //  -88
        {0xFEA126B7D78186BC, 0xE2F610C84987BFA9}, //  -87
        {0x9F24B832E6B0F436, 0x0DD9CA7D2DF4D7CA}, //  -86
        {0xC6EDE63FA05D3143, 0x91503D1C79720DBC}, //  -85
        {0xF8A95FCF88747D94, 0x75A44C6397CE912B}, //  -84
        {0x9B69DBE1B548CE7C, 0xC986AFBE3EE11ABB}, //  -83
        {0xC24452DA229B021B, 0xFBE85BADCE996169}, //  -82
        {0xF2D56790AB41C2A2, 0xFAE27299423FB9C4}, //  -81
        {0x97C560BA6B0919A5, 0xDCCD879FC967D41B}, //  -80
        {0xBDB6B8E905CB600F, 0x5400E987BBC1C921}, //  -79
        {0xED246723473E3813, 0x290123E9AAB23B69}, //  -78
        {0x9436C0760C86E30B, 0xF9A0B6720AAF6522}, //  -77
        {0xB94470938FA89BCE, 0xF808E40E8D5B3E6A}, //  -76
        {0xE7958CB87392C2C2, 0xB60B1D1230B20E05}, //  -75
        {0x90BD77F3483BB9B9, 0xB1C6F22B5E6F48C3}, //  -74
        {0xB4ECD5F01A4AA828, 0x1E38AEB6360B1AF4}, //  -73
        {0xE2280B6C20DD5232, 0x25C6DA63C38DE1B1}, //  -72
        {0x8D590723948A535F, 0x579C487E5A38AD0F}, //  -71
        {0xB0AF48EC79ACE837, 0x2D835A9DF0C6D852}, //  -70
        {0xDCDB1B2798182244, 0xF8E431456CF88E66}, //  -69
        {0x8A08F0F8BF0F156B, 0x1B8E9ECB641B5900}, //  -68
        {0xAC8B2D36EED2DAC5, 0xE272467E3D222F40}, //  -67
        {0xD7ADF884AA879177, 0x5B0ED81DCC6ABB10}, //  -66
        {0x86CCBB52EA94BAEA, 0x98E947129FC2B4EA}, //  -65
        {0xA87FEA27A539E9A5, 0x3F2398D747B36225}, //  -64
        {0xD29FE4B18E88640E, 0x8EEC7F0D19A03AAE}, //  -63
        {0x83A3EEEEF9153E89, 0x1953CF68300424AD}, //  -62
        {0xA48CEAAAB75A8E2B, 0x5FA8C3423C052DD8}, //  -61
        {0xCDB02555653131B6, 0x3792F412CB06794E}, //  -60
        {0x808E17555F3EBF11, 0xE2BBD88BBEE40BD1}, //  -59
        {0xA0B19D2AB70E6ED6, 0x5B6ACEAEAE9D0EC5}, //  -58
        {0xC8DE047564D20A8B, 0xF245825A5A445276}, //  -57
        {0xFB158592BE068D2E, 0xEED6E2F0F0D56713}, //  -56
        {0x9CED737BB6C4183D, 0x55464DD69685606C}, //  -55
        {0xC428D05AA4751E4C, 0xAA97E14C3C26B887}, //  -54
        {0xF53304714D9265DF, 0xD53DD99F4B3066A9}, //  -53
        {0x993FE2C6D07B7FAB, 0xE546A8038EFE402A}, //  -52
        {0xBF8FDB78849A5F96, 0xDE98520472BDD034}, //  -51
        {0xEF73D256A5C0F77C, 0x963E66858F6D4441}, //  -50
        {0x95A8637627989AAD, 0xDDE7001379A44AA9}, //  -49
        {0xBB127C53B17EC159, 0x5560C018580D5D53}, //  -48
        {0xE9D71B689DDE71AF, 0xAAB8F01E6E10B4A7}, //  -47
        {0x9226712162AB070D, 0xCAB3961304CA70E9}, //  -46
        {0xB6B00D69BB55C8D1, 0x3D607B97C5FD0D23}, //  -45
        {0xE45C10C42A2B3B05, 0x8CB89A7DB77C506B}, //  -44
        {0x8EB98A7A9A5B04E3, 0x77F3608E92ADB243}, //  -43
        {0xB267ED1940F1C61C, 0x55F038B237591ED4}, //  -42
        {0xDF01E85F912E37A3, 0x6B6C46DEC52F6689}, //  -41
        {0x8B61313BBABCE2C6, 0x2323AC4B3B3DA016}, //  -40
        {0xAE397D8AA96C1B77, 0xABEC975E0A0D081B}, //  -39
        {0xD9C7DCED53C72255, 0x96E7BD358C904A22}, //  -38
        {0x881CEA14545C7575, 0x7E50D64177DA2E55}, //  -37
        {0xAA242499697392D2, 0xDDE50BD1D5D0B9EA}, //  -36
        {0xD4AD2DBFC3D07787, 0x955E4EC64B44E865}, //  -35
        {0x84EC3C97DA624AB4, 0xBD5AF13BEF0B113F}, //  -34
        {0xA6274BBDD0FADD61, 0xECB1AD8AEACDD58F}, //  -33
        {0xCFB11EAD453994BA, 0x67DE18EDA5814AF3}, //  -32
        {0x81CEB32C4B43FCF4, 0x80EACF948770CED8}, //  -31
        {0xA2425FF75E14FC31, 0xA1258379A94D028E}, //  -30
        {0xCAD2F7F5359A3B3E, 0x096EE45813A04331}, //  -29
        {0xFD87B5F28300CA0D, 0x8BCA9D6E188853FD}, //  -28
        {0x9E74D1B791E07E48, 0x775EA264CF55347E}, //  -27
        {0xC612062576589DDA, 0x95364AFE032A819E}, //  -26
        {0xF79687AED3EEC551, 0x3A83DDBD83F52205}, //  -25
        {0x9ABE14CD44753B52, 0xC4926A9672793543}, //  -24
        {0xC16D9A0095928A27, 0x75B7053C0F178294}, //  -23
        {0xF1C90080BAF72CB1, 0x5324C68B12DD6339}, //  -22
        {0x971DA05074DA7BEE, 0xD3F6FC16EBCA5E04}, //  -21
        {0xBCE5086492111AEA, 0x88F4BB1CA6BCF585}, //  -20
        {0xEC1E4A7DB69561A5, 0x2B31E9E3D06C32E6}, //  -19
        {0x9392EE8E921D5D07, 0x3AFF322E62439FD0}, //  -18
        {0xB877AA3236A4B449, 0x09BEFEB9FAD487C3}, //  -17
        {0xE69594BEC44DE15B, 0x4C2EBE687989A9B4}, //  -16
        {0x901D7CF73AB0ACD9, 0x0F9D37014BF60A11}, //  -15
        {0xB424DC35095CD80F, 0x538484C19EF38C95}, //  -14
        {0xE12E13424BB40E13, 0x2865A5F206B06FBA}, //  -13
        {0x8CBCCC096F5088CB, 0xF93F87B7442E45D4}, //  -12
        {0xAFEBFF0BCB24AAFE, 0xF78F69A51539D749}, //  -11
        {0xDBE6FECEBDEDD5BE, 0xB573440E5A884D1C}, //  -10
        {0x89705F4136B4A597, 0x31680A88F8953031}, //   -9
        {0xABCC77118461CEFC, 0xFDC20D2B36BA7C3E}, //   -8
        {0xD6BF94D5E57A42BC, 0x3D32907604691B4D}, //   -7
        {0x8637BD05AF6C69B5, 0xA63F9A49C2C1B110}, //   -6
        {0xA7C5AC471B478423, 0x0FCF80DC33721D54}, //   -5
        {0xD1B71758E219652B, 0xD3C36113404EA4A9}, //   -4
        {0x83126E978D4FDF3B, 0x645A1CAC083126EA}, //   -3
        {0xA3D70A3D70A3D70A, 0x3D70A3D70A3D70A4}, //   -2
        {0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCD}, //   -1
        {0x8000000000000000, 0x0000000000000000}, //    0
        {0xA000000000000000, 0x0000000000000000}, //    1
        {0xC800000000000000, 0x0000000000000000}, //    2
        {0xFA00000000000000, 0x0000000000000000}, //    3
        {0x9C40000000000000, 0x0000000000000000}, //    4
        {0xC350000000000000, 0x0000000000000000}, //    5
        {0xF424000000000000, 0x0000000000000000}, //    6
        {0x9896800000000000, 0x0000000000000000}, //    7
        {0xBEBC200000000000, 0x0000000000000000}, //    8
        {0xEE6B280000000000, 0x0000000000000000}, //    9
        {0x9502F90000000000, 0x0000000000000000}, //   10
        {0xBA43B74000000000, 0x0000000000000000}, //   11
        {0xE8D4A51000000000, 0x0000000000000000}, //   12
        {0x9184E72A00000000, 0x0000000000000000}, //   13
        {0xB5E620F480000000, 0x0000000000000000}, //   14
        {0xE35FA931A0000000, 0x0000000000000000}, //   15
        {0x8E1BC9BF04000000, 0x0000000000000000}, //   16
        {0xB1A2BC2EC5000000, 0x0000000000000000}, //   17
        {0xDE0B6B3A76400000, 0x0000000000000000}, //   18
        {0x8AC7230489E80000, 0x0000000000000000}, //   19
        {0xAD78EBC5AC620000, 0x0000000000000000}, //   20
        {0xD8D726B7177A8000, 0x0000000000000000}, //   21
        {0x878678326EAC9000, 0x0000000000000000}, //   22
        {0xA968163F0A57B400, 0x0000000000000000}, //   23
        {0xD3C21BCECCEDA100, 0x0000000000000000}, //   24
        {0x84595161401484A0, 0x0000000000000000}, //   25
        {0xA56FA5B99019A5C8, 0x0000000000000000}, //   26
        {0xCECB8F27F4200F3A, 0x0000000000000000}, //   27
        {0x813F3978F8940984, 0x4000000000000000}, //   28
        {0xA18F07D736B90BE5, 0x5000000000000000}, //   29
        {0xC9F2C9CD04674EDE, 0xA400000000000000}, //   30
        {0xFC6F7C4045812296, 0x4D00000000000000}, //   31
        {0x9DC5ADA82B70B59D, 0xF020000000000000}, //   32
        {0xC5371912364CE305, 0x6C28000000000000}, //   33
        {0xF684DF56C3E01BC6, 0xC732000000000000}, //   34
        {0x9A130B963A6C115C, 0x3C7F400000000000}, //   35
        {0xC097CE7BC90715B3, 0x4B9F100000000000}, //   36
        {0xF0BDC21ABB48DB20, 0x1E86D40000000000}, //   37
        {0x96769950B50D88F4, 0x1314448000000000}, //   38
        {0xBC143FA4E250EB31, 0x17D955A000000000}, //   39
        {0xEB194F8E1AE525FD, 0x5DCFAB0800000000}, //   40
        {0x92EFD1B8D0CF37BE, 0x5AA1CAE500000000}, //   41
        {0xB7ABC627050305AD, 0xF14A3D9E40000000}, //   42
        {0xE596B7B0C643C719, 0x6D9CCD05D0000000}, //   43
        {0x8F7E32CE7BEA5C6F, 0xE4820023A2000000}, //   44
        {0xB35DBF821AE4F38B, 0xDDA2802C8A800000}, //   45
        {0xE0352F62A19E306E, 0xD50B2037AD200000}, //   46
        {0x8C213D9DA502DE45, 0x4526F422CC340000}, //   47
        {0xAF298D050E4395D6, 0x9670B12B7F410000}, //   48
        {0xDAF3F04651D47B4C, 0x3C0CDD765F114000}, //   49
        {0x88D8762BF324CD0F, 0xA5880A69FB6AC800}, //   50
        {0xAB0E93B6EFEE0053, 0x8EEA0D047A457A00}, //   51
        {0xD5D238A4ABE98068, 0x72A4904598D6D880}, //   52
        {0x85A36366EB71F041, 0x47A6DA2B7F864750}, //   53
        {0xA70C3C40A64E6C51, 0x999090B65F67D924}, //   54
        {0xD0CF4B50CFE20765, 0xFFF4B4E3F741CF6D}, //   55
        {0x82818F1281ED449F, 0xBFF8F10E7A8921A5}, //   56
        {0xA321F2D7226895C7, 0xAFF72D52192B6A0E}, //   57
        {0xCBEA6F8CEB02BB39, 0x9BF4F8A69F764491}, //   58
        {0xFEE50B7025C36A08, 0x02F236D04753D5B5}, //   59
        {0x9F4F2726179A2245, 0x01D762422C946591}, //   60
        {0xC722F0EF9D80AAD6, 0x424D3AD2B7B97EF6}, //   61
        {0xF8EBAD2B84E0D58B, 0xD2E0898765A7DEB3}, //   62
        {0x9B934C3B330C8577, 0x63CC55F49F88EB30}, //   63
        {0xC2781F49FFCFA6D5, 0x3CBF6B71C76B25FC}, //   64
        {0xF316271C7FC3908A, 0x8BEF464E3945EF7B}, //   65
        {0x97EDD871CFDA3A56, 0x97758BF0E3CBB5AD}, //   66
        {0xBDE94E8E43D0C8EC, 0x3D52EEED1CBEA318}, //   67
        {0xED63A231D4C4FB27, 0x4CA7AAA863EE4BDE}, //   68
        {0x945E455F24FB1CF8, 0x8FE8CAA93E74EF6B}, //   69
        {0xB975D6B6EE39E436, 0xB3E2FD538E122B45}, //   70
        {0xE7D34C64A9C85D44, 0x60DBBCA87196B617}, //   71
        {0x90E40FBEEA1D3A4A, 0xBC8955E946FE31CE}, //   72
        {0xB51D13AEA4A488DD, 0x6BABAB6398BDBE42}, //   73
        {0xE264589A4DCDAB14, 0xC696963C7EED2DD2}, //   74
        {0x8D7EB76070A08AEC, 0xFC1E1DE5CF543CA3}, //   75
        {0xB0DE65388CC8ADA8, 0x3B25A55F43294BCC}, //   76
        {0xDD15FE86AFFAD912, 0x49EF0EB713F39EBF}, //   77
        {0x8A2DBF142DFCC7AB, 0x6E3569326C784338}, //   78
        {0xACB92ED9397BF996, 0x49C2C37F07965405}, //   79
        {0xD7E77A8F87DAF7FB, 0xDC33745EC97BE907}, //   80
        {0x86F0AC99B4E8DAFD, 0x69A028BB3DED71A4}, //   81
        {0xA8ACD7C0222311BC, 0xC40832EA0D68CE0D}, //   82
        {0xD2D80DB02AABD62B, 0xF50A3FA490C30191}, //   83
        {0x83C7088E1AAB65DB, 0x792667C6DA79E0FB}, //   84
        {0xA4B8CAB1A1563F52, 0x577001B891185939}, //   85
        {0xCDE6FD5E09ABCF26, 0xED4C0226B55E6F87}, //   86
        {0x80B05E5AC60B6178, 0x544F8158315B05B5}, //   87
        {0xA0DC75F1778E39D6, 0x696361AE3DB1C722}, //   88
        {0xC913936DD571C84C, 0x03BC3A19CD1E38EA}, //   89
        {0xFB5878494ACE3A5F, 0x04AB48A04065C724}, //   90
        {0x9D174B2DCEC0E47B, 0x62EB0D64283F9C77}, //   91
        {0xC45D1DF942711D9A, 0x3BA5D0BD324F8395}, //   92
        {0xF5746577930D6500, 0xCA8F44EC7EE3647A}, //   93
        {0x9968BF6ABBE85F20, 0x7E998B13CF4E1ECC}, //   94
        {0xBFC2EF456AE276E8, 0x9E3FEDD8C321A67F}, //   95
        {0xEFB3AB16C59B14A2, 0xC5CFE94EF3EA101F}, //   96
        {0x95D04AEE3B80ECE5, 0xBBA1F1D158724A13}, //   97
        {0xBB445DA9CA61281F, 0x2A8A6E45AE8EDC98}, //   98
        {0xEA1575143CF97226, 0xF52D09D71A3293BE}, //   99
        {0x924D692CA61BE758, 0x593C2626705F9C57}, //  100
        {0xB6E0C377CFA2E12E, 0x6F8B2FB00C77836D}, //  101
        {0xE498F455C38B997A, 0x0B6DFB9C0F956448}, //  102
        {0x8EDF98B59A373FEC, 0x4724BD4189BD5EAD}, //  103
        {0xB2977EE300C50FE7, 0x58EDEC91EC2CB658}, //  104
        {0xDF3D5E9BC0F653E1, 0x2F2967B66737E3EE}, //  105
        {0x8B865B215899F46C, 0xBD79E0D20082EE75}, //  106
        {0xAE67F1E9AEC07187, 0xECD8590680A3AA12}, //  107
        {0xDA01EE641A708DE9, 0xE80E6F4820CC9496}, //  108
        {0x884134FE908658B2, 0x3109058D147FDCDE}, //  109
        {0xAA51823E34A7EEDE, 0xBD4B46F0599FD416}, //  110
        {0xD4E5E2CDC1D1EA96, 0x6C9E18AC7007C91B}, //  111
        {0x850FADC09923329E, 0x03E2CF6BC604DDB1}, //  112
        {0xA6539930BF6BFF45, 0x84DB8346B786151D}, //  113
        {0xCFE87F7CEF46FF16, 0xE612641865679A64}, //  114
        {0x81F14FAE158C5F6E, 0x4FCB7E8F3F60C07F}, //  115
        {0xA26DA3999AEF7749, 0xE3BE5E330F38F09E}, //  116
        {0xCB090C8001AB551C, 0x5CADF5BFD3072CC6}, //  117
        {0xFDCB4FA002162A63, 0x73D9732FC7C8F7F7}, //  118
        {0x9E9F11C4014DDA7E, 0x2867E7FDDCDD9AFB}, //  119
        {0xC646D63501A1511D, 0xB281E1FD541501B9}, //  120
        {0xF7D88BC24209A565, 0x1F225A7CA91A4227}, //  121
        {0x9AE757596946075F, 0x3375788DE9B06959}, //  122
        {0xC1A12D2FC3978937, 0x0052D6B1641C83AF}, //  123
        {0xF209787BB47D6B84, 0xC0678C5DBD23A49B}, //  124
        {0x9745EB4D50CE6332, 0xF840B7BA963646E1}, //  125
        {0xBD176620A501FBFF, 0xB650E5A93BC3D899}, //  126
        {0xEC5D3FA8CE427AFF, 0xA3E51F138AB4CEBF}, //  127
        {0x93BA47C980E98CDF, 0xC66F336C36B10138}, //  128
        {0xB8A8D9BBE123F017, 0xB80B0047445D4185}, //  129
        {0xE6D3102AD96CEC1D, 0xA60DC059157491E6}, //  130
        {0x9043EA1AC7E41392, 0x87C89837AD68DB30}, //  131
        {0xB454E4A179DD1877, 0x29BABE4598C311FC}, //  132
        {0xE16A1DC9D8545E94, 0xF4296DD6FEF3D67B}, //  133
        {0x8CE2529E2734BB1D, 0x1899E4A65F58660D}, //  134
        {0xB01AE745B101E9E4, 0x5EC05DCFF72E7F90}, //  135
        {0xDC21A1171D42645D, 0x76707543F4FA1F74}, //  136
        {0x899504AE72497EBA, 0x6A06494A791C53A9}, //  137
        {0xABFA45DA0EDBDE69, 0x0487DB9D17636893}, //  138
        {0xD6F8D7509292D603, 0x45A9D2845D3C42B7}, //  139
        {0x865B86925B9BC5C2, 0x0B8A2392BA45A9B3}, //  140
        {0xA7F26836F282B732, 0x8E6CAC7768D7141F}, //  141
        {0xD1EF0244AF2364FF, 0x3207D795430CD927}, //  142
        {0x8335616AED761F1F, 0x7F44E6BD49E807B9}, //  143
        {0xA402B9C5A8D3A6E7, 0x5F16206C9C6209A7}, //  144
        {0xCD036837130890A1, 0x36DBA887C37A8C10}, //  145
        {0x802221226BE55A64, 0xC2494954DA2C978A}, //  146
        {0xA02AA96B06DEB0FD, 0xF2DB9BAA10B7BD6D}, //  147
        {0xC83553C5C8965D3D, 0x6F92829494E5ACC8}, //  148
        {0xFA42A8B73ABBF48C, 0xCB772339BA1F17FA}, //  149
        {0x9C69A97284B578D7, 0xFF2A760414536EFC}, //  150
        {0xC38413CF25E2D70D, 0xFEF5138519684ABB}, //  151
        {0xF46518C2EF5B8CD1, 0x7EB258665FC25D6A}, //  152
        {0x98BF2F79D5993802, 0xEF2F773FFBD97A62}, //  153
        {0xBEEEFB584AFF8603, 0xAAFB550FFACFD8FB}, //  154
        {0xEEAABA2E5DBF6784, 0x95BA2A53F983CF39}, //  155
        {0x952AB45CFA97A0B2, 0xDD945A747BF26184}, //  156
        {0xBA756174393D88DF, 0x94F971119AEEF9E5}, //  157
        {0xE912B9D1478CEB17, 0x7A37CD5601AAB85E}, //  158
        {0x91ABB422CCB812EE, 0xAC62E055C10AB33B}, //  159
        {0xB616A12B7FE617AA, 0x577B986B314D600A}, //  160
        {0xE39C49765FDF9D94, 0xED5A7E85FDA0B80C}, //  161
        {0x8E41ADE9FBEBC27D, 0x14588F13BE847308}, //  162
        {0xB1D219647AE6B31C, 0x596EB2D8AE258FC9}, //  163
        {0xDE469FBD99A05FE3, 0x6FCA5F8ED9AEF3BC}, //  164
        {0x8AEC23D680043BEE, 0x25DE7BB9480D5855}, //  165
        {0xADA72CCC20054AE9, 0xAF561AA79A10AE6B}, //  166
        {0xD910F7FF28069DA4, 0x1B2BA1518094DA05}, //  167
        {0x87AA9AFF79042286, 0x90FB44D2F05D0843}, //  168
        {0xA99541BF57452B28, 0x353A1607AC744A54}, //  169
        {0xD3FA922F2D1675F2, 0x42889B8997915CE9}, //  170
        {0x847C9B5D7C2E09B7, 0x69956135FEBADA12}, //  171
        {0xA59BC234DB398C25, 0x43FAB9837E699096}, //  172
        {0xCF02B2C21207EF2E, 0x94F967E45E03F4BC}, //  173
        {0x8161AFB94B44F57D, 0x1D1BE0EEBAC278F6}, //  174
        {0xA1BA1BA79E1632DC, 0x6462D92A69731733}, //  175
        {0xCA28A291859BBF93, 0x7D7B8F7503CFDCFF}, //  176
        {0xFCB2CB35E702AF78, 0x5CDA735244C3D43F}, //  177
        {0x9DEFBF01B061ADAB, 0x3A0888136AFA64A8}, //  178
        {0xC56BAEC21C7A1916, 0x088AAA1845B8FDD1}, //  179
        {0xF6C69A72A3989F5B, 0x8AAD549E57273D46}, //  180
        {0x9A3C2087A63F6399, 0x36AC54E2F678864C}, //  181
        {0xC0CB28A98FCF3C7F, 0x84576A1BB416A7DE}, //  182
        {0xF0FDF2D3F3C30B9F, 0x656D44A2A11C51D6}, //  183
        {0x969EB7C47859E743, 0x9F644AE5A4B1B326}, //  184
        {0xBC4665B596706114, 0x873D5D9F0DDE1FEF}, //  185
        {0xEB57FF22FC0C7959, 0xA90CB506D155A7EB}, //  186
        {0x9316FF75DD87CBD8, 0x09A7F12442D588F3}, //  187
        {0xB7DCBF5354E9BECE, 0x0C11ED6D538AEB30}, //  188
        {0xE5D3EF282A242E81, 0x8F1668C8A86DA5FB}, //  189
        {0x8FA475791A569D10, 0xF96E017D694487BD}, //  190
        {0xB38D92D760EC4455, 0x37C981DCC395A9AD}, //  191
        {0xE070F78D3927556A, 0x85BBE253F47B1418}, //  192
        {0x8C469AB843B89562, 0x93956D7478CCEC8F}, //  193
        {0xAF58416654A6BABB, 0x387AC8D1970027B3}, //  194
        {0xDB2E51BFE9D0696A, 0x06997B05FCC0319F}, //  195
        {0x88FCF317F22241E2, 0x441FECE3BDF81F04}, //  196
        {0xAB3C2FDDEEAAD25A, 0xD527E81CAD7626C4}, //  197
        {0xD60B3BD56A5586F1, 0x8A71E223D8D3B075}, //  198
        {0x85C7056562757456, 0xF6872D5667844E4A}, //  199
        {0xA738C6BEBB12D16C, 0xB428F8AC016561DC}, //  200
        {0xD106F86E69D785C7, 0xE13336D701BEBA53}, //  201
        {0x82A45B450226B39C, 0xECC0024661173474}, //  202
        {0xA34D721642B06084, 0x27F002D7F95D0191}, //  203
        {0xCC20CE9BD35C78A5, 0x31EC038DF7B441F5}, //  204
        {0xFF290242C83396CE, 0x7E67047175A15272}, //  205
        {0x9F79A169BD203E41, 0x0F0062C6E984D387}, //  206
        {0xC75809C42C684DD1, 0x52C07B78A3E60869}, //  207
        {0xF92E0C3537826145, 0xA7709A56CCDF8A83}, //  208
        {0x9BBCC7A142B17CCB, 0x88A66076400BB692}, //  209
        {0xC2ABF989935DDBFE, 0x6ACFF893D00EA436}, //  210
        {0xF356F7EBF83552FE, 0x0583F6B8C4124D44}, //  211
        {0x98165AF37B2153DE, 0xC3727A337A8B704B}, //  212
        {0xBE1BF1B059E9A8D6, 0x744F18C0592E4C5D}, //  213
        {0xEDA2EE1C7064130C, 0x1162DEF06F79DF74}, //  214
        {0x9485D4D1C63E8BE7, 0x8ADDCB5645AC2BA9}, //  215
        {0xB9A74A0637CE2EE1, 0x6D953E2BD7173693}, //  216
        {0xE8111C87C5C1BA99, 0xC8FA8DB6CCDD0438}, //  217
        {0x910AB1D4DB9914A0, 0x1D9C9892400A22A3}, //  218
        {0xB54D5E4A127F59C8, 0x2503BEB6D00CAB4C}, //  219
        {0xE2A0B5DC971F303A, 0x2E44AE64840FD61E}, //  220
        {0x8DA471A9DE737E24, 0x5CEAECFED289E5D3}, //  221
        {0xB10D8E1456105DAD, 0x7425A83E872C5F48}, //  222
        {0xDD50F1996B947518, 0xD12F124E28F7771A}, //  223
        {0x8A5296FFE33CC92F, 0x82BD6B70D99AAA70}, //  224
        {0xACE73CBFDC0BFB7B, 0x636CC64D1001550C}, //  225
        {0xD8210BEFD30EFA5A, 0x3C47F7E05401AA4F}, //  226
        {0x8714A775E3E95C78, 0x65ACFAEC34810A72}, //  227
        {0xA8D9D1535CE3B396, 0x7F1839A741A14D0E}, //  228
        {0xD31045A8341CA07C, 0x1EDE48111209A051}, //  229
        {0x83EA2B892091E44D, 0x934AED0AAB460433}, //  230
        {0xA4E4B66B68B65D60, 0xF81DA84D56178540}, //  231
        {0xCE1DE40642E3F4B9, 0x36251260AB9D668F}, //  232
        {0x80D2AE83E9CE78F3, 0xC1D72B7C6B42601A}, //  233
        {0xA1075A24E4421730, 0xB24CF65B8612F820}, //  234
        {0xC94930AE1D529CFC, 0xDEE033F26797B628}, //  235
        {0xFB9B7CD9A4A7443C, 0x169840EF017DA3B2}, //  236
        {0x9D412E0806E88AA5, 0x8E1F289560EE864F}, //  237
        {0xC491798A08A2AD4E, 0xF1A6F2BAB92A27E3}, //  238
        {0xF5B5D7EC8ACB58A2, 0xAE10AF696774B1DC}, //  239
        {0x9991A6F3D6BF1765, 0xACCA6DA1E0A8EF2A}, //  240
        {0xBFF610B0CC6EDD3F, 0x17FD090A58D32AF4}, //  241
        {0xEFF394DCFF8A948E, 0xDDFC4B4CEF07F5B1}, //  242
        {0x95F83D0A1FB69CD9, 0x4ABDAF101564F98F}, //  243
        {0xBB764C4CA7A4440F, 0x9D6D1AD41ABE37F2}, //  244
        {0xEA53DF5FD18D5513, 0x84C86189216DC5EE}, //  245
        {0x92746B9BE2F8552C, 0x32FD3CF5B4E49BB5}, //  246
        {0xB7118682DBB66A77, 0x3FBC8C33221DC2A2}, //  247
        {0xE4D5E82392A40515, 0x0FABAF3FEAA5334B}, //  248
        {0x8F05B1163BA6832D, 0x29CB4D87F2A7400F}, //  249
        {0xB2C71D5BCA9023F8, 0x743E20E9EF511013}, //  250
        {0xDF78E4B2BD342CF6, 0x914DA9246B255417}, //  251
        {0x8BAB8EEFB6409C1A, 0x1AD089B6C2F7548F}, //  252
        {0xAE9672ABA3D0C320, 0xA184AC2473B529B2}, //  253
        {0xDA3C0F568CC4F3E8, 0xC9E5D72D90A2741F}, //  254
        {0x8865899617FB1871, 0x7E2FA67C7A658893}, //  255
        {0xAA7EEBFB9DF9DE8D, 0xDDBB901B98FEEAB8}, //  256
        {0xD51EA6FA85785631, 0x552A74227F3EA566}, //  257
        {0x8533285C936B35DE, 0xD53A88958F872760}, //  258
        {0xA67FF273B8460356, 0x8A892ABAF368F138}, //  259
        {0xD01FEF10A657842C, 0x2D2B7569B0432D86}, //  260
        {0x8213F56A67F6B29B, 0x9C3B29620E29FC74}, //  261
        {0xA298F2C501F45F42, 0x8349F3BA91B47B90}, //  262
        {0xCB3F2F7642717713, 0x241C70A936219A74}, //  263
        {0xFE0EFB53D30DD4D7, 0xED238CD383AA0111}, //  264
        {0x9EC95D1463E8A506, 0xF4363804324A40AB}, //  265
        {0xC67BB4597CE2CE48, 0xB143C6053EDCD0D6}, //  266
        {0xF81AA16FDC1B81DA, 0xDD94B7868E94050B}, //  267
        {0x9B10A4E5E9913128, 0xCA7CF2B4191C8327}, //  268
        {0xC1D4CE1F63F57D72, 0xFD1C2F611F63A3F1}, //  269
        {0xF24A01A73CF2DCCF, 0xBC633B39673C8CED}, //  270
        {0x976E41088617CA01, 0xD5BE0503E085D814}, //  271
        {0xBD49D14AA79DBC82, 0x4B2D8644D8A74E19}, //  272
        {0xEC9C459D51852BA2, 0xDDF8E7D60ED1219F}, //  273
        {0x93E1AB8252F33B45, 0xCABB90E5C942B504}, //  274
        {0xB8DA1662E7B00A17, 0x3D6A751F3B936244}, //  275
        {0xE7109BFBA19C0C9D, 0x0CC512670A783AD5}, //  276
        {0x906A617D450187E2, 0x27FB2B80668B24C6}, //  277
        {0xB484F9DC9641E9DA, 0xB1F9F660802DEDF7}, //  278
        {0xE1A63853BBD26451, 0x5E7873F8A0396974}, //  279
        {0x8D07E33455637EB2, 0xDB0B487B6423E1E9}, //  280
        {0xB049DC016ABC5E5F, 0x91CE1A9A3D2CDA63}, //  281
        {0xDC5C5301C56B75F7, 0x7641A140CC7810FC}, //  282
        {0x89B9B3E11B6329BA, 0xA9E904C87FCB0A9E}, //  283
        {0xAC2820D9623BF429, 0x546345FA9FBDCD45}, //  284
        {0xD732290FBACAF133, 0xA97C177947AD4096}, //  285
        {0x867F59A9D4BED6C0, 0x49ED8EABCCCC485E}, //  286
        {0xA81F301449EE8C70, 0x5C68F256BFFF5A75}, //  287
        {0xD226FC195C6A2F8C, 0x73832EEC6FFF3112}, //  288
        {0x83585D8FD9C25DB7, 0xC831FD53C5FF7EAC}, //  289
        {0xA42E74F3D032F525, 0xBA3E7CA8B77F5E56}, //  290
        {0xCD3A1230C43FB26F, 0x28CE1BD2E55F35EC}, //  291
        {0x80444B5E7AA7CF85, 0x7980D163CF5B81B4}, //  292
        {0xA0555E361951C366, 0xD7E105BCC3326220}, //  293
        {0xC86AB5C39FA63440, 0x8DD9472BF3FEFAA8}, //  294
        {0xFA856334878FC150, 0xB14F98F6F0FEB952}, //  295
        {0x9C935E00D4B9D8D2, 0x6ED1BF9A569F33D4}, //  296
        {0xC3B8358109E84F07, 0x0A862F80EC4700C9}, //  297
        {0xF4A642E14C6262C8, 0xCD27BB612758C0FB}, //  298
        {0x98E7E9CCCFBD7DBD, 0x8038D51CB897789D}, //  299
        {0xBF21E44003ACDD2C, 0xE0470A63E6BD56C4}, //  300
        {0xEEEA5D5004981478, 0x1858CCFCE06CAC75}, //  301
        {0x95527A5202DF0CCB, 0x0F37801E0C43EBC9}, //  302
        {0xBAA718E68396CFFD, 0xD30560258F54E6BB}, //  303
        {0xE950DF20247C83FD, 0x47C6B82EF32A206A}, //  304
        {0x91D28B7416CDD27E, 0x4CDC331D57FA5442}, //  305
        {0xB6472E511C81471D, 0xE0133FE4ADF8E953}, //  306
        {0xE3D8F9E563A198E5, 0x58180FDDD97723A7}, //  307
        {0x8E679C2F5E44FF8F, 0x570F09EAA7EA7649}, //  308
        {0xB201833B35D63F73, 0x2CD2CC6551E513DB}, //  309
        {0xDE81E40A034BCF4F, 0xF8077F7EA65E58D2}, //  310
        {0x8B112E86420F6191, 0xFB04AFAF27FAF783}, //  311
        {0xADD57A27D29339F6, 0x79C5DB9AF1F9B564}, //  312
        {0xD94AD8B1C7380874, 0x18375281AE7822BD}, //  313
        {0x87CEC76F1C830548, 0x8F2293910D0B15B6}, //  314
        {0xA9C2794AE3A3C69A, 0xB2EB3875504DDB23}, //  315
        {0xD433179D9C8CB841, 0x5FA60692A46151EC}, //  316
        {0x849FEEC281D7F328, 0xDBC7C41BA6BCD334}, //  317
        {0xA5C7EA73224DEFF3, 0x12B9B522906C0801}, //  318
        {0xCF39E50FEAE16BEF, 0xD768226B34870A01}, //  319
        {0x81842F29F2CCE375, 0xE6A1158300D46641}, //  320
        {0xA1E53AF46F801C53, 0x60495AE3C1097FD1}, //  321
        {0xCA5E89B18B602368, 0x385BB19CB14BDFC5}, //  322
        {0xFCF62C1DEE382C42, 0x46729E03DD9ED7B6}, //  323
        {0x9E19DB92B4E31BA9, 0x6C07A2C26A8346D2}, //  324
    };
    
    const u64 M52 = (1ull << 52) - 1;
    const u64 M63 = (1ull << 63) - 1;
    const u64 M32 = (1ull << 32) - 1;
    const u64 E16 = 1e16;
    const u64 E15 = 1e15;
    const u64 _9E15 = 9e15;
    const double E_N309 = 1e-309;
    const u64 E_N309_U = *(u64 *)&E_N309;
    const u64 Inf_U = (0x7ffull << 52);
    const u64 Inf_E_N309_U = Inf_U - E_N309_U;
    const u64 Max_Nan = M63;

    // variable define
    M(vi_8);
    M(vi_abs_8);
    M(vi_abs_offset_8);
    u64 vi_abs_offset[All];
    // u64 vi_abs[All];
    M(sign_8);
    M(frac_8);
    M(exp_8);
    M(mantissa_8);
    __mmask8 normal_8[group_count];
    __mmask8 lower_boundary_is_closer_8[group_count];
    M(c_8);
    M(q_8);
    M(cb_8);
    M(cbl_8);
    M(cbr_8);
    M(k_8);
    M(nk_8);
    M(h_8);
    M(pow10_hi_8);
    M(pow10_lo_8);
    M(vbl_8);
    M(vb_8);
    M(vbr_8);
    M(lower_8);
    M(upper_8);
    M(s_8);
    M(tmp_high_8);
    M(tmp_low_8);
    M(sp_8);
    M(sp10_8);
    M(sp10_add10_8);
    M(sp10_mul4_8);
    M(sp10_add10_mul4_8);
    M(digit_out_8);
    M(s_mul4_8);
    __mmask8 mask_8[group_count];
    M(tmp1_8);
    M(tmp2_8);
    M(tmp3_8);
    M(e10_8);
    M(high9_8);
    M(low8_8);
    M(buf_ptr_8);
    char *buf_ptr[All];
    i64 e10[All];
    M(h1_8);
    M(D64_h1_8);
    M(D64_h_8);
    M(r1_tmp);
    M(r2_tmp);
    M(r3_tmp);
    M(r1_vbl_8);
    M(r2_vbl_8);
    M(r3_vbl_8);
    M(r1_vb_8);
    M(r2_vb_8);
    M(r3_vb_8);
    M(r1_vbr_8);
    M(r2_vbr_8);
    M(r3_vbr_8);
    M(pow10_sl_h1_r1_8);
    M(pow10_sl_h1_r2_8);
    M(pow10_sl_h1_r3_8);
    M(pow10_sl_h_r1_8);
    M(pow10_sl_h_r2_8);
    M(pow10_sl_h_r3_8);
    __mmask8 check_is_digit16_8[group_count];
    u64 high9[All];
    u64 low8[All];
    u64 tz[All];
    u64 digit_out[All];

    // ===== calc digit_out and e10; result = digit_out * 10^e10  =====

    FORI vi_8[i] = _mm512_loadu_epi64(&value[i * group]);
    FORI vi_abs_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M63));                 // vi & M63
    FORI sign_8[i] = _mm512_srli_epi64(vi_8[i], 63);                                      // vi>>63
    FORI vi_abs_offset_8[i] = _mm512_sub_epi64(vi_abs_8[i], _mm512_set1_epi64(E_N309_U)); // vi_abs - *(u64*)&(1e-309)
    FORI _mm512_storeu_epi64(&vi_abs_offset[i * group], vi_abs_offset_8[i]);
    FORI buf_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), sign_8[i]); // buf_ptr+=sign
    FORI _mm512_storeu_epi64(&buf_ptr[i * group], buf_ptr_8[i]);
    FORI frac_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M52));                                                                                   // vi&M52
    FORI exp_8[i] = _mm512_srli_epi64(vi_abs_8[i], 52);                                                                                                   // vi_abs>>52
    FORI normal_8[i] = _mm512_cmpneq_epu64_mask(exp_8[i], _mm512_set1_epi64(0));                                                                          // exp != 0
    FORI c_8[i] = _mm512_mask_blend_epi64(normal_8[i], frac_8[i], _mm512_or_epi64(frac_8[i], _mm512_set1_epi64(1ull << 52)));                             // c = frac | (normal << 52);
    FORI q_8[i] = _mm512_mask_blend_epi64(normal_8[i], _mm512_set1_epi64(-1074), _mm512_sub_epi64(exp_8[i], _mm512_set1_epi64(1075)));                    // q = exp - 1074 - normal; // exp - 1074 - 1 or exp - 1074 - 0
    FORI lower_boundary_is_closer_8[i] = _mm512_cmpeq_epu64_mask(frac_8[i], _mm512_set1_epi64(0));                                                        // lower_boundary_is_closer = (frac == 0);
    FORI cb_8[i] = _mm512_slli_epi64(c_8[i], 2);                                                                                                          // 4 * c
    FORI cbl_8[i] = _mm512_mask_sub_epi64(_mm512_sub_epi64(cb_8[i], _mm512_set1_epi64(2)), lower_boundary_is_closer_8[i], cb_8[i], _mm512_set1_epi64(1)); // 4 * c - 2 + lower_boundary_is_closer;
    // FORI cbr_8[i] = _mm512_add_epi64(cb_8[i], _mm512_set1_epi64(2));                                                                                   // 4 * c + 2;
    FORI k_8[i] = _mm512_srai_epi64(_mm512_mask_sub_epi64(_mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          lower_boundary_is_closer_8[i],
                                                          _mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          _mm512_set1_epi64(524031)),
                                    22);                           // k = (q * 1262611 - (lower_boundary_is_closer ? 524031 : 0)) >> 22;
    FORI nk_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(0), k_8[i]); //-k
    FORI h_8[i] = _mm512_add_epi64(_mm512_add_epi64(q_8[i], _mm512_set1_epi64(1)),
                                   _mm512_srai_epi64(_mm512_mullo_epi64(nk_8[i],
                                                                        _mm512_set1_epi64(1741647)),
                                                     19));                                              // h = q + FloorLog2Pow10(-k) + 1;
    FORI pow10_hi_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), &g[-kMin], sizeof(u64)); // 2 * (-k)
    const char *pow10_lo_ptr = ((char *)&g[-kMin]) + sizeof(u64);
    //FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), pow10_lo_ptr, sizeof(u64)); // 2 * (-k) + 1
    // FORI FORJ buffer[i * group + j][0] = '-';

#if 0
    // avx512_roundOdd may not efficient, how to optimize?
    FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    FORI vb_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]));
    FORI vbr_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbr_8[i], h_8[i]));
#else
    FORI h1_8[i] = _mm512_add_epi64(h_8[i], _mm512_set1_epi64(1));       // h + 1
    FORI D64_h_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h_8[i]);   // D64_h = 64 - h;
    FORI D64_h1_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h1_8[i]); // D64_h1 = 64 - (h + 1);
    FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), pow10_lo_ptr, sizeof(u64)); // 2 * (-k) + 1
    // FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    // for(int i=0;i<group_count;++i)
    // for(int i=0;i<group_count-1;++i)avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    // for(int i=group_count-1;i<group_count;++i)avx512_u128_mul_u64_epu64_2(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI vbl_8[i] = roundOdd(r1_vbl_8[i], r2_vbl_8[i]); // r1 | ( r2 > 1 );
    // cbl
    // cb = lower_boundary_is_closer_8 ? cbl + 1 : cbl + 2
    // cbr = cb + 2

    // FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]), r1_8[i], r2_8[i], r3_8[i]);
    // FORI vb_8[i] = roundOdd(r1_8[i], r2_8[i]); // r1 | ( r2 > 1 );

    // pow10 << h
    FORI pow10_sl_h_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h_8[i]);                                                            // pow10_hi>>(64-h)
    FORI pow10_sl_h_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h_8[i])); // pow10_hi<<h | pow10_lo>>(64-h)
    FORI pow10_sl_h_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h_8[i]);                                                                // pow10_lo<<h

    // pow10 << (h+1)
    FORI pow10_sl_h1_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h1_8[i]);                                                             // pow10_hi>>(64-(h+1))
    FORI pow10_sl_h1_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h1_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h1_8[i])); // pow10_hi<<(h+1) | pow10_lo>>(64-(h+1))
    FORI pow10_sl_h1_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h1_8[i]);                                                                 // pow10_lo<<(h+1)

    // lower_boundary_is_closer ? (pow10 << h) : (pow10<<(h+1)) ;
    FORI r1_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r1_8[i], pow10_sl_h_r1_8[1]);
    FORI r2_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r2_8[i], pow10_sl_h_r2_8[1]);
    FORI r3_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r3_8[i], pow10_sl_h_r3_8[1]);
    //FORI r1_tmp[i] = pow10_sl_h1_r1_8[i];
    //FORI r2_tmp[i] = pow10_sl_h1_r2_8[i];
    //FORI r3_tmp[i] = pow10_sl_h1_r3_8[i];

    // cb = cbl + 1 or cbl + 2; u192 + u192
    FORI r3_vb_8[i] = _mm512_add_epi64(r3_vbl_8[i], r3_tmp[i]);
    FORI r2_vb_8[i] = _mm512_add_epi64(r2_vbl_8[i], r2_tmp[i]);
    // remove next line can pass the check , can be faster but is all can be right ?  how to prove ?
    // FORI r2_vb_8[i] = _mm512_mask_add_epi64(r2_vb_8[i], _mm512_cmplt_epu64_mask(r3_vb_8[i], r3_vbl_8[i]), r2_vb_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vb_8[i] = _mm512_add_epi64(r1_vbl_8[i], r1_tmp[i]);
    FORI r1_vb_8[i] = _mm512_mask_add_epi64(r1_vb_8[i], _mm512_cmplt_epu64_mask(r2_vb_8[i], r2_vbl_8[i]), r1_vb_8[i], _mm512_set1_epi64(1)); // carry
    //

    // cbr = cb + 2 ; u192 + u192
    FORI r3_vbr_8[i] = _mm512_add_epi64(r3_vb_8[i], pow10_sl_h1_r3_8[i]);
    FORI r2_vbr_8[i] = _mm512_add_epi64(r2_vb_8[i], pow10_sl_h1_r2_8[i]);
    // FORI r2_vbr_8[i] = _mm512_mask_add_epi64(r2_vbr_8[i], _mm512_cmplt_epu64_mask(r3_vbr_8[i], r3_vb_8[i]), r2_vbr_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vbr_8[i] = _mm512_add_epi64(r1_vb_8[i], pow10_sl_h1_r1_8[i]);
    FORI r1_vbr_8[i] = _mm512_mask_add_epi64(r1_vbr_8[i], _mm512_cmplt_epu64_mask(r2_vbr_8[i], r2_vb_8[i]), r1_vbr_8[i], _mm512_set1_epi64(1)); // carry
    //
    FORI vb_8[i] = roundOdd(r1_vb_8[i], r2_vb_8[i]);    // r1 | ( r2 > 1 );
    FORI vbr_8[i] = roundOdd(r1_vbr_8[i], r2_vbr_8[i]); // r1 | ( r2 > 1 );
#endif

    FORI lower_8[i] = _mm512_add_epi64(vbl_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbl + (c & 1);
    FORI upper_8[i] = _mm512_sub_epi64(vbr_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbr - (c & 1);
    FORI s_8[i] = _mm512_srli_epi64(vb_8[i], 2);                                                  // vb / 4 == vb >> 2
    // 1844674407370955161 = ceil(2**64 / 10)  ; 2**64 > 1e17*10
    // n / 10 = (n * 1844674407370955161) >> 64
    FORI avx512_u64_mul_u64_epu64(s_8[i], _mm512_set1_epi64(1844674407370955162ull), sp_8[i], tmp_low_8[i]); // sp = s / 10;
    FORI sp10_8[i] = _mm512_mullo_epi64(sp_8[i], _mm512_set1_epi64(10));                                     // sp10 = sp * 10;
    FORI sp10_add10_8[i] = _mm512_add_epi64(sp10_8[i], _mm512_set1_epi64(10));                               // sp * 10 + 10
    FORI sp10_mul4_8[i] = _mm512_slli_epi64(sp10_8[i], 2);                                                   // sp10 * 4
    FORI sp10_add10_mul4_8[i] = _mm512_slli_epi64(sp10_add10_8[i], 2);                                       // (sp10 + 10) * 4
    // u64 digit_out = s + (((4 * s) < std::min(lower, upper - 3)) | ((0b11001000 >> (vb & 7)) & 1));//s or s + 1
    // if (lower <= sp10 * 4)digit_out = sp10;
    // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    FORI digit_out_8[i] = s_8[i];
    // FORI s_mul4_8[i] = _mm512_slli_epi64(s_8[i], 2);                                                                                           // s * 4 == vb & (-4)
    FORI s_mul4_8[i] = _mm512_and_epi64(_mm512_set1_epi64(-4), vb_8[i]);
    // FORI s_mul4_8[i] = _mm512_andnot_epi64(_mm512_set1_epi64(3),vb_8[i]);
    FORI tmp1_8[i] = _mm512_srlv_epi64(_mm512_set1_epi64(0b11001000), _mm512_and_epi64(vb_8[i], _mm512_set1_epi64(7)));                        // ((0b11001000 >> (vb & 7))
    FORI mask_8[i] = _mm512_cmplt_epi64_mask(s_mul4_8[i], _mm512_min_epi64(lower_8[i], _mm512_sub_epi64(upper_8[i], _mm512_set1_epi64(3))));   // 4*s <= min(lower,upper-3)
    FORI tmp2_8[i] = _mm512_mask_blend_epi64(mask_8[i], _mm512_set1_epi64(0), _mm512_set1_epi64(1));                                           // if( 4*s <= min(lower,upper-3) ) tmp2 = 1;
    FORI tmp3_8[i] = _mm512_or_epi64(_mm512_and_epi64(tmp1_8[i], _mm512_set1_epi64(1)), tmp2_8[i]);                                            // tmp3 = (tmp1 & 1) | tmp2  ; // tmp3 = 0 or 1
    FORI digit_out_8[i] = _mm512_add_epi64(digit_out_8[i], tmp3_8[i]);                                                                         // s or s+1
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(lower_8[i], sp10_mul4_8[i]), digit_out_8[i], sp10_8[i]);             // if (lower <= sp10 * 4)digit_out = sp10;
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(sp10_add10_mul4_8[i], upper_8[i]), digit_out_8[i], sp10_add10_8[i]); // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    // print_8(digit_out_8[0]);
    // printf("len=%d\n",DecimalLength(digit_out_8[0][0]));
    // print_8(k_8[0]);
    // const __m512i E16_8 = _mm512_set1_epi64(E16);
    const __m512i E15_8 = _mm512_set1_epi64(E15);
    const __m512i _9E15_8 = _mm512_set1_epi64(_9E15);                                                       // 1e16-1e15=9e15
    FORI check_is_digit16_8[i] = _mm512_cmplt_epu64_mask(_mm512_sub_epi64(digit_out_8[i], E15_8), _9E15_8); // digit_out_8 in [1e15,1e16)
    FORI e10_8[i] = _mm512_add_epi64(k_8[i], _mm512_mask_blend_epi64(check_is_digit16_8[i], _mm512_set1_epi64(16), _mm512_set1_epi64(15)));
    // FORI digit_out_8[i] = _mm512_mask_blend_epi64(check_is_digit16_8[i],
    //                                               digit_out_8[i],
    //                                               _mm512_mullo_epi64(digit_out_8[i], _mm512_set1_epi64(10))); // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;
    FORI digit_out_8[i] = _mm512_mask_mullo_epi64(digit_out_8[i], check_is_digit16_8[i], digit_out_8[i], _mm512_set1_epi64(10)); // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;
    // FORI e10_8[i] = _mm512_mask_add_epi64(_mm512_add_epi64(k_8[i], _mm512_set1_epi64(16)), check_is_digit16_8[i], k_8[i], _mm512_set1_epi64(15));//if(1e15 <= digit_out_8 < 1e16) k+=15; else k+=16;

    //  ===== calc digit_out and e10 end; =====
    // print digit_out and  e10

    FORI _mm512_storeu_epi64(&e10[i * group], e10_8[i]);
    FORI _mm512_storeu_epi64(&digit_out[i * group], digit_out_8[i]);
    // print_8(digit_out_8[0]);
    // printf("len = %d\n",dec_length(digit_out_8[0][0]));
    //  print_8(e10_8[0]);
    FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(digit_out_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC), // round down
                                                        _mm512_set1_pd(1e-8)));                                                              // 1e17/1e8 = 9 digit ; digit17 / digit8 = digit9
    FORI low8_8[i] = _mm512_sub_epi64(digit_out_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8)));                               // 1e17%1e8 = 8 digit
    //  print all digit 17;
    FORI FORJ buffer[i * group + j][0] = '-';
#if 1
    const long long *exp_ptr = &exp_result3[324];
    for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1); // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);    // high 8 bit in 32bit

        // 1441151881 = 2**57 / 1e8
        u64 num1_print[8], num1_2_print[8];
        __m512i num1 = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + 0], _mm512_set1_epi64(1441151881)), 57); // high9/1e8
        __m512i num1_2 = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + 1], _mm512_set1_epi64(1441151881)), 57);
        _mm512_storeu_epi64(num1_print, _mm512_or_epi64(num1, _mm512_set1_epi64('.' * 256 + '0')));
        _mm512_storeu_epi64(num1_2_print, _mm512_or_epi64(num1_2, _mm512_set1_epi64('.' * 256 + '0')));
        __m512i num2_9 = _mm512_sub_epi64(high9_8[i * 2 + 0], _mm512_mullo_epi64(num1, _mm512_set1_epi64(1e8))); // num2_9 = high9 - num1*(10^8)
        __m512i num2_9_2 = _mm512_sub_epi64(high9_8[i * 2 + 1], _mm512_mullo_epi64(num1_2, _mm512_set1_epi64(1e8)));

        __m512i num_low16[4];
        __m512i num1234_5678_8[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num_final_print[4 * 8];
        num_low16[0] = num2_9;
        num_low16[1] = num2_9_2;
        num_low16[2] = low8_8[i * 2 + 0];
        num_low16[3] = low8_8[i * 2 + 1];

        FORJ4 num1234_5678_8[j] = _mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)); // 2**48/1e4
        FORJ4 num1234_8[j] = _mm512_srli_epi64(num1234_5678_8[j], 48);
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000)));
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
		//FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778));
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10));
            // FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_final_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));
        FORJ4 tz_low16[j] = _mm512_srli_epi64(_mm512_lzcnt_epi64(num_final[j]), 3);
        tz_8[0] = _mm512_mask_add_epi64(tz_low16[2], _mm512_cmpeq_epi64_mask(tz_low16[2], _mm512_set1_epi64(8)), tz_low16[2], tz_low16[0]);
        tz_8[1] = _mm512_mask_add_epi64(tz_low16[3], _mm512_cmpeq_epi64_mask(tz_low16[3], _mm512_set1_epi64(8)), tz_low16[3], tz_low16[1]);
        _mm512_storeu_epi64(&tz[(i * 2) * group], tz_8[0]);
        _mm512_storeu_epi64(&tz[(i * 2 + 1) * group], tz_8[1]);
        unsigned long long offset1[8], offset2[8];
        _mm512_storeu_epi64(offset1, _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[0], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[0]));
        _mm512_storeu_epi64(offset2, _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[1], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[1]));
        //_mm512_storeu_epi64(offset1, _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(18), tz_8[0]) , _mm512_srli_epi64( tz_8[0], 4)));
        //_mm512_storeu_epi64(offset2, _mm512_sub_epi64(_mm512_sub_epi64(_mm512_set1_epi64(18), tz_8[0]) , _mm512_srli_epi64( tz_8[1], 4)));

        
        for (int j = 0; j < group; ++j)
        {
            
                char *buf_ptr1 = buf_ptr[i * 2 * group + j];
                *(u64 *)(buf_ptr1) = num1_print[j]; // write 8 byte but only low 2 byte use;
                _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_final_print[2 * 8 + j], num_final_print[0 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr1 + offset1[j]) = exp_ptr[e10[2 * i * group + j]];

                char *buf_ptr2 = buf_ptr[(i * 2 + 1) * group + j];
                *(u64 *)(buf_ptr2) = num1_2_print[j];
                _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_final_print[3 * 8 + j], num_final_print[1 * 8 + j])); // write 16byte
                *(i64 *)(buf_ptr2 + offset2[j]) = exp_ptr[e10[(2 * i + 1) * group + j]];
            
        }
    }

#endif

    // adjust { Nan , Inf , 0 , <1e-309 } double value , unlikely ,
    if (1)
        FORI FORJ
        {
            // if(vi_abs[i*group+j] - E_N309_U > (0x7ffull<<52) - E_N309_U)
            // if(vi_abs[i*group + j] == 0)memcpy(buf_ptr[i*group+j],"0\0",2);
            // if (vi_abs[i*group+j] - E_N309_U >= ( ((0x7ffull << 52)) - E_N309_U) ) // unlikely
            if (vi_abs_offset[i * group + j] >= (Inf_E_N309_U))
            {
                if (vi_abs_offset[i * group + j] <= (Max_Nan - E_N309_U))
                {
                    //memcpy(buf_ptr[i * group + j], vi_abs_offset[i * group + j] == Inf_E_N309_U ? "inf\0" : "nan\0", 4);
                    *(int*)&buf_ptr[i * group + j] = vi_abs_offset[i * group + j] == Inf_E_N309_U ? *(int*)&"inf\0" : *(int*)&"nan\0";
                }
                else
                {
                    // adjust to shortest print
                    if (vi_abs_offset[i * group + j] == (0ull - E_N309_U))
                    {
                        //memcpy(buf_ptr[i * group + j], "0\0", 2);
                        *(short*)&buf_ptr[i * group + j] = *(short*)&"0\0";
                        // memcpy(buf_ptr[i * group + j], "0.0\0", 4);
                        continue;
                    }
                    u64 len = dec_length(digit_out[i * group + j]);
                    u64 tz_num = tz[i * group + j];
                    u64 lz_num = 17 - len; // lz_num >= 2
                    u64 signficant = 17 - tz_num - lz_num;
                    u64 start_pos = lz_num + 1;
                    if (signficant > 1ull)
                    {
                        buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        if (signficant <= 9)
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                        else
                        {
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                            *(i64 *)&buf_ptr[i * group + j][2 + 8] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1 + 8];
                        }
                        *(i64 *)&buf_ptr[i * group + j][signficant + 1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    else
                    {
                        *(short *)&buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        *(i64 *)&buf_ptr[i * group + j][1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    // printf("len = %llu lz = %llu tz = %llu signficant = %llu start_pos = %llu\n",len,lz_num,tz_num, signficant,start_pos);
                }
            }
        }
}

#endif

void d2s_32v_impl(double *v, char **buffer)
{
    // base on schubfach algorithm;
    // avx512 implementation;
    using u64 = unsigned long long;
    using i64 = long long;
#define FORI for (int i = 0; i < group_count; ++i)
#define FORJ for (int j = 0; j < group; ++j)
#define M(v) __m512i v[group_count];

    // ASCII : e-324 -> e+308
    // const long long exp_result3[308 - (-324) + 1] = {0x3432332d65, 0x3332332d65, 0x3232332d65, 0x3132332d65, 0x3032332d65, 0x3931332d65, 0x3831332d65, 0x3731332d65, 0x3631332d65, 0x3531332d65, 0x3431332d65, 0x3331332d65, 0x3231332d65, 0x3131332d65, 0x3031332d65, 0x3930332d65, 0x3830332d65, 0x3730332d65, 0x3630332d65, 0x3530332d65, 0x3430332d65, 0x3330332d65, 0x3230332d65, 0x3130332d65, 0x3030332d65, 0x3939322d65, 0x3839322d65, 0x3739322d65, 0x3639322d65, 0x3539322d65, 0x3439322d65, 0x3339322d65, 0x3239322d65, 0x3139322d65, 0x3039322d65, 0x3938322d65, 0x3838322d65, 0x3738322d65, 0x3638322d65, 0x3538322d65, 0x3438322d65, 0x3338322d65, 0x3238322d65, 0x3138322d65, 0x3038322d65, 0x3937322d65, 0x3837322d65, 0x3737322d65, 0x3637322d65, 0x3537322d65, 0x3437322d65, 0x3337322d65, 0x3237322d65, 0x3137322d65, 0x3037322d65, 0x3936322d65, 0x3836322d65, 0x3736322d65, 0x3636322d65, 0x3536322d65, 0x3436322d65, 0x3336322d65, 0x3236322d65, 0x3136322d65, 0x3036322d65, 0x3935322d65, 0x3835322d65, 0x3735322d65, 0x3635322d65, 0x3535322d65, 0x3435322d65, 0x3335322d65, 0x3235322d65, 0x3135322d65, 0x3035322d65, 0x3934322d65, 0x3834322d65, 0x3734322d65, 0x3634322d65, 0x3534322d65, 0x3434322d65, 0x3334322d65, 0x3234322d65, 0x3134322d65, 0x3034322d65, 0x3933322d65, 0x3833322d65, 0x3733322d65, 0x3633322d65, 0x3533322d65, 0x3433322d65, 0x3333322d65, 0x3233322d65, 0x3133322d65, 0x3033322d65, 0x3932322d65, 0x3832322d65, 0x3732322d65, 0x3632322d65, 0x3532322d65, 0x3432322d65, 0x3332322d65, 0x3232322d65, 0x3132322d65, 0x3032322d65, 0x3931322d65, 0x3831322d65, 0x3731322d65, 0x3631322d65, 0x3531322d65, 0x3431322d65, 0x3331322d65, 0x3231322d65, 0x3131322d65, 0x3031322d65, 0x3930322d65, 0x3830322d65, 0x3730322d65, 0x3630322d65, 0x3530322d65, 0x3430322d65, 0x3330322d65, 0x3230322d65, 0x3130322d65, 0x3030322d65, 0x3939312d65, 0x3839312d65, 0x3739312d65, 0x3639312d65, 0x3539312d65, 0x3439312d65, 0x3339312d65, 0x3239312d65, 0x3139312d65, 0x3039312d65, 0x3938312d65, 0x3838312d65, 0x3738312d65, 0x3638312d65, 0x3538312d65, 0x3438312d65, 0x3338312d65, 0x3238312d65, 0x3138312d65, 0x3038312d65, 0x3937312d65, 0x3837312d65, 0x3737312d65, 0x3637312d65, 0x3537312d65, 0x3437312d65, 0x3337312d65, 0x3237312d65, 0x3137312d65, 0x3037312d65, 0x3936312d65, 0x3836312d65, 0x3736312d65, 0x3636312d65, 0x3536312d65, 0x3436312d65, 0x3336312d65, 0x3236312d65, 0x3136312d65, 0x3036312d65, 0x3935312d65, 0x3835312d65, 0x3735312d65, 0x3635312d65, 0x3535312d65, 0x3435312d65, 0x3335312d65, 0x3235312d65, 0x3135312d65, 0x3035312d65, 0x3934312d65, 0x3834312d65, 0x3734312d65, 0x3634312d65, 0x3534312d65, 0x3434312d65, 0x3334312d65, 0x3234312d65, 0x3134312d65, 0x3034312d65, 0x3933312d65, 0x3833312d65, 0x3733312d65, 0x3633312d65, 0x3533312d65, 0x3433312d65, 0x3333312d65, 0x3233312d65, 0x3133312d65, 0x3033312d65, 0x3932312d65, 0x3832312d65, 0x3732312d65, 0x3632312d65, 0x3532312d65, 0x3432312d65, 0x3332312d65, 0x3232312d65, 0x3132312d65, 0x3032312d65, 0x3931312d65, 0x3831312d65, 0x3731312d65, 0x3631312d65, 0x3531312d65, 0x3431312d65, 0x3331312d65, 0x3231312d65, 0x3131312d65, 0x3031312d65, 0x3930312d65, 0x3830312d65, 0x3730312d65, 0x3630312d65, 0x3530312d65, 0x3430312d65, 0x3330312d65, 0x3230312d65, 0x3130312d65, 0x3030312d65, 0x39392d65, 0x38392d65, 0x37392d65, 0x36392d65, 0x35392d65, 0x34392d65, 0x33392d65, 0x32392d65, 0x31392d65, 0x30392d65, 0x39382d65, 0x38382d65, 0x37382d65, 0x36382d65, 0x35382d65, 0x34382d65, 0x33382d65, 0x32382d65, 0x31382d65, 0x30382d65, 0x39372d65, 0x38372d65, 0x37372d65, 0x36372d65, 0x35372d65, 0x34372d65, 0x33372d65, 0x32372d65, 0x31372d65, 0x30372d65, 0x39362d65, 0x38362d65, 0x37362d65, 0x36362d65, 0x35362d65, 0x34362d65, 0x33362d65, 0x32362d65, 0x31362d65, 0x30362d65, 0x39352d65, 0x38352d65, 0x37352d65, 0x36352d65, 0x35352d65, 0x34352d65, 0x33352d65, 0x32352d65, 0x31352d65, 0x30352d65, 0x39342d65, 0x38342d65, 0x37342d65, 0x36342d65, 0x35342d65, 0x34342d65, 0x33342d65, 0x32342d65, 0x31342d65, 0x30342d65, 0x39332d65, 0x38332d65, 0x37332d65, 0x36332d65, 0x35332d65, 0x34332d65, 0x33332d65, 0x32332d65, 0x31332d65, 0x30332d65, 0x39322d65, 0x38322d65, 0x37322d65, 0x36322d65, 0x35322d65, 0x34322d65, 0x33322d65, 0x32322d65, 0x31322d65, 0x30322d65, 0x39312d65, 0x38312d65, 0x37312d65, 0x36312d65, 0x35312d65, 0x34312d65, 0x33312d65, 0x32312d65, 0x31312d65, 0x30312d65, 0x39302d65, 0x38302d65, 0x37302d65, 0x36302d65, 0x35302d65, 0x34302d65, 0x33302d65, 0x32302d65, 0x31302d65, 0x30302b65, 0x31302b65, 0x32302b65, 0x33302b65, 0x34302b65, 0x35302b65, 0x36302b65, 0x37302b65, 0x38302b65, 0x39302b65, 0x30312b65, 0x31312b65, 0x32312b65, 0x33312b65, 0x34312b65, 0x35312b65, 0x36312b65, 0x37312b65, 0x38312b65, 0x39312b65, 0x30322b65, 0x31322b65, 0x32322b65, 0x33322b65, 0x34322b65, 0x35322b65, 0x36322b65, 0x37322b65, 0x38322b65, 0x39322b65, 0x30332b65, 0x31332b65, 0x32332b65, 0x33332b65, 0x34332b65, 0x35332b65, 0x36332b65, 0x37332b65, 0x38332b65, 0x39332b65, 0x30342b65, 0x31342b65, 0x32342b65, 0x33342b65, 0x34342b65, 0x35342b65, 0x36342b65, 0x37342b65, 0x38342b65, 0x39342b65, 0x30352b65, 0x31352b65, 0x32352b65, 0x33352b65, 0x34352b65, 0x35352b65, 0x36352b65, 0x37352b65, 0x38352b65, 0x39352b65, 0x30362b65, 0x31362b65, 0x32362b65, 0x33362b65, 0x34362b65, 0x35362b65, 0x36362b65, 0x37362b65, 0x38362b65, 0x39362b65, 0x30372b65, 0x31372b65, 0x32372b65, 0x33372b65, 0x34372b65, 0x35372b65, 0x36372b65, 0x37372b65, 0x38372b65, 0x39372b65, 0x30382b65, 0x31382b65, 0x32382b65, 0x33382b65, 0x34382b65, 0x35382b65, 0x36382b65, 0x37382b65, 0x38382b65, 0x39382b65, 0x30392b65, 0x31392b65, 0x32392b65, 0x33392b65, 0x34392b65, 0x35392b65, 0x36392b65, 0x37392b65, 0x38392b65, 0x39392b65, 0x3030312b65, 0x3130312b65, 0x3230312b65, 0x3330312b65, 0x3430312b65, 0x3530312b65, 0x3630312b65, 0x3730312b65, 0x3830312b65, 0x3930312b65, 0x3031312b65, 0x3131312b65, 0x3231312b65, 0x3331312b65, 0x3431312b65, 0x3531312b65, 0x3631312b65, 0x3731312b65, 0x3831312b65, 0x3931312b65, 0x3032312b65, 0x3132312b65, 0x3232312b65, 0x3332312b65, 0x3432312b65, 0x3532312b65, 0x3632312b65, 0x3732312b65, 0x3832312b65, 0x3932312b65, 0x3033312b65, 0x3133312b65, 0x3233312b65, 0x3333312b65, 0x3433312b65, 0x3533312b65, 0x3633312b65, 0x3733312b65, 0x3833312b65, 0x3933312b65, 0x3034312b65, 0x3134312b65, 0x3234312b65, 0x3334312b65, 0x3434312b65, 0x3534312b65, 0x3634312b65, 0x3734312b65, 0x3834312b65, 0x3934312b65, 0x3035312b65, 0x3135312b65, 0x3235312b65, 0x3335312b65, 0x3435312b65, 0x3535312b65, 0x3635312b65, 0x3735312b65, 0x3835312b65, 0x3935312b65, 0x3036312b65, 0x3136312b65, 0x3236312b65, 0x3336312b65, 0x3436312b65, 0x3536312b65, 0x3636312b65, 0x3736312b65, 0x3836312b65, 0x3936312b65, 0x3037312b65, 0x3137312b65, 0x3237312b65, 0x3337312b65, 0x3437312b65, 0x3537312b65, 0x3637312b65, 0x3737312b65, 0x3837312b65, 0x3937312b65, 0x3038312b65, 0x3138312b65, 0x3238312b65, 0x3338312b65, 0x3438312b65, 0x3538312b65, 0x3638312b65, 0x3738312b65, 0x3838312b65, 0x3938312b65, 0x3039312b65, 0x3139312b65, 0x3239312b65, 0x3339312b65, 0x3439312b65, 0x3539312b65, 0x3639312b65, 0x3739312b65, 0x3839312b65, 0x3939312b65, 0x3030322b65, 0x3130322b65, 0x3230322b65, 0x3330322b65, 0x3430322b65, 0x3530322b65, 0x3630322b65, 0x3730322b65, 0x3830322b65, 0x3930322b65, 0x3031322b65, 0x3131322b65, 0x3231322b65, 0x3331322b65, 0x3431322b65, 0x3531322b65, 0x3631322b65, 0x3731322b65, 0x3831322b65, 0x3931322b65, 0x3032322b65, 0x3132322b65, 0x3232322b65, 0x3332322b65, 0x3432322b65, 0x3532322b65, 0x3632322b65, 0x3732322b65, 0x3832322b65, 0x3932322b65, 0x3033322b65, 0x3133322b65, 0x3233322b65, 0x3333322b65, 0x3433322b65, 0x3533322b65, 0x3633322b65, 0x3733322b65, 0x3833322b65, 0x3933322b65, 0x3034322b65, 0x3134322b65, 0x3234322b65, 0x3334322b65, 0x3434322b65, 0x3534322b65, 0x3634322b65, 0x3734322b65, 0x3834322b65, 0x3934322b65, 0x3035322b65, 0x3135322b65, 0x3235322b65, 0x3335322b65, 0x3435322b65, 0x3535322b65, 0x3635322b65, 0x3735322b65, 0x3835322b65, 0x3935322b65, 0x3036322b65, 0x3136322b65, 0x3236322b65, 0x3336322b65, 0x3436322b65, 0x3536322b65, 0x3636322b65, 0x3736322b65, 0x3836322b65, 0x3936322b65, 0x3037322b65, 0x3137322b65, 0x3237322b65, 0x3337322b65, 0x3437322b65, 0x3537322b65, 0x3637322b65, 0x3737322b65, 0x3837322b65, 0x3937322b65, 0x3038322b65, 0x3138322b65, 0x3238322b65, 0x3338322b65, 0x3438322b65, 0x3538322b65, 0x3638322b65, 0x3738322b65, 0x3838322b65, 0x3938322b65, 0x3039322b65, 0x3139322b65, 0x3239322b65, 0x3339322b65, 0x3439322b65, 0x3539322b65, 0x3639322b65, 0x3739322b65, 0x3839322b65, 0x3939322b65, 0x3030332b65, 0x3130332b65, 0x3230332b65, 0x3330332b65, 0x3430332b65, 0x3530332b65, 0x3630332b65, 0x3730332b65, 0x3830332b65};
    const int group = 8;                 // avx512 : 512bit = 8 double
    const int group_count = 4;           // 4*8 = 32 double
    const int All = group_count * group; // 32
    // for(int i=0;i<All;i++) printf("v[%d]=%.16le\n",i,v[i]);
    const int kMin = -292;
    const int kMax = 324;
    struct u64x2
    {
        u64 hi;
        u64 lo;
    };
    static const u64x2 g[kMax - kMin + 1] = {
        {0xFF77B1FCBEBCDC4F, 0x25E8E89C13BB0F7B}, // -292
        {0x9FAACF3DF73609B1, 0x77B191618C54E9AD}, // -291
        {0xC795830D75038C1D, 0xD59DF5B9EF6A2418}, // -290
        {0xF97AE3D0D2446F25, 0x4B0573286B44AD1E}, // -289
        {0x9BECCE62836AC577, 0x4EE367F9430AEC33}, // -288
        {0xC2E801FB244576D5, 0x229C41F793CDA740}, // -287
        {0xF3A20279ED56D48A, 0x6B43527578C11110}, // -286
        {0x9845418C345644D6, 0x830A13896B78AAAA}, // -285
        {0xBE5691EF416BD60C, 0x23CC986BC656D554}, // -284
        {0xEDEC366B11C6CB8F, 0x2CBFBE86B7EC8AA9}, // -283
        {0x94B3A202EB1C3F39, 0x7BF7D71432F3D6AA}, // -282
        {0xB9E08A83A5E34F07, 0xDAF5CCD93FB0CC54}, // -281
        {0xE858AD248F5C22C9, 0xD1B3400F8F9CFF69}, // -280
        {0x91376C36D99995BE, 0x23100809B9C21FA2}, // -279
        {0xB58547448FFFFB2D, 0xABD40A0C2832A78B}, // -278
        {0xE2E69915B3FFF9F9, 0x16C90C8F323F516D}, // -277
        {0x8DD01FAD907FFC3B, 0xAE3DA7D97F6792E4}, // -276
        {0xB1442798F49FFB4A, 0x99CD11CFDF41779D}, // -275
        {0xDD95317F31C7FA1D, 0x40405643D711D584}, // -274
        {0x8A7D3EEF7F1CFC52, 0x482835EA666B2573}, // -273
        {0xAD1C8EAB5EE43B66, 0xDA3243650005EED0}, // -272
        {0xD863B256369D4A40, 0x90BED43E40076A83}, // -271
        {0x873E4F75E2224E68, 0x5A7744A6E804A292}, // -270
        {0xA90DE3535AAAE202, 0x711515D0A205CB37}, // -269
        {0xD3515C2831559A83, 0x0D5A5B44CA873E04}, // -268
        {0x8412D9991ED58091, 0xE858790AFE9486C3}, // -267
        {0xA5178FFF668AE0B6, 0x626E974DBE39A873}, // -266
        {0xCE5D73FF402D98E3, 0xFB0A3D212DC81290}, // -265
        {0x80FA687F881C7F8E, 0x7CE66634BC9D0B9A}, // -264
        {0xA139029F6A239F72, 0x1C1FFFC1EBC44E81}, // -263
        {0xC987434744AC874E, 0xA327FFB266B56221}, // -262
        {0xFBE9141915D7A922, 0x4BF1FF9F0062BAA9}, // -261
        {0x9D71AC8FADA6C9B5, 0x6F773FC3603DB4AA}, // -260
        {0xC4CE17B399107C22, 0xCB550FB4384D21D4}, // -259
        {0xF6019DA07F549B2B, 0x7E2A53A146606A49}, // -258
        {0x99C102844F94E0FB, 0x2EDA7444CBFC426E}, // -257
        {0xC0314325637A1939, 0xFA911155FEFB5309}, // -256
        {0xF03D93EEBC589F88, 0x793555AB7EBA27CB}, // -255
        {0x96267C7535B763B5, 0x4BC1558B2F3458DF}, // -254
        {0xBBB01B9283253CA2, 0x9EB1AAEDFB016F17}, // -253
        {0xEA9C227723EE8BCB, 0x465E15A979C1CADD}, // -252
        {0x92A1958A7675175F, 0x0BFACD89EC191ECA}, // -251
        {0xB749FAED14125D36, 0xCEF980EC671F667C}, // -250
        {0xE51C79A85916F484, 0x82B7E12780E7401B}, // -249
        {0x8F31CC0937AE58D2, 0xD1B2ECB8B0908811}, // -248
        {0xB2FE3F0B8599EF07, 0x861FA7E6DCB4AA16}, // -247
        {0xDFBDCECE67006AC9, 0x67A791E093E1D49B}, // -246
        {0x8BD6A141006042BD, 0xE0C8BB2C5C6D24E1}, // -245
        {0xAECC49914078536D, 0x58FAE9F773886E19}, // -244
        {0xDA7F5BF590966848, 0xAF39A475506A899F}, // -243
        {0x888F99797A5E012D, 0x6D8406C952429604}, // -242
        {0xAAB37FD7D8F58178, 0xC8E5087BA6D33B84}, // -241
        {0xD5605FCDCF32E1D6, 0xFB1E4A9A90880A65}, // -240
        {0x855C3BE0A17FCD26, 0x5CF2EEA09A550680}, // -239
        {0xA6B34AD8C9DFC06F, 0xF42FAA48C0EA481F}, // -238
        {0xD0601D8EFC57B08B, 0xF13B94DAF124DA27}, // -237
        {0x823C12795DB6CE57, 0x76C53D08D6B70859}, // -236
        {0xA2CB1717B52481ED, 0x54768C4B0C64CA6F}, // -235
        {0xCB7DDCDDA26DA268, 0xA9942F5DCF7DFD0A}, // -234
        {0xFE5D54150B090B02, 0xD3F93B35435D7C4D}, // -233
        {0x9EFA548D26E5A6E1, 0xC47BC5014A1A6DB0}, // -232
        {0xC6B8E9B0709F109A, 0x359AB6419CA1091C}, // -231
        {0xF867241C8CC6D4C0, 0xC30163D203C94B63}, // -230
        {0x9B407691D7FC44F8, 0x79E0DE63425DCF1E}, // -229
        {0xC21094364DFB5636, 0x985915FC12F542E5}, // -228
        {0xF294B943E17A2BC4, 0x3E6F5B7B17B2939E}, // -227
        {0x979CF3CA6CEC5B5A, 0xA705992CEECF9C43}, // -226
        {0xBD8430BD08277231, 0x50C6FF782A838354}, // -225
        {0xECE53CEC4A314EBD, 0xA4F8BF5635246429}, // -224
        {0x940F4613AE5ED136, 0x871B7795E136BE9A}, // -223
        {0xB913179899F68584, 0x28E2557B59846E40}, // -222
        {0xE757DD7EC07426E5, 0x331AEADA2FE589D0}, // -221
        {0x9096EA6F3848984F, 0x3FF0D2C85DEF7622}, // -220
        {0xB4BCA50B065ABE63, 0x0FED077A756B53AA}, // -219
        {0xE1EBCE4DC7F16DFB, 0xD3E8495912C62895}, // -218
        {0x8D3360F09CF6E4BD, 0x64712DD7ABBBD95D}, // -217
        {0xB080392CC4349DEC, 0xBD8D794D96AACFB4}, // -216
        {0xDCA04777F541C567, 0xECF0D7A0FC5583A1}, // -215
        {0x89E42CAAF9491B60, 0xF41686C49DB57245}, // -214
        {0xAC5D37D5B79B6239, 0x311C2875C522CED6}, // -213
        {0xD77485CB25823AC7, 0x7D633293366B828C}, // -212
        {0x86A8D39EF77164BC, 0xAE5DFF9C02033198}, // -211
        {0xA8530886B54DBDEB, 0xD9F57F830283FDFD}, // -210
        {0xD267CAA862A12D66, 0xD072DF63C324FD7C}, // -209
        {0x8380DEA93DA4BC60, 0x4247CB9E59F71E6E}, // -208
        {0xA46116538D0DEB78, 0x52D9BE85F074E609}, // -207
        {0xCD795BE870516656, 0x67902E276C921F8C}, // -206
        {0x806BD9714632DFF6, 0x00BA1CD8A3DB53B7}, // -205
        {0xA086CFCD97BF97F3, 0x80E8A40ECCD228A5}, // -204
        {0xC8A883C0FDAF7DF0, 0x6122CD128006B2CE}, // -203
        {0xFAD2A4B13D1B5D6C, 0x796B805720085F82}, // -202
        {0x9CC3A6EEC6311A63, 0xCBE3303674053BB1}, // -201
        {0xC3F490AA77BD60FC, 0xBEDBFC4411068A9D}, // -200
        {0xF4F1B4D515ACB93B, 0xEE92FB5515482D45}, // -199
        {0x991711052D8BF3C5, 0x751BDD152D4D1C4B}, // -198
        {0xBF5CD54678EEF0B6, 0xD262D45A78A0635E}, // -197
        {0xEF340A98172AACE4, 0x86FB897116C87C35}, // -196
        {0x9580869F0E7AAC0E, 0xD45D35E6AE3D4DA1}, // -195
        {0xBAE0A846D2195712, 0x8974836059CCA10A}, // -194
        {0xE998D258869FACD7, 0x2BD1A438703FC94C}, // -193
        {0x91FF83775423CC06, 0x7B6306A34627DDD0}, // -192
        {0xB67F6455292CBF08, 0x1A3BC84C17B1D543}, // -191
        {0xE41F3D6A7377EECA, 0x20CABA5F1D9E4A94}, // -190
        {0x8E938662882AF53E, 0x547EB47B7282EE9D}, // -189
        {0xB23867FB2A35B28D, 0xE99E619A4F23AA44}, // -188
        {0xDEC681F9F4C31F31, 0x6405FA00E2EC94D5}, // -187
        {0x8B3C113C38F9F37E, 0xDE83BC408DD3DD05}, // -186
        {0xAE0B158B4738705E, 0x9624AB50B148D446}, // -185
        {0xD98DDAEE19068C76, 0x3BADD624DD9B0958}, // -184
        {0x87F8A8D4CFA417C9, 0xE54CA5D70A80E5D7}, // -183
        {0xA9F6D30A038D1DBC, 0x5E9FCF4CCD211F4D}, // -182
        {0xD47487CC8470652B, 0x7647C32000696720}, // -181
        {0x84C8D4DFD2C63F3B, 0x29ECD9F40041E074}, // -180
        {0xA5FB0A17C777CF09, 0xF468107100525891}, // -179
        {0xCF79CC9DB955C2CC, 0x7182148D4066EEB5}, // -178
        {0x81AC1FE293D599BF, 0xC6F14CD848405531}, // -177
        {0xA21727DB38CB002F, 0xB8ADA00E5A506A7D}, // -176
        {0xCA9CF1D206FDC03B, 0xA6D90811F0E4851D}, // -175
        {0xFD442E4688BD304A, 0x908F4A166D1DA664}, // -174
        {0x9E4A9CEC15763E2E, 0x9A598E4E043287FF}, // -173
        {0xC5DD44271AD3CDBA, 0x40EFF1E1853F29FE}, // -172
        {0xF7549530E188C128, 0xD12BEE59E68EF47D}, // -171
        {0x9A94DD3E8CF578B9, 0x82BB74F8301958CF}, // -170
        {0xC13A148E3032D6E7, 0xE36A52363C1FAF02}, // -169
        {0xF18899B1BC3F8CA1, 0xDC44E6C3CB279AC2}, // -168
        {0x96F5600F15A7B7E5, 0x29AB103A5EF8C0BA}, // -167
        {0xBCB2B812DB11A5DE, 0x7415D448F6B6F0E8}, // -166
        {0xEBDF661791D60F56, 0x111B495B3464AD22}, // -165
        {0x936B9FCEBB25C995, 0xCAB10DD900BEEC35}, // -164
        {0xB84687C269EF3BFB, 0x3D5D514F40EEA743}, // -163
        {0xE65829B3046B0AFA, 0x0CB4A5A3112A5113}, // -162
        {0x8FF71A0FE2C2E6DC, 0x47F0E785EABA72AC}, // -161
        {0xB3F4E093DB73A093, 0x59ED216765690F57}, // -160
        {0xE0F218B8D25088B8, 0x306869C13EC3532D}, // -159
        {0x8C974F7383725573, 0x1E414218C73A13FC}, // -158
        {0xAFBD2350644EEACF, 0xE5D1929EF90898FB}, // -157
        {0xDBAC6C247D62A583, 0xDF45F746B74ABF3A}, // -156
        {0x894BC396CE5DA772, 0x6B8BBA8C328EB784}, // -155
        {0xAB9EB47C81F5114F, 0x066EA92F3F326565}, // -154
        {0xD686619BA27255A2, 0xC80A537B0EFEFEBE}, // -153
        {0x8613FD0145877585, 0xBD06742CE95F5F37}, // -152
        {0xA798FC4196E952E7, 0x2C48113823B73705}, // -151
        {0xD17F3B51FCA3A7A0, 0xF75A15862CA504C6}, // -150
        {0x82EF85133DE648C4, 0x9A984D73DBE722FC}, // -149
        {0xA3AB66580D5FDAF5, 0xC13E60D0D2E0EBBB}, // -148
        {0xCC963FEE10B7D1B3, 0x318DF905079926A9}, // -147
        {0xFFBBCFE994E5C61F, 0xFDF17746497F7053}, // -146
        {0x9FD561F1FD0F9BD3, 0xFEB6EA8BEDEFA634}, // -145
        {0xC7CABA6E7C5382C8, 0xFE64A52EE96B8FC1}, // -144
        {0xF9BD690A1B68637B, 0x3DFDCE7AA3C673B1}, // -143
        {0x9C1661A651213E2D, 0x06BEA10CA65C084F}, // -142
        {0xC31BFA0FE5698DB8, 0x486E494FCFF30A63}, // -141
        {0xF3E2F893DEC3F126, 0x5A89DBA3C3EFCCFB}, // -140
        {0x986DDB5C6B3A76B7, 0xF89629465A75E01D}, // -139
        {0xBE89523386091465, 0xF6BBB397F1135824}, // -138
        {0xEE2BA6C0678B597F, 0x746AA07DED582E2D}, // -137
        {0x94DB483840B717EF, 0xA8C2A44EB4571CDD}, // -136
        {0xBA121A4650E4DDEB, 0x92F34D62616CE414}, // -135
        {0xE896A0D7E51E1566, 0x77B020BAF9C81D18}, // -134
        {0x915E2486EF32CD60, 0x0ACE1474DC1D122F}, // -133
        {0xB5B5ADA8AAFF80B8, 0x0D819992132456BB}, // -132
        {0xE3231912D5BF60E6, 0x10E1FFF697ED6C6A}, // -131
        {0x8DF5EFABC5979C8F, 0xCA8D3FFA1EF463C2}, // -130
        {0xB1736B96B6FD83B3, 0xBD308FF8A6B17CB3}, // -129
        {0xDDD0467C64BCE4A0, 0xAC7CB3F6D05DDBDF}, // -128
        {0x8AA22C0DBEF60EE4, 0x6BCDF07A423AA96C}, // -127
        {0xAD4AB7112EB3929D, 0x86C16C98D2C953C7}, // -126
        {0xD89D64D57A607744, 0xE871C7BF077BA8B8}, // -125
        {0x87625F056C7C4A8B, 0x11471CD764AD4973}, // -124
        {0xA93AF6C6C79B5D2D, 0xD598E40D3DD89BD0}, // -123
        {0xD389B47879823479, 0x4AFF1D108D4EC2C4}, // -122
        {0x843610CB4BF160CB, 0xCEDF722A585139BB}, // -121
        {0xA54394FE1EEDB8FE, 0xC2974EB4EE658829}, // -120
        {0xCE947A3DA6A9273E, 0x733D226229FEEA33}, // -119
        {0x811CCC668829B887, 0x0806357D5A3F5260}, // -118
        {0xA163FF802A3426A8, 0xCA07C2DCB0CF26F8}, // -117
        {0xC9BCFF6034C13052, 0xFC89B393DD02F0B6}, // -116
        {0xFC2C3F3841F17C67, 0xBBAC2078D443ACE3}, // -115
        {0x9D9BA7832936EDC0, 0xD54B944B84AA4C0E}, // -114
        {0xC5029163F384A931, 0x0A9E795E65D4DF12}, // -113
        {0xF64335BCF065D37D, 0x4D4617B5FF4A16D6}, // -112
        {0x99EA0196163FA42E, 0x504BCED1BF8E4E46}, // -111
        {0xC06481FB9BCF8D39, 0xE45EC2862F71E1D7}, // -110
        {0xF07DA27A82C37088, 0x5D767327BB4E5A4D}, // -109
        {0x964E858C91BA2655, 0x3A6A07F8D510F870}, // -108
        {0xBBE226EFB628AFEA, 0x890489F70A55368C}, // -107
        {0xEADAB0ABA3B2DBE5, 0x2B45AC74CCEA842F}, // -106
        {0x92C8AE6B464FC96F, 0x3B0B8BC90012929E}, // -105
        {0xB77ADA0617E3BBCB, 0x09CE6EBB40173745}, // -104
        {0xE55990879DDCAABD, 0xCC420A6A101D0516}, // -103
        {0x8F57FA54C2A9EAB6, 0x9FA946824A12232E}, // -102
        {0xB32DF8E9F3546564, 0x47939822DC96ABFA}, // -101
        {0xDFF9772470297EBD, 0x59787E2B93BC56F8}, // -100
        {0x8BFBEA76C619EF36, 0x57EB4EDB3C55B65B}, //  -99
        {0xAEFAE51477A06B03, 0xEDE622920B6B23F2}, //  -98
        {0xDAB99E59958885C4, 0xE95FAB368E45ECEE}, //  -97
        {0x88B402F7FD75539B, 0x11DBCB0218EBB415}, //  -96
        {0xAAE103B5FCD2A881, 0xD652BDC29F26A11A}, //  -95
        {0xD59944A37C0752A2, 0x4BE76D3346F04960}, //  -94
        {0x857FCAE62D8493A5, 0x6F70A4400C562DDC}, //  -93
        {0xA6DFBD9FB8E5B88E, 0xCB4CCD500F6BB953}, //  -92
        {0xD097AD07A71F26B2, 0x7E2000A41346A7A8}, //  -91
        {0x825ECC24C873782F, 0x8ED400668C0C28C9}, //  -90
        {0xA2F67F2DFA90563B, 0x728900802F0F32FB}, //  -89
        {0xCBB41EF979346BCA, 0x4F2B40A03AD2FFBA}, //  -88
        {0xFEA126B7D78186BC, 0xE2F610C84987BFA9}, //  -87
        {0x9F24B832E6B0F436, 0x0DD9CA7D2DF4D7CA}, //  -86
        {0xC6EDE63FA05D3143, 0x91503D1C79720DBC}, //  -85
        {0xF8A95FCF88747D94, 0x75A44C6397CE912B}, //  -84
        {0x9B69DBE1B548CE7C, 0xC986AFBE3EE11ABB}, //  -83
        {0xC24452DA229B021B, 0xFBE85BADCE996169}, //  -82
        {0xF2D56790AB41C2A2, 0xFAE27299423FB9C4}, //  -81
        {0x97C560BA6B0919A5, 0xDCCD879FC967D41B}, //  -80
        {0xBDB6B8E905CB600F, 0x5400E987BBC1C921}, //  -79
        {0xED246723473E3813, 0x290123E9AAB23B69}, //  -78
        {0x9436C0760C86E30B, 0xF9A0B6720AAF6522}, //  -77
        {0xB94470938FA89BCE, 0xF808E40E8D5B3E6A}, //  -76
        {0xE7958CB87392C2C2, 0xB60B1D1230B20E05}, //  -75
        {0x90BD77F3483BB9B9, 0xB1C6F22B5E6F48C3}, //  -74
        {0xB4ECD5F01A4AA828, 0x1E38AEB6360B1AF4}, //  -73
        {0xE2280B6C20DD5232, 0x25C6DA63C38DE1B1}, //  -72
        {0x8D590723948A535F, 0x579C487E5A38AD0F}, //  -71
        {0xB0AF48EC79ACE837, 0x2D835A9DF0C6D852}, //  -70
        {0xDCDB1B2798182244, 0xF8E431456CF88E66}, //  -69
        {0x8A08F0F8BF0F156B, 0x1B8E9ECB641B5900}, //  -68
        {0xAC8B2D36EED2DAC5, 0xE272467E3D222F40}, //  -67
        {0xD7ADF884AA879177, 0x5B0ED81DCC6ABB10}, //  -66
        {0x86CCBB52EA94BAEA, 0x98E947129FC2B4EA}, //  -65
        {0xA87FEA27A539E9A5, 0x3F2398D747B36225}, //  -64
        {0xD29FE4B18E88640E, 0x8EEC7F0D19A03AAE}, //  -63
        {0x83A3EEEEF9153E89, 0x1953CF68300424AD}, //  -62
        {0xA48CEAAAB75A8E2B, 0x5FA8C3423C052DD8}, //  -61
        {0xCDB02555653131B6, 0x3792F412CB06794E}, //  -60
        {0x808E17555F3EBF11, 0xE2BBD88BBEE40BD1}, //  -59
        {0xA0B19D2AB70E6ED6, 0x5B6ACEAEAE9D0EC5}, //  -58
        {0xC8DE047564D20A8B, 0xF245825A5A445276}, //  -57
        {0xFB158592BE068D2E, 0xEED6E2F0F0D56713}, //  -56
        {0x9CED737BB6C4183D, 0x55464DD69685606C}, //  -55
        {0xC428D05AA4751E4C, 0xAA97E14C3C26B887}, //  -54
        {0xF53304714D9265DF, 0xD53DD99F4B3066A9}, //  -53
        {0x993FE2C6D07B7FAB, 0xE546A8038EFE402A}, //  -52
        {0xBF8FDB78849A5F96, 0xDE98520472BDD034}, //  -51
        {0xEF73D256A5C0F77C, 0x963E66858F6D4441}, //  -50
        {0x95A8637627989AAD, 0xDDE7001379A44AA9}, //  -49
        {0xBB127C53B17EC159, 0x5560C018580D5D53}, //  -48
        {0xE9D71B689DDE71AF, 0xAAB8F01E6E10B4A7}, //  -47
        {0x9226712162AB070D, 0xCAB3961304CA70E9}, //  -46
        {0xB6B00D69BB55C8D1, 0x3D607B97C5FD0D23}, //  -45
        {0xE45C10C42A2B3B05, 0x8CB89A7DB77C506B}, //  -44
        {0x8EB98A7A9A5B04E3, 0x77F3608E92ADB243}, //  -43
        {0xB267ED1940F1C61C, 0x55F038B237591ED4}, //  -42
        {0xDF01E85F912E37A3, 0x6B6C46DEC52F6689}, //  -41
        {0x8B61313BBABCE2C6, 0x2323AC4B3B3DA016}, //  -40
        {0xAE397D8AA96C1B77, 0xABEC975E0A0D081B}, //  -39
        {0xD9C7DCED53C72255, 0x96E7BD358C904A22}, //  -38
        {0x881CEA14545C7575, 0x7E50D64177DA2E55}, //  -37
        {0xAA242499697392D2, 0xDDE50BD1D5D0B9EA}, //  -36
        {0xD4AD2DBFC3D07787, 0x955E4EC64B44E865}, //  -35
        {0x84EC3C97DA624AB4, 0xBD5AF13BEF0B113F}, //  -34
        {0xA6274BBDD0FADD61, 0xECB1AD8AEACDD58F}, //  -33
        {0xCFB11EAD453994BA, 0x67DE18EDA5814AF3}, //  -32
        {0x81CEB32C4B43FCF4, 0x80EACF948770CED8}, //  -31
        {0xA2425FF75E14FC31, 0xA1258379A94D028E}, //  -30
        {0xCAD2F7F5359A3B3E, 0x096EE45813A04331}, //  -29
        {0xFD87B5F28300CA0D, 0x8BCA9D6E188853FD}, //  -28
        {0x9E74D1B791E07E48, 0x775EA264CF55347E}, //  -27
        {0xC612062576589DDA, 0x95364AFE032A819E}, //  -26
        {0xF79687AED3EEC551, 0x3A83DDBD83F52205}, //  -25
        {0x9ABE14CD44753B52, 0xC4926A9672793543}, //  -24
        {0xC16D9A0095928A27, 0x75B7053C0F178294}, //  -23
        {0xF1C90080BAF72CB1, 0x5324C68B12DD6339}, //  -22
        {0x971DA05074DA7BEE, 0xD3F6FC16EBCA5E04}, //  -21
        {0xBCE5086492111AEA, 0x88F4BB1CA6BCF585}, //  -20
        {0xEC1E4A7DB69561A5, 0x2B31E9E3D06C32E6}, //  -19
        {0x9392EE8E921D5D07, 0x3AFF322E62439FD0}, //  -18
        {0xB877AA3236A4B449, 0x09BEFEB9FAD487C3}, //  -17
        {0xE69594BEC44DE15B, 0x4C2EBE687989A9B4}, //  -16
        {0x901D7CF73AB0ACD9, 0x0F9D37014BF60A11}, //  -15
        {0xB424DC35095CD80F, 0x538484C19EF38C95}, //  -14
        {0xE12E13424BB40E13, 0x2865A5F206B06FBA}, //  -13
        {0x8CBCCC096F5088CB, 0xF93F87B7442E45D4}, //  -12
        {0xAFEBFF0BCB24AAFE, 0xF78F69A51539D749}, //  -11
        {0xDBE6FECEBDEDD5BE, 0xB573440E5A884D1C}, //  -10
        {0x89705F4136B4A597, 0x31680A88F8953031}, //   -9
        {0xABCC77118461CEFC, 0xFDC20D2B36BA7C3E}, //   -8
        {0xD6BF94D5E57A42BC, 0x3D32907604691B4D}, //   -7
        {0x8637BD05AF6C69B5, 0xA63F9A49C2C1B110}, //   -6
        {0xA7C5AC471B478423, 0x0FCF80DC33721D54}, //   -5
        {0xD1B71758E219652B, 0xD3C36113404EA4A9}, //   -4
        {0x83126E978D4FDF3B, 0x645A1CAC083126EA}, //   -3
        {0xA3D70A3D70A3D70A, 0x3D70A3D70A3D70A4}, //   -2
        {0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCD}, //   -1
        {0x8000000000000000, 0x0000000000000000}, //    0
        {0xA000000000000000, 0x0000000000000000}, //    1
        {0xC800000000000000, 0x0000000000000000}, //    2
        {0xFA00000000000000, 0x0000000000000000}, //    3
        {0x9C40000000000000, 0x0000000000000000}, //    4
        {0xC350000000000000, 0x0000000000000000}, //    5
        {0xF424000000000000, 0x0000000000000000}, //    6
        {0x9896800000000000, 0x0000000000000000}, //    7
        {0xBEBC200000000000, 0x0000000000000000}, //    8
        {0xEE6B280000000000, 0x0000000000000000}, //    9
        {0x9502F90000000000, 0x0000000000000000}, //   10
        {0xBA43B74000000000, 0x0000000000000000}, //   11
        {0xE8D4A51000000000, 0x0000000000000000}, //   12
        {0x9184E72A00000000, 0x0000000000000000}, //   13
        {0xB5E620F480000000, 0x0000000000000000}, //   14
        {0xE35FA931A0000000, 0x0000000000000000}, //   15
        {0x8E1BC9BF04000000, 0x0000000000000000}, //   16
        {0xB1A2BC2EC5000000, 0x0000000000000000}, //   17
        {0xDE0B6B3A76400000, 0x0000000000000000}, //   18
        {0x8AC7230489E80000, 0x0000000000000000}, //   19
        {0xAD78EBC5AC620000, 0x0000000000000000}, //   20
        {0xD8D726B7177A8000, 0x0000000000000000}, //   21
        {0x878678326EAC9000, 0x0000000000000000}, //   22
        {0xA968163F0A57B400, 0x0000000000000000}, //   23
        {0xD3C21BCECCEDA100, 0x0000000000000000}, //   24
        {0x84595161401484A0, 0x0000000000000000}, //   25
        {0xA56FA5B99019A5C8, 0x0000000000000000}, //   26
        {0xCECB8F27F4200F3A, 0x0000000000000000}, //   27
        {0x813F3978F8940984, 0x4000000000000000}, //   28
        {0xA18F07D736B90BE5, 0x5000000000000000}, //   29
        {0xC9F2C9CD04674EDE, 0xA400000000000000}, //   30
        {0xFC6F7C4045812296, 0x4D00000000000000}, //   31
        {0x9DC5ADA82B70B59D, 0xF020000000000000}, //   32
        {0xC5371912364CE305, 0x6C28000000000000}, //   33
        {0xF684DF56C3E01BC6, 0xC732000000000000}, //   34
        {0x9A130B963A6C115C, 0x3C7F400000000000}, //   35
        {0xC097CE7BC90715B3, 0x4B9F100000000000}, //   36
        {0xF0BDC21ABB48DB20, 0x1E86D40000000000}, //   37
        {0x96769950B50D88F4, 0x1314448000000000}, //   38
        {0xBC143FA4E250EB31, 0x17D955A000000000}, //   39
        {0xEB194F8E1AE525FD, 0x5DCFAB0800000000}, //   40
        {0x92EFD1B8D0CF37BE, 0x5AA1CAE500000000}, //   41
        {0xB7ABC627050305AD, 0xF14A3D9E40000000}, //   42
        {0xE596B7B0C643C719, 0x6D9CCD05D0000000}, //   43
        {0x8F7E32CE7BEA5C6F, 0xE4820023A2000000}, //   44
        {0xB35DBF821AE4F38B, 0xDDA2802C8A800000}, //   45
        {0xE0352F62A19E306E, 0xD50B2037AD200000}, //   46
        {0x8C213D9DA502DE45, 0x4526F422CC340000}, //   47
        {0xAF298D050E4395D6, 0x9670B12B7F410000}, //   48
        {0xDAF3F04651D47B4C, 0x3C0CDD765F114000}, //   49
        {0x88D8762BF324CD0F, 0xA5880A69FB6AC800}, //   50
        {0xAB0E93B6EFEE0053, 0x8EEA0D047A457A00}, //   51
        {0xD5D238A4ABE98068, 0x72A4904598D6D880}, //   52
        {0x85A36366EB71F041, 0x47A6DA2B7F864750}, //   53
        {0xA70C3C40A64E6C51, 0x999090B65F67D924}, //   54
        {0xD0CF4B50CFE20765, 0xFFF4B4E3F741CF6D}, //   55
        {0x82818F1281ED449F, 0xBFF8F10E7A8921A5}, //   56
        {0xA321F2D7226895C7, 0xAFF72D52192B6A0E}, //   57
        {0xCBEA6F8CEB02BB39, 0x9BF4F8A69F764491}, //   58
        {0xFEE50B7025C36A08, 0x02F236D04753D5B5}, //   59
        {0x9F4F2726179A2245, 0x01D762422C946591}, //   60
        {0xC722F0EF9D80AAD6, 0x424D3AD2B7B97EF6}, //   61
        {0xF8EBAD2B84E0D58B, 0xD2E0898765A7DEB3}, //   62
        {0x9B934C3B330C8577, 0x63CC55F49F88EB30}, //   63
        {0xC2781F49FFCFA6D5, 0x3CBF6B71C76B25FC}, //   64
        {0xF316271C7FC3908A, 0x8BEF464E3945EF7B}, //   65
        {0x97EDD871CFDA3A56, 0x97758BF0E3CBB5AD}, //   66
        {0xBDE94E8E43D0C8EC, 0x3D52EEED1CBEA318}, //   67
        {0xED63A231D4C4FB27, 0x4CA7AAA863EE4BDE}, //   68
        {0x945E455F24FB1CF8, 0x8FE8CAA93E74EF6B}, //   69
        {0xB975D6B6EE39E436, 0xB3E2FD538E122B45}, //   70
        {0xE7D34C64A9C85D44, 0x60DBBCA87196B617}, //   71
        {0x90E40FBEEA1D3A4A, 0xBC8955E946FE31CE}, //   72
        {0xB51D13AEA4A488DD, 0x6BABAB6398BDBE42}, //   73
        {0xE264589A4DCDAB14, 0xC696963C7EED2DD2}, //   74
        {0x8D7EB76070A08AEC, 0xFC1E1DE5CF543CA3}, //   75
        {0xB0DE65388CC8ADA8, 0x3B25A55F43294BCC}, //   76
        {0xDD15FE86AFFAD912, 0x49EF0EB713F39EBF}, //   77
        {0x8A2DBF142DFCC7AB, 0x6E3569326C784338}, //   78
        {0xACB92ED9397BF996, 0x49C2C37F07965405}, //   79
        {0xD7E77A8F87DAF7FB, 0xDC33745EC97BE907}, //   80
        {0x86F0AC99B4E8DAFD, 0x69A028BB3DED71A4}, //   81
        {0xA8ACD7C0222311BC, 0xC40832EA0D68CE0D}, //   82
        {0xD2D80DB02AABD62B, 0xF50A3FA490C30191}, //   83
        {0x83C7088E1AAB65DB, 0x792667C6DA79E0FB}, //   84
        {0xA4B8CAB1A1563F52, 0x577001B891185939}, //   85
        {0xCDE6FD5E09ABCF26, 0xED4C0226B55E6F87}, //   86
        {0x80B05E5AC60B6178, 0x544F8158315B05B5}, //   87
        {0xA0DC75F1778E39D6, 0x696361AE3DB1C722}, //   88
        {0xC913936DD571C84C, 0x03BC3A19CD1E38EA}, //   89
        {0xFB5878494ACE3A5F, 0x04AB48A04065C724}, //   90
        {0x9D174B2DCEC0E47B, 0x62EB0D64283F9C77}, //   91
        {0xC45D1DF942711D9A, 0x3BA5D0BD324F8395}, //   92
        {0xF5746577930D6500, 0xCA8F44EC7EE3647A}, //   93
        {0x9968BF6ABBE85F20, 0x7E998B13CF4E1ECC}, //   94
        {0xBFC2EF456AE276E8, 0x9E3FEDD8C321A67F}, //   95
        {0xEFB3AB16C59B14A2, 0xC5CFE94EF3EA101F}, //   96
        {0x95D04AEE3B80ECE5, 0xBBA1F1D158724A13}, //   97
        {0xBB445DA9CA61281F, 0x2A8A6E45AE8EDC98}, //   98
        {0xEA1575143CF97226, 0xF52D09D71A3293BE}, //   99
        {0x924D692CA61BE758, 0x593C2626705F9C57}, //  100
        {0xB6E0C377CFA2E12E, 0x6F8B2FB00C77836D}, //  101
        {0xE498F455C38B997A, 0x0B6DFB9C0F956448}, //  102
        {0x8EDF98B59A373FEC, 0x4724BD4189BD5EAD}, //  103
        {0xB2977EE300C50FE7, 0x58EDEC91EC2CB658}, //  104
        {0xDF3D5E9BC0F653E1, 0x2F2967B66737E3EE}, //  105
        {0x8B865B215899F46C, 0xBD79E0D20082EE75}, //  106
        {0xAE67F1E9AEC07187, 0xECD8590680A3AA12}, //  107
        {0xDA01EE641A708DE9, 0xE80E6F4820CC9496}, //  108
        {0x884134FE908658B2, 0x3109058D147FDCDE}, //  109
        {0xAA51823E34A7EEDE, 0xBD4B46F0599FD416}, //  110
        {0xD4E5E2CDC1D1EA96, 0x6C9E18AC7007C91B}, //  111
        {0x850FADC09923329E, 0x03E2CF6BC604DDB1}, //  112
        {0xA6539930BF6BFF45, 0x84DB8346B786151D}, //  113
        {0xCFE87F7CEF46FF16, 0xE612641865679A64}, //  114
        {0x81F14FAE158C5F6E, 0x4FCB7E8F3F60C07F}, //  115
        {0xA26DA3999AEF7749, 0xE3BE5E330F38F09E}, //  116
        {0xCB090C8001AB551C, 0x5CADF5BFD3072CC6}, //  117
        {0xFDCB4FA002162A63, 0x73D9732FC7C8F7F7}, //  118
        {0x9E9F11C4014DDA7E, 0x2867E7FDDCDD9AFB}, //  119
        {0xC646D63501A1511D, 0xB281E1FD541501B9}, //  120
        {0xF7D88BC24209A565, 0x1F225A7CA91A4227}, //  121
        {0x9AE757596946075F, 0x3375788DE9B06959}, //  122
        {0xC1A12D2FC3978937, 0x0052D6B1641C83AF}, //  123
        {0xF209787BB47D6B84, 0xC0678C5DBD23A49B}, //  124
        {0x9745EB4D50CE6332, 0xF840B7BA963646E1}, //  125
        {0xBD176620A501FBFF, 0xB650E5A93BC3D899}, //  126
        {0xEC5D3FA8CE427AFF, 0xA3E51F138AB4CEBF}, //  127
        {0x93BA47C980E98CDF, 0xC66F336C36B10138}, //  128
        {0xB8A8D9BBE123F017, 0xB80B0047445D4185}, //  129
        {0xE6D3102AD96CEC1D, 0xA60DC059157491E6}, //  130
        {0x9043EA1AC7E41392, 0x87C89837AD68DB30}, //  131
        {0xB454E4A179DD1877, 0x29BABE4598C311FC}, //  132
        {0xE16A1DC9D8545E94, 0xF4296DD6FEF3D67B}, //  133
        {0x8CE2529E2734BB1D, 0x1899E4A65F58660D}, //  134
        {0xB01AE745B101E9E4, 0x5EC05DCFF72E7F90}, //  135
        {0xDC21A1171D42645D, 0x76707543F4FA1F74}, //  136
        {0x899504AE72497EBA, 0x6A06494A791C53A9}, //  137
        {0xABFA45DA0EDBDE69, 0x0487DB9D17636893}, //  138
        {0xD6F8D7509292D603, 0x45A9D2845D3C42B7}, //  139
        {0x865B86925B9BC5C2, 0x0B8A2392BA45A9B3}, //  140
        {0xA7F26836F282B732, 0x8E6CAC7768D7141F}, //  141
        {0xD1EF0244AF2364FF, 0x3207D795430CD927}, //  142
        {0x8335616AED761F1F, 0x7F44E6BD49E807B9}, //  143
        {0xA402B9C5A8D3A6E7, 0x5F16206C9C6209A7}, //  144
        {0xCD036837130890A1, 0x36DBA887C37A8C10}, //  145
        {0x802221226BE55A64, 0xC2494954DA2C978A}, //  146
        {0xA02AA96B06DEB0FD, 0xF2DB9BAA10B7BD6D}, //  147
        {0xC83553C5C8965D3D, 0x6F92829494E5ACC8}, //  148
        {0xFA42A8B73ABBF48C, 0xCB772339BA1F17FA}, //  149
        {0x9C69A97284B578D7, 0xFF2A760414536EFC}, //  150
        {0xC38413CF25E2D70D, 0xFEF5138519684ABB}, //  151
        {0xF46518C2EF5B8CD1, 0x7EB258665FC25D6A}, //  152
        {0x98BF2F79D5993802, 0xEF2F773FFBD97A62}, //  153
        {0xBEEEFB584AFF8603, 0xAAFB550FFACFD8FB}, //  154
        {0xEEAABA2E5DBF6784, 0x95BA2A53F983CF39}, //  155
        {0x952AB45CFA97A0B2, 0xDD945A747BF26184}, //  156
        {0xBA756174393D88DF, 0x94F971119AEEF9E5}, //  157
        {0xE912B9D1478CEB17, 0x7A37CD5601AAB85E}, //  158
        {0x91ABB422CCB812EE, 0xAC62E055C10AB33B}, //  159
        {0xB616A12B7FE617AA, 0x577B986B314D600A}, //  160
        {0xE39C49765FDF9D94, 0xED5A7E85FDA0B80C}, //  161
        {0x8E41ADE9FBEBC27D, 0x14588F13BE847308}, //  162
        {0xB1D219647AE6B31C, 0x596EB2D8AE258FC9}, //  163
        {0xDE469FBD99A05FE3, 0x6FCA5F8ED9AEF3BC}, //  164
        {0x8AEC23D680043BEE, 0x25DE7BB9480D5855}, //  165
        {0xADA72CCC20054AE9, 0xAF561AA79A10AE6B}, //  166
        {0xD910F7FF28069DA4, 0x1B2BA1518094DA05}, //  167
        {0x87AA9AFF79042286, 0x90FB44D2F05D0843}, //  168
        {0xA99541BF57452B28, 0x353A1607AC744A54}, //  169
        {0xD3FA922F2D1675F2, 0x42889B8997915CE9}, //  170
        {0x847C9B5D7C2E09B7, 0x69956135FEBADA12}, //  171
        {0xA59BC234DB398C25, 0x43FAB9837E699096}, //  172
        {0xCF02B2C21207EF2E, 0x94F967E45E03F4BC}, //  173
        {0x8161AFB94B44F57D, 0x1D1BE0EEBAC278F6}, //  174
        {0xA1BA1BA79E1632DC, 0x6462D92A69731733}, //  175
        {0xCA28A291859BBF93, 0x7D7B8F7503CFDCFF}, //  176
        {0xFCB2CB35E702AF78, 0x5CDA735244C3D43F}, //  177
        {0x9DEFBF01B061ADAB, 0x3A0888136AFA64A8}, //  178
        {0xC56BAEC21C7A1916, 0x088AAA1845B8FDD1}, //  179
        {0xF6C69A72A3989F5B, 0x8AAD549E57273D46}, //  180
        {0x9A3C2087A63F6399, 0x36AC54E2F678864C}, //  181
        {0xC0CB28A98FCF3C7F, 0x84576A1BB416A7DE}, //  182
        {0xF0FDF2D3F3C30B9F, 0x656D44A2A11C51D6}, //  183
        {0x969EB7C47859E743, 0x9F644AE5A4B1B326}, //  184
        {0xBC4665B596706114, 0x873D5D9F0DDE1FEF}, //  185
        {0xEB57FF22FC0C7959, 0xA90CB506D155A7EB}, //  186
        {0x9316FF75DD87CBD8, 0x09A7F12442D588F3}, //  187
        {0xB7DCBF5354E9BECE, 0x0C11ED6D538AEB30}, //  188
        {0xE5D3EF282A242E81, 0x8F1668C8A86DA5FB}, //  189
        {0x8FA475791A569D10, 0xF96E017D694487BD}, //  190
        {0xB38D92D760EC4455, 0x37C981DCC395A9AD}, //  191
        {0xE070F78D3927556A, 0x85BBE253F47B1418}, //  192
        {0x8C469AB843B89562, 0x93956D7478CCEC8F}, //  193
        {0xAF58416654A6BABB, 0x387AC8D1970027B3}, //  194
        {0xDB2E51BFE9D0696A, 0x06997B05FCC0319F}, //  195
        {0x88FCF317F22241E2, 0x441FECE3BDF81F04}, //  196
        {0xAB3C2FDDEEAAD25A, 0xD527E81CAD7626C4}, //  197
        {0xD60B3BD56A5586F1, 0x8A71E223D8D3B075}, //  198
        {0x85C7056562757456, 0xF6872D5667844E4A}, //  199
        {0xA738C6BEBB12D16C, 0xB428F8AC016561DC}, //  200
        {0xD106F86E69D785C7, 0xE13336D701BEBA53}, //  201
        {0x82A45B450226B39C, 0xECC0024661173474}, //  202
        {0xA34D721642B06084, 0x27F002D7F95D0191}, //  203
        {0xCC20CE9BD35C78A5, 0x31EC038DF7B441F5}, //  204
        {0xFF290242C83396CE, 0x7E67047175A15272}, //  205
        {0x9F79A169BD203E41, 0x0F0062C6E984D387}, //  206
        {0xC75809C42C684DD1, 0x52C07B78A3E60869}, //  207
        {0xF92E0C3537826145, 0xA7709A56CCDF8A83}, //  208
        {0x9BBCC7A142B17CCB, 0x88A66076400BB692}, //  209
        {0xC2ABF989935DDBFE, 0x6ACFF893D00EA436}, //  210
        {0xF356F7EBF83552FE, 0x0583F6B8C4124D44}, //  211
        {0x98165AF37B2153DE, 0xC3727A337A8B704B}, //  212
        {0xBE1BF1B059E9A8D6, 0x744F18C0592E4C5D}, //  213
        {0xEDA2EE1C7064130C, 0x1162DEF06F79DF74}, //  214
        {0x9485D4D1C63E8BE7, 0x8ADDCB5645AC2BA9}, //  215
        {0xB9A74A0637CE2EE1, 0x6D953E2BD7173693}, //  216
        {0xE8111C87C5C1BA99, 0xC8FA8DB6CCDD0438}, //  217
        {0x910AB1D4DB9914A0, 0x1D9C9892400A22A3}, //  218
        {0xB54D5E4A127F59C8, 0x2503BEB6D00CAB4C}, //  219
        {0xE2A0B5DC971F303A, 0x2E44AE64840FD61E}, //  220
        {0x8DA471A9DE737E24, 0x5CEAECFED289E5D3}, //  221
        {0xB10D8E1456105DAD, 0x7425A83E872C5F48}, //  222
        {0xDD50F1996B947518, 0xD12F124E28F7771A}, //  223
        {0x8A5296FFE33CC92F, 0x82BD6B70D99AAA70}, //  224
        {0xACE73CBFDC0BFB7B, 0x636CC64D1001550C}, //  225
        {0xD8210BEFD30EFA5A, 0x3C47F7E05401AA4F}, //  226
        {0x8714A775E3E95C78, 0x65ACFAEC34810A72}, //  227
        {0xA8D9D1535CE3B396, 0x7F1839A741A14D0E}, //  228
        {0xD31045A8341CA07C, 0x1EDE48111209A051}, //  229
        {0x83EA2B892091E44D, 0x934AED0AAB460433}, //  230
        {0xA4E4B66B68B65D60, 0xF81DA84D56178540}, //  231
        {0xCE1DE40642E3F4B9, 0x36251260AB9D668F}, //  232
        {0x80D2AE83E9CE78F3, 0xC1D72B7C6B42601A}, //  233
        {0xA1075A24E4421730, 0xB24CF65B8612F820}, //  234
        {0xC94930AE1D529CFC, 0xDEE033F26797B628}, //  235
        {0xFB9B7CD9A4A7443C, 0x169840EF017DA3B2}, //  236
        {0x9D412E0806E88AA5, 0x8E1F289560EE864F}, //  237
        {0xC491798A08A2AD4E, 0xF1A6F2BAB92A27E3}, //  238
        {0xF5B5D7EC8ACB58A2, 0xAE10AF696774B1DC}, //  239
        {0x9991A6F3D6BF1765, 0xACCA6DA1E0A8EF2A}, //  240
        {0xBFF610B0CC6EDD3F, 0x17FD090A58D32AF4}, //  241
        {0xEFF394DCFF8A948E, 0xDDFC4B4CEF07F5B1}, //  242
        {0x95F83D0A1FB69CD9, 0x4ABDAF101564F98F}, //  243
        {0xBB764C4CA7A4440F, 0x9D6D1AD41ABE37F2}, //  244
        {0xEA53DF5FD18D5513, 0x84C86189216DC5EE}, //  245
        {0x92746B9BE2F8552C, 0x32FD3CF5B4E49BB5}, //  246
        {0xB7118682DBB66A77, 0x3FBC8C33221DC2A2}, //  247
        {0xE4D5E82392A40515, 0x0FABAF3FEAA5334B}, //  248
        {0x8F05B1163BA6832D, 0x29CB4D87F2A7400F}, //  249
        {0xB2C71D5BCA9023F8, 0x743E20E9EF511013}, //  250
        {0xDF78E4B2BD342CF6, 0x914DA9246B255417}, //  251
        {0x8BAB8EEFB6409C1A, 0x1AD089B6C2F7548F}, //  252
        {0xAE9672ABA3D0C320, 0xA184AC2473B529B2}, //  253
        {0xDA3C0F568CC4F3E8, 0xC9E5D72D90A2741F}, //  254
        {0x8865899617FB1871, 0x7E2FA67C7A658893}, //  255
        {0xAA7EEBFB9DF9DE8D, 0xDDBB901B98FEEAB8}, //  256
        {0xD51EA6FA85785631, 0x552A74227F3EA566}, //  257
        {0x8533285C936B35DE, 0xD53A88958F872760}, //  258
        {0xA67FF273B8460356, 0x8A892ABAF368F138}, //  259
        {0xD01FEF10A657842C, 0x2D2B7569B0432D86}, //  260
        {0x8213F56A67F6B29B, 0x9C3B29620E29FC74}, //  261
        {0xA298F2C501F45F42, 0x8349F3BA91B47B90}, //  262
        {0xCB3F2F7642717713, 0x241C70A936219A74}, //  263
        {0xFE0EFB53D30DD4D7, 0xED238CD383AA0111}, //  264
        {0x9EC95D1463E8A506, 0xF4363804324A40AB}, //  265
        {0xC67BB4597CE2CE48, 0xB143C6053EDCD0D6}, //  266
        {0xF81AA16FDC1B81DA, 0xDD94B7868E94050B}, //  267
        {0x9B10A4E5E9913128, 0xCA7CF2B4191C8327}, //  268
        {0xC1D4CE1F63F57D72, 0xFD1C2F611F63A3F1}, //  269
        {0xF24A01A73CF2DCCF, 0xBC633B39673C8CED}, //  270
        {0x976E41088617CA01, 0xD5BE0503E085D814}, //  271
        {0xBD49D14AA79DBC82, 0x4B2D8644D8A74E19}, //  272
        {0xEC9C459D51852BA2, 0xDDF8E7D60ED1219F}, //  273
        {0x93E1AB8252F33B45, 0xCABB90E5C942B504}, //  274
        {0xB8DA1662E7B00A17, 0x3D6A751F3B936244}, //  275
        {0xE7109BFBA19C0C9D, 0x0CC512670A783AD5}, //  276
        {0x906A617D450187E2, 0x27FB2B80668B24C6}, //  277
        {0xB484F9DC9641E9DA, 0xB1F9F660802DEDF7}, //  278
        {0xE1A63853BBD26451, 0x5E7873F8A0396974}, //  279
        {0x8D07E33455637EB2, 0xDB0B487B6423E1E9}, //  280
        {0xB049DC016ABC5E5F, 0x91CE1A9A3D2CDA63}, //  281
        {0xDC5C5301C56B75F7, 0x7641A140CC7810FC}, //  282
        {0x89B9B3E11B6329BA, 0xA9E904C87FCB0A9E}, //  283
        {0xAC2820D9623BF429, 0x546345FA9FBDCD45}, //  284
        {0xD732290FBACAF133, 0xA97C177947AD4096}, //  285
        {0x867F59A9D4BED6C0, 0x49ED8EABCCCC485E}, //  286
        {0xA81F301449EE8C70, 0x5C68F256BFFF5A75}, //  287
        {0xD226FC195C6A2F8C, 0x73832EEC6FFF3112}, //  288
        {0x83585D8FD9C25DB7, 0xC831FD53C5FF7EAC}, //  289
        {0xA42E74F3D032F525, 0xBA3E7CA8B77F5E56}, //  290
        {0xCD3A1230C43FB26F, 0x28CE1BD2E55F35EC}, //  291
        {0x80444B5E7AA7CF85, 0x7980D163CF5B81B4}, //  292
        {0xA0555E361951C366, 0xD7E105BCC3326220}, //  293
        {0xC86AB5C39FA63440, 0x8DD9472BF3FEFAA8}, //  294
        {0xFA856334878FC150, 0xB14F98F6F0FEB952}, //  295
        {0x9C935E00D4B9D8D2, 0x6ED1BF9A569F33D4}, //  296
        {0xC3B8358109E84F07, 0x0A862F80EC4700C9}, //  297
        {0xF4A642E14C6262C8, 0xCD27BB612758C0FB}, //  298
        {0x98E7E9CCCFBD7DBD, 0x8038D51CB897789D}, //  299
        {0xBF21E44003ACDD2C, 0xE0470A63E6BD56C4}, //  300
        {0xEEEA5D5004981478, 0x1858CCFCE06CAC75}, //  301
        {0x95527A5202DF0CCB, 0x0F37801E0C43EBC9}, //  302
        {0xBAA718E68396CFFD, 0xD30560258F54E6BB}, //  303
        {0xE950DF20247C83FD, 0x47C6B82EF32A206A}, //  304
        {0x91D28B7416CDD27E, 0x4CDC331D57FA5442}, //  305
        {0xB6472E511C81471D, 0xE0133FE4ADF8E953}, //  306
        {0xE3D8F9E563A198E5, 0x58180FDDD97723A7}, //  307
        {0x8E679C2F5E44FF8F, 0x570F09EAA7EA7649}, //  308
        {0xB201833B35D63F73, 0x2CD2CC6551E513DB}, //  309
        {0xDE81E40A034BCF4F, 0xF8077F7EA65E58D2}, //  310
        {0x8B112E86420F6191, 0xFB04AFAF27FAF783}, //  311
        {0xADD57A27D29339F6, 0x79C5DB9AF1F9B564}, //  312
        {0xD94AD8B1C7380874, 0x18375281AE7822BD}, //  313
        {0x87CEC76F1C830548, 0x8F2293910D0B15B6}, //  314
        {0xA9C2794AE3A3C69A, 0xB2EB3875504DDB23}, //  315
        {0xD433179D9C8CB841, 0x5FA60692A46151EC}, //  316
        {0x849FEEC281D7F328, 0xDBC7C41BA6BCD334}, //  317
        {0xA5C7EA73224DEFF3, 0x12B9B522906C0801}, //  318
        {0xCF39E50FEAE16BEF, 0xD768226B34870A01}, //  319
        {0x81842F29F2CCE375, 0xE6A1158300D46641}, //  320
        {0xA1E53AF46F801C53, 0x60495AE3C1097FD1}, //  321
        {0xCA5E89B18B602368, 0x385BB19CB14BDFC5}, //  322
        {0xFCF62C1DEE382C42, 0x46729E03DD9ED7B6}, //  323
        {0x9E19DB92B4E31BA9, 0x6C07A2C26A8346D2}, //  324
    };
    const u64 M52 = (1ull << 52) - 1;
    const u64 M63 = (1ull << 63) - 1;
    const u64 M32 = (1ull << 32) - 1;
    const u64 E16 = 1e16;
    const u64 E15 = 1e15;
    const u64 _9E15 = 9e15;
    const double E_N309 = 1e-309;
    const u64 E_N309_U = *(u64 *)&E_N309;
    const u64 Inf_U = (0x7ffull << 52);
    const u64 Inf_E_N309_U = Inf_U - E_N309_U;
    const u64 Max_Nan = M63;

    // variable define
    M(vi_8);
    M(vi_abs_8);
    M(vi_abs_offset_8);
    u64 vi_abs_offset[All];
    // u64 vi_abs[All];
    M(sign_8);
    M(frac_8);
    M(exp_8);
    M(mantissa_8);
    __mmask8 normal_8[group_count];
    __mmask8 lower_boundary_is_closer_8[group_count];
    M(c_8);
    M(q_8);
    M(cb_8);
    M(cbl_8);
    M(cbr_8);
    M(k_8);
    M(nk_8);
    M(h_8);
    M(pow10_hi_8);
    M(pow10_lo_8);
    M(vbl_8);
    M(vb_8);
    M(vbr_8);
    M(lower_8);
    M(upper_8);
    M(s_8);
    M(tmp_high_8);
    M(tmp_low_8);
    M(sp_8);
    M(sp10_8);
    M(sp10_add10_8);
    M(sp10_mul4_8);
    M(sp10_add10_mul4_8);
    M(digit_out_8);
    M(s_mul4_8);
    __mmask8 mask_8[group_count];
    M(tmp1_8);
    M(tmp2_8);
    M(tmp3_8);
    M(e10_8);
    M(high9_8);
    M(low8_8);
    M(buf_ptr_8);
    char *buf_ptr[All];
    i64 e10[All];
    M(h1_8);
    M(D64_h1_8);
    M(D64_h_8);
    M(r1_tmp);
    M(r2_tmp);
    M(r3_tmp);
    M(r1_vbl_8);
    M(r2_vbl_8);
    M(r3_vbl_8);
    M(r1_vb_8);
    M(r2_vb_8);
    M(r3_vb_8);
    M(r1_vbr_8);
    M(r2_vbr_8);
    M(r3_vbr_8);
    M(pow10_sl_h1_r1_8);
    M(pow10_sl_h1_r2_8);
    M(pow10_sl_h1_r3_8);
    M(pow10_sl_h_r1_8);
    M(pow10_sl_h_r2_8);
    M(pow10_sl_h_r3_8);
    __mmask8 check_is_digit16_8[group_count];
    u64 high9[All];
    u64 low8[All];
    u64 tz[All];
    u64 digit_out[All];

    // ===== calc digit_out and e10; result = digit_out * 10^e10  =====

    FORI vi_8[i] = _mm512_loadu_epi64(&v[i * group]);
    FORI vi_abs_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M63));                 // vi & M63
    FORI sign_8[i] = _mm512_srli_epi64(vi_8[i], 63);                                      // vi>>63
    FORI vi_abs_offset_8[i] = _mm512_sub_epi64(vi_abs_8[i], _mm512_set1_epi64(E_N309_U)); // vi_abs - *(u64*)&(1e-309)
    FORI _mm512_storeu_epi64(&vi_abs_offset[i * group], vi_abs_offset_8[i]);
    FORI buf_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), sign_8[i]); // buf_ptr+=sign
    FORI _mm512_storeu_epi64(&buf_ptr[i * group], buf_ptr_8[i]);
    FORI frac_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M52));                                                                                   // vi & M52
    FORI exp_8[i] = _mm512_srli_epi64(vi_abs_8[i], 52);                                                                                                   // vi_abs >> 52
    FORI normal_8[i] = _mm512_cmpneq_epu64_mask(exp_8[i], _mm512_set1_epi64(0));                                                                          // exp != 0
    FORI c_8[i] = _mm512_mask_blend_epi64(normal_8[i], frac_8[i], _mm512_or_epi64(frac_8[i], _mm512_set1_epi64(1ull << 52)));                             // c = frac | (normal << 52);
    FORI q_8[i] = _mm512_mask_blend_epi64(normal_8[i], _mm512_set1_epi64(-1074), _mm512_sub_epi64(exp_8[i], _mm512_set1_epi64(1075)));                    // q = exp - 1074 - normal; // if normal exp - 1075 else -1074
    FORI lower_boundary_is_closer_8[i] = _mm512_cmpeq_epu64_mask(frac_8[i], _mm512_set1_epi64(0));                                                        // lower_boundary_is_closer = (frac == 0);
    FORI cb_8[i] = _mm512_slli_epi64(c_8[i], 2);                                                                                                          // 4 * c
    FORI cbl_8[i] = _mm512_mask_sub_epi64(_mm512_sub_epi64(cb_8[i], _mm512_set1_epi64(2)), lower_boundary_is_closer_8[i], cb_8[i], _mm512_set1_epi64(1)); // 4 * c - 2 + lower_boundary_is_closer;
    // FORI cbr_8[i] = _mm512_add_epi64(cb_8[i], _mm512_set1_epi64(2));                                                                                   // 4 * c + 2;
    FORI k_8[i] = _mm512_srai_epi64(_mm512_mask_sub_epi64(_mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          lower_boundary_is_closer_8[i],
                                                          _mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(1262611)),
                                                          _mm512_set1_epi64(524031)),
                                    22);                           // k = (q * 1262611 - (lower_boundary_is_closer ? 524031 : 0)) >> 22;
    FORI nk_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(0), k_8[i]); //-k
    FORI h_8[i] = _mm512_add_epi64(_mm512_add_epi64(q_8[i], _mm512_set1_epi64(1)),
                                   _mm512_srai_epi64(_mm512_mullo_epi64(nk_8[i],
                                                                        _mm512_set1_epi64(1741647)),
                                                     19));                                                   // h = q + FloorLog2Pow10(-k) + 1;
    FORI pow10_hi_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), &g[-kMin], sizeof(u64)); // 2 * (-k)
    const char *pow10_lo_ptr = ((char *)&g[-kMin]) + sizeof(u64);
    FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), pow10_lo_ptr, sizeof(u64)); // 2 * (-k) + 1
#if 0
    // avx512_roundOdd may not efficient, how to optimize?
    FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    FORI vb_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]));
    FORI vbr_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbr_8[i], h_8[i]));
#else
    FORI h1_8[i] = _mm512_add_epi64(h_8[i], _mm512_set1_epi64(1));       // h + 1
    FORI D64_h_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h_8[i]);   // D64_h = 64 - h;
    FORI D64_h1_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h1_8[i]); // D64_h1 = 64 - (h + 1)=63-h;
    // FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    // for(int i=0;i<group_count-1;++i)avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    // for(int i=group_count-1;i<group_count;++i)avx512_u128_mul_u64_epu64_2(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    FORI vbl_8[i] = roundOdd(r1_vbl_8[i], r2_vbl_8[i]); // r1 | ( r2 > 1 );
    // cbl
    // cb = lower_boundary_is_closer_8 ? cbl + 1 : cbl + 2
    // cbr = cb + 2

    // FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]), r1_8[i], r2_8[i], r3_8[i]);
    // FORI vb_8[i] = roundOdd(r1_8[i], r2_8[i]); // r1 | ( r2 > 1 );

    // pow10 << h
    FORI pow10_sl_h_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h_8[i]);                                                            // pow10_hi>>(64-h)
    FORI pow10_sl_h_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h_8[i])); // pow10_hi<<h | pow10_lo>>(64-h)
    FORI pow10_sl_h_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h_8[i]);                                                                // pow10_lo<<h

    // pow10 << (h+1)
    FORI pow10_sl_h1_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h1_8[i]);                                                             // pow10_hi>>(64-(h+1))
    FORI pow10_sl_h1_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h1_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h1_8[i])); // pow10_hi<<(h+1) | pow10_lo>>(64-(h+1))
    FORI pow10_sl_h1_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h1_8[i]);                                                                 // pow10_lo<<(h+1)

    // lower_boundary_is_closer ? (pow10 << h) : (pow10<<(h+1)) ;
    FORI r1_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r1_8[i], pow10_sl_h_r1_8[1]);
    FORI r2_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r2_8[i], pow10_sl_h_r2_8[1]);
    FORI r3_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r3_8[i], pow10_sl_h_r3_8[1]);
    // FORI r1_tmp[i] = pow10_sl_h1_r1_8[i];
    // FORI r2_tmp[i] = pow10_sl_h1_r2_8[i];
    // FORI r3_tmp[i] = pow10_sl_h1_r3_8[i];

    // cb = cbl + 1 or cbl + 2; u192 + u192
    FORI r3_vb_8[i] = _mm512_add_epi64(r3_vbl_8[i], r3_tmp[i]);
    FORI r2_vb_8[i] = _mm512_add_epi64(r2_vbl_8[i], r2_tmp[i]);
    // remove next line can pass the check , can be faster but is all can be right ?  how to prove ?
    // FORI r2_vb_8[i] = _mm512_mask_add_epi64(r2_vb_8[i], _mm512_cmplt_epu64_mask(r3_vb_8[i], r3_vbl_8[i]), r2_vb_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vb_8[i] = _mm512_add_epi64(r1_vbl_8[i], r1_tmp[i]);
    FORI r1_vb_8[i] = _mm512_mask_add_epi64(r1_vb_8[i], _mm512_cmplt_epu64_mask(r2_vb_8[i], r2_vbl_8[i]), r1_vb_8[i], _mm512_set1_epi64(1)); // carry
    //

    // cbr = cb + 2 ; u192 + u192
    FORI r3_vbr_8[i] = _mm512_add_epi64(r3_vb_8[i], pow10_sl_h1_r3_8[i]);
    FORI r2_vbr_8[i] = _mm512_add_epi64(r2_vb_8[i], pow10_sl_h1_r2_8[i]);
    // FORI r2_vbr_8[i] = _mm512_mask_add_epi64(r2_vbr_8[i], _mm512_cmplt_epu64_mask(r3_vbr_8[i], r3_vb_8[i]), r2_vbr_8[i], _mm512_set1_epi64(1)); // carry
    FORI r1_vbr_8[i] = _mm512_add_epi64(r1_vb_8[i], pow10_sl_h1_r1_8[i]);
    FORI r1_vbr_8[i] = _mm512_mask_add_epi64(r1_vbr_8[i], _mm512_cmplt_epu64_mask(r2_vbr_8[i], r2_vb_8[i]), r1_vbr_8[i], _mm512_set1_epi64(1)); // carry
    //
    FORI vb_8[i] = roundOdd(r1_vb_8[i], r2_vb_8[i]);    // r1 | ( r2 > 1 );
    FORI vbr_8[i] = roundOdd(r1_vbr_8[i], r2_vbr_8[i]); // r1 | ( r2 > 1 );
#endif

    FORI lower_8[i] = _mm512_add_epi64(vbl_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbl + (c & 1);
    FORI upper_8[i] = _mm512_sub_epi64(vbr_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbr - (c & 1);
    FORI s_8[i] = _mm512_srli_epi64(vb_8[i], 2);                                                  // vb / 4 == vb >> 2
    // 18446744073709551612 = ceil(2**64 / 10)  ; 2**64 > 1e17*10
    // n / 10 = (n * 1844674407370955161) >> 64
    FORI avx512_u64_mul_u64_epu64(s_8[i], _mm512_set1_epi64(1844674407370955162ull), sp_8[i], tmp_low_8[i]); // sp = s / 10;
    FORI sp10_8[i] = _mm512_mullo_epi64(sp_8[i], _mm512_set1_epi64(10));                                     // sp10 = sp * 10;
    FORI sp10_add10_8[i] = _mm512_add_epi64(sp10_8[i], _mm512_set1_epi64(10));                               // sp * 10 + 10
    FORI sp10_mul4_8[i] = _mm512_slli_epi64(sp10_8[i], 2);                                                   // sp10 * 4
    FORI sp10_add10_mul4_8[i] = _mm512_slli_epi64(sp10_add10_8[i], 2);                                       // (sp10 + 10) * 4
    // u64 digit_out = s + (((4 * s) < std::min(lower, upper - 3)) | ((0b11001000 >> (vb & 7)) & 1));//s or s + 1
    // if (lower <= sp10 * 4)digit_out = sp10;
    // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    FORI digit_out_8[i] = s_8[i];
    // FORI s_mul4_8[i] = _mm512_slli_epi64(s_8[i], 2);                                                                                           // s * 4 == vb & (-4)
    FORI s_mul4_8[i] = _mm512_and_epi64(_mm512_set1_epi64(-4), vb_8[i]);
    // FORI s_mul4_8[i] = _mm512_andnot_epi64(_mm512_set1_epi64(3),vb_8[i]);
    FORI tmp1_8[i] = _mm512_srlv_epi64(_mm512_set1_epi64(0b11001000), _mm512_and_epi64(vb_8[i], _mm512_set1_epi64(7)));                        // ((0b11001000 >> (vb & 7))
    FORI mask_8[i] = _mm512_cmplt_epi64_mask(s_mul4_8[i], _mm512_min_epi64(lower_8[i], _mm512_sub_epi64(upper_8[i], _mm512_set1_epi64(3))));   // 4*s <= min(lower,upper-3)
    FORI tmp2_8[i] = _mm512_mask_blend_epi64(mask_8[i], _mm512_set1_epi64(0), _mm512_set1_epi64(1));                                           // if( 4*s <= min(lower,upper-3) ) tmp2 = 1;
    FORI tmp3_8[i] = _mm512_or_epi64(_mm512_and_epi64(tmp1_8[i], _mm512_set1_epi64(1)), tmp2_8[i]);                                            // tmp3 = (tmp1 & 1) | tmp2  ; // tmp3 = 0 or 1
    FORI digit_out_8[i] = _mm512_add_epi64(digit_out_8[i], tmp3_8[i]);                                                                         // s or s+1
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(lower_8[i], sp10_mul4_8[i]), digit_out_8[i], sp10_8[i]);             // if (lower <= sp10 * 4)digit_out = sp10;
    FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(sp10_add10_mul4_8[i], upper_8[i]), digit_out_8[i], sp10_add10_8[i]); // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    const __m512i E15_8 = _mm512_set1_epi64(E15);
    const __m512i _9E15_8 = _mm512_set1_epi64(_9E15);                                                                                       // 1e16-1e15=9e15
    FORI check_is_digit16_8[i] = _mm512_cmplt_epu64_mask(_mm512_sub_epi64(digit_out_8[i], E15_8), _9E15_8);                                 // digit_out_8 in [1e15,1e16)
    FORI e10_8[i] = _mm512_add_epi64(k_8[i], _mm512_mask_blend_epi64(check_is_digit16_8[i], _mm512_set1_epi64(16), _mm512_set1_epi64(15))); // if(1e15 <= digit_out_8 < 1e16) k+=15; else k+=16;
    FORI digit_out_8[i] = _mm512_mask_mullo_epi64(digit_out_8[i], check_is_digit16_8[i], digit_out_8[i], _mm512_set1_epi64(10));            // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;

    //  ===== calc digit_out and e10 end; =====
    // print digit_out and  e10
    FORI _mm512_storeu_epi64(&e10[i * group], e10_8[i]);
    FORI _mm512_storeu_epi64(&digit_out[i * group], digit_out_8[i]);
    FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(digit_out_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC), // round down
                                                        _mm512_set1_pd(1e-8)));                                                              // 1e17/1e8 = 9 digit ; digit17 / digit8 = digit9
    FORI low8_8[i] = _mm512_sub_epi64(digit_out_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8)));                               // 1e17%1e8 = 8 digit
    //  print all digit 17;
    FORI FORJ buffer[i * group + j][0] = '-';
#if 1
    const u64 *exp_ptr = &exp_result3[324];
    for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)
#define FORJ2 for (int j = 0; j < 2; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);               // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);                  // high 8 bit in 32bit
        // 17 = 1 + 8 + 8
        __m512i num1[2];
        __m512i num_low16[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num1_print[8 * 2];      // "1."
        u64 num_low16_print[8 * 4]; // low16 digtit
        u64 offset[8 * 2];          // 18-tz-(tz==16)

        FORJ2 num1[j] = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + j], _mm512_set1_epi64(1441151881)), 57);   // 1441151881 = 2**57 / 1e8
        FORJ2 _mm512_storeu_epi64(&num1_print[j * 8], _mm512_or_epi64(num1[j], _mm512_set1_epi64('.' * 256 + '0')));    // num1 | ('.' * 256 + '0')
        FORJ2 num_low16[j] = _mm512_sub_epi64(high9_8[i * 2 + j], _mm512_mullo_epi64(num1[j], _mm512_set1_epi64(1e8))); // num_2_9 = high9 - num1*1e8
        FORJ2 num_low16[2 + j] = low8_8[i * 2 + j];                                                                     // num_10_17 = low8

        FORJ4 num1234_8[j] = _mm512_srli_epi64(_mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)), 48); // num1234 = num_low8 / 1e4 = num_low8 * 28147497672 >> 48
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000))); // num5678 = num_low8 - num1234*1e4
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
        // FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);//another way
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778)); // num1234 / 1e3 = num1234 * 16778 >> 24
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10)); // ((!L8) & num_tmp) * 10
            // FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_low16_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));
        // compute tail zero number , compute final buffer offset;
        FORJ4 tz_low16[j] = _mm512_srli_epi64(_mm512_lzcnt_epi64(num_final[j]), 3);                                                                           // lzcnt(final)>>3
        FORJ2 tz_8[j] = _mm512_mask_add_epi64(tz_low16[2 + j], _mm512_cmpeq_epi64_mask(tz_low16[2 + j], _mm512_set1_epi64(8)), tz_low16[2 + j], tz_low16[j]); // tz_low8 == 8 ? tz_low8+tz_2_9 : tz_low8
        FORJ2 _mm512_storeu_epi64(&tz[(i * 2 + j) * group], tz_8[j]);
        FORJ2 _mm512_storeu_epi64(&offset[j * 8], _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[j], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[j])); // 18-tz-(tz==16)

        for (int j = 0; j < group; ++j)
        {
            char *buf_ptr1 = buf_ptr[i * 2 * group + j];
            *(u64 *)(buf_ptr1) = num1_print[j];                                                                                  // write 8 byte but only low 2 byte use;
            _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_low16_print[2 * 8 + j], num_low16_print[0 * 8 + j])); // write 16byte
            *(u64 *)(buf_ptr1 + offset[j]) = exp_ptr[e10[2 * i * group + j]];                                                    // remove tail zero

            char *buf_ptr2 = buf_ptr[(i * 2 + 1) * group + j];
            *(u64 *)(buf_ptr2) = num1_print[j + 8];
            _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_low16_print[3 * 8 + j], num_low16_print[1 * 8 + j])); // write 16byte
            *(u64 *)(buf_ptr2 + offset[8 + j]) = exp_ptr[e10[(2 * i + 1) * group + j]];
        }
    }
#endif

    // adjust { Nan , Inf , 0 , <1e-309 } double value , unlikely ,
    if (1)
        FORI FORJ
        {
            // if(vi_abs[i*group+j] - E_N309_U > (0x7ffull<<52) - E_N309_U)
            // if(vi_abs[i*group + j] == 0)memcpy(buf_ptr[i*group+j],"0\0",2);
            // if (vi_abs[i*group+j] - E_N309_U >= ( ((0x7ffull << 52)) - E_N309_U) ) // unlikely
            if (vi_abs_offset[i * group + j] >= (Inf_E_N309_U))
            {
                if (vi_abs_offset[i * group + j] <= (Max_Nan - E_N309_U))
                {
                    // memcpy(buf_ptr[i * group + j], vi_abs_offset[i * group + j] == Inf_E_N309_U ? "inf\0" : "nan\0", 4);
                    *(int *)buf_ptr[i * group + j] = vi_abs_offset[i * group + j] == Inf_E_N309_U ? *(int *)"inf\0" : *(int *)"nan\0";
                }
                else
                {
                    // adjust to shortest print
                    if (vi_abs_offset[i * group + j] == (0ull - E_N309_U))
                    {
                        *(short *)buf_ptr[i * group + j] = '0';
                        continue;
                    }
                    u64 len = dec_length(digit_out[i * group + j]);
                    u64 tz_num = tz[i * group + j];
                    u64 lz_num = 17 - len; // lz_num >= 2
                    u64 signficant = 17 - tz_num - lz_num;
                    u64 start_pos = lz_num + 1;
                    if (signficant > 1ull)
                    {
                        buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        if (signficant <= 9)
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                        else
                        {
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                            *(i64 *)&buf_ptr[i * group + j][2 + 8] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1 + 8];
                        }
                        *(u64 *)&buf_ptr[i * group + j][signficant + 1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    else
                    {
                        *(short *)&buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        *(u64 *)&buf_ptr[i * group + j][1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    // printf("len = %llu lz = %llu tz = %llu signficant = %llu start_pos = %llu\n",len,lz_num,tz_num, signficant,start_pos);
                }
            }
        }
}

extern "C" void d2s_32v(double *value, char **buffer) // icx
{
    d2s_32v_impl(value, buffer);
}

void d2s_yy_32v_impl(double *v, char **buffer)
{
    // base on yy_double algorithm
    // print 32 double to 32 buffer
    // every buffer size 32 byte
    // avx512 implementation;
    // date : 2025.3.7
    using u64 = unsigned long long;
    using i64 = long long;
#define FORI for (int i = 0; i < group_count; ++i)
#define FORJ for (int j = 0; j < group; ++j)
#define M(v) __m512i v[group_count];     // 4
    const int group = 8;                 // avx512 : 512bit = 8 double
    const int group_count = 4;           // 4*8 = 32 double
    const int All = group_count * group; // 32
    // for(int i=0;i<All;i++) printf("v[%d]=%.16le\n",i,v[i]);
#define U64(hi, lo) ((((u64)hi##UL) << 32U) + lo##UL)
    static const u64 pow10_sig_table[] = {
        // length=1336
        U64(0xBF29DCAB, 0xA82FDEAE), U64(0x7432EE87, 0x3880FC33), /* ~= 10^-343 */
        U64(0xEEF453D6, 0x923BD65A), U64(0x113FAA29, 0x06A13B3F), /* ~= 10^-342 */
        U64(0x9558B466, 0x1B6565F8), U64(0x4AC7CA59, 0xA424C507), /* ~= 10^-341 */
        U64(0xBAAEE17F, 0xA23EBF76), U64(0x5D79BCF0, 0x0D2DF649), /* ~= 10^-340 */
        U64(0xE95A99DF, 0x8ACE6F53), U64(0xF4D82C2C, 0x107973DC), /* ~= 10^-339 */
        U64(0x91D8A02B, 0xB6C10594), U64(0x79071B9B, 0x8A4BE869), /* ~= 10^-338 */
        U64(0xB64EC836, 0xA47146F9), U64(0x9748E282, 0x6CDEE284), /* ~= 10^-337 */
        U64(0xE3E27A44, 0x4D8D98B7), U64(0xFD1B1B23, 0x08169B25), /* ~= 10^-336 */
        U64(0x8E6D8C6A, 0xB0787F72), U64(0xFE30F0F5, 0xE50E20F7), /* ~= 10^-335 */
        U64(0xB208EF85, 0x5C969F4F), U64(0xBDBD2D33, 0x5E51A935), /* ~= 10^-334 */
        U64(0xDE8B2B66, 0xB3BC4723), U64(0xAD2C7880, 0x35E61382), /* ~= 10^-333 */
        U64(0x8B16FB20, 0x3055AC76), U64(0x4C3BCB50, 0x21AFCC31), /* ~= 10^-332 */
        U64(0xADDCB9E8, 0x3C6B1793), U64(0xDF4ABE24, 0x2A1BBF3D), /* ~= 10^-331 */
        U64(0xD953E862, 0x4B85DD78), U64(0xD71D6DAD, 0x34A2AF0D), /* ~= 10^-330 */
        U64(0x87D4713D, 0x6F33AA6B), U64(0x8672648C, 0x40E5AD68), /* ~= 10^-329 */
        U64(0xA9C98D8C, 0xCB009506), U64(0x680EFDAF, 0x511F18C2), /* ~= 10^-328 */
        U64(0xD43BF0EF, 0xFDC0BA48), U64(0x0212BD1B, 0x2566DEF2), /* ~= 10^-327 */
        U64(0x84A57695, 0xFE98746D), U64(0x014BB630, 0xF7604B57), /* ~= 10^-326 */
        U64(0xA5CED43B, 0x7E3E9188), U64(0x419EA3BD, 0x35385E2D), /* ~= 10^-325 */
        U64(0xCF42894A, 0x5DCE35EA), U64(0x52064CAC, 0x828675B9), /* ~= 10^-324 */
        U64(0x818995CE, 0x7AA0E1B2), U64(0x7343EFEB, 0xD1940993), /* ~= 10^-323 */
        U64(0xA1EBFB42, 0x19491A1F), U64(0x1014EBE6, 0xC5F90BF8), /* ~= 10^-322 */
        U64(0xCA66FA12, 0x9F9B60A6), U64(0xD41A26E0, 0x77774EF6), /* ~= 10^-321 */
        U64(0xFD00B897, 0x478238D0), U64(0x8920B098, 0x955522B4), /* ~= 10^-320 */
        U64(0x9E20735E, 0x8CB16382), U64(0x55B46E5F, 0x5D5535B0), /* ~= 10^-319 */
        U64(0xC5A89036, 0x2FDDBC62), U64(0xEB2189F7, 0x34AA831D), /* ~= 10^-318 */
        U64(0xF712B443, 0xBBD52B7B), U64(0xA5E9EC75, 0x01D523E4), /* ~= 10^-317 */
        U64(0x9A6BB0AA, 0x55653B2D), U64(0x47B233C9, 0x2125366E), /* ~= 10^-316 */
        U64(0xC1069CD4, 0xEABE89F8), U64(0x999EC0BB, 0x696E840A), /* ~= 10^-315 */
        U64(0xF148440A, 0x256E2C76), U64(0xC00670EA, 0x43CA250D), /* ~= 10^-314 */
        U64(0x96CD2A86, 0x5764DBCA), U64(0x38040692, 0x6A5E5728), /* ~= 10^-313 */
        U64(0xBC807527, 0xED3E12BC), U64(0xC6050837, 0x04F5ECF2), /* ~= 10^-312 */
        U64(0xEBA09271, 0xE88D976B), U64(0xF7864A44, 0xC633682E), /* ~= 10^-311 */
        U64(0x93445B87, 0x31587EA3), U64(0x7AB3EE6A, 0xFBE0211D), /* ~= 10^-310 */
        U64(0xB8157268, 0xFDAE9E4C), U64(0x5960EA05, 0xBAD82964), /* ~= 10^-309 */
        U64(0xE61ACF03, 0x3D1A45DF), U64(0x6FB92487, 0x298E33BD), /* ~= 10^-308 */
        U64(0x8FD0C162, 0x06306BAB), U64(0xA5D3B6D4, 0x79F8E056), /* ~= 10^-307 */
        U64(0xB3C4F1BA, 0x87BC8696), U64(0x8F48A489, 0x9877186C), /* ~= 10^-306 */
        U64(0xE0B62E29, 0x29ABA83C), U64(0x331ACDAB, 0xFE94DE87), /* ~= 10^-305 */
        U64(0x8C71DCD9, 0xBA0B4925), U64(0x9FF0C08B, 0x7F1D0B14), /* ~= 10^-304 */
        U64(0xAF8E5410, 0x288E1B6F), U64(0x07ECF0AE, 0x5EE44DD9), /* ~= 10^-303 */
        U64(0xDB71E914, 0x32B1A24A), U64(0xC9E82CD9, 0xF69D6150), /* ~= 10^-302 */
        U64(0x892731AC, 0x9FAF056E), U64(0xBE311C08, 0x3A225CD2), /* ~= 10^-301 */
        U64(0xAB70FE17, 0xC79AC6CA), U64(0x6DBD630A, 0x48AAF406), /* ~= 10^-300 */
        U64(0xD64D3D9D, 0xB981787D), U64(0x092CBBCC, 0xDAD5B108), /* ~= 10^-299 */
        U64(0x85F04682, 0x93F0EB4E), U64(0x25BBF560, 0x08C58EA5), /* ~= 10^-298 */
        U64(0xA76C5823, 0x38ED2621), U64(0xAF2AF2B8, 0x0AF6F24E), /* ~= 10^-297 */
        U64(0xD1476E2C, 0x07286FAA), U64(0x1AF5AF66, 0x0DB4AEE1), /* ~= 10^-296 */
        U64(0x82CCA4DB, 0x847945CA), U64(0x50D98D9F, 0xC890ED4D), /* ~= 10^-295 */
        U64(0xA37FCE12, 0x6597973C), U64(0xE50FF107, 0xBAB528A0), /* ~= 10^-294 */
        U64(0xCC5FC196, 0xFEFD7D0C), U64(0x1E53ED49, 0xA96272C8), /* ~= 10^-293 */
        U64(0xFF77B1FC, 0xBEBCDC4F), U64(0x25E8E89C, 0x13BB0F7A), /* ~= 10^-292 */
        U64(0x9FAACF3D, 0xF73609B1), U64(0x77B19161, 0x8C54E9AC), /* ~= 10^-291 */
        U64(0xC795830D, 0x75038C1D), U64(0xD59DF5B9, 0xEF6A2417), /* ~= 10^-290 */
        U64(0xF97AE3D0, 0xD2446F25), U64(0x4B057328, 0x6B44AD1D), /* ~= 10^-289 */
        U64(0x9BECCE62, 0x836AC577), U64(0x4EE367F9, 0x430AEC32), /* ~= 10^-288 */
        U64(0xC2E801FB, 0x244576D5), U64(0x229C41F7, 0x93CDA73F), /* ~= 10^-287 */
        U64(0xF3A20279, 0xED56D48A), U64(0x6B435275, 0x78C1110F), /* ~= 10^-286 */
        U64(0x9845418C, 0x345644D6), U64(0x830A1389, 0x6B78AAA9), /* ~= 10^-285 */
        U64(0xBE5691EF, 0x416BD60C), U64(0x23CC986B, 0xC656D553), /* ~= 10^-284 */
        U64(0xEDEC366B, 0x11C6CB8F), U64(0x2CBFBE86, 0xB7EC8AA8), /* ~= 10^-283 */
        U64(0x94B3A202, 0xEB1C3F39), U64(0x7BF7D714, 0x32F3D6A9), /* ~= 10^-282 */
        U64(0xB9E08A83, 0xA5E34F07), U64(0xDAF5CCD9, 0x3FB0CC53), /* ~= 10^-281 */
        U64(0xE858AD24, 0x8F5C22C9), U64(0xD1B3400F, 0x8F9CFF68), /* ~= 10^-280 */
        U64(0x91376C36, 0xD99995BE), U64(0x23100809, 0xB9C21FA1), /* ~= 10^-279 */
        U64(0xB5854744, 0x8FFFFB2D), U64(0xABD40A0C, 0x2832A78A), /* ~= 10^-278 */
        U64(0xE2E69915, 0xB3FFF9F9), U64(0x16C90C8F, 0x323F516C), /* ~= 10^-277 */
        U64(0x8DD01FAD, 0x907FFC3B), U64(0xAE3DA7D9, 0x7F6792E3), /* ~= 10^-276 */
        U64(0xB1442798, 0xF49FFB4A), U64(0x99CD11CF, 0xDF41779C), /* ~= 10^-275 */
        U64(0xDD95317F, 0x31C7FA1D), U64(0x40405643, 0xD711D583), /* ~= 10^-274 */
        U64(0x8A7D3EEF, 0x7F1CFC52), U64(0x482835EA, 0x666B2572), /* ~= 10^-273 */
        U64(0xAD1C8EAB, 0x5EE43B66), U64(0xDA324365, 0x0005EECF), /* ~= 10^-272 */
        U64(0xD863B256, 0x369D4A40), U64(0x90BED43E, 0x40076A82), /* ~= 10^-271 */
        U64(0x873E4F75, 0xE2224E68), U64(0x5A7744A6, 0xE804A291), /* ~= 10^-270 */
        U64(0xA90DE353, 0x5AAAE202), U64(0x711515D0, 0xA205CB36), /* ~= 10^-269 */
        U64(0xD3515C28, 0x31559A83), U64(0x0D5A5B44, 0xCA873E03), /* ~= 10^-268 */
        U64(0x8412D999, 0x1ED58091), U64(0xE858790A, 0xFE9486C2), /* ~= 10^-267 */
        U64(0xA5178FFF, 0x668AE0B6), U64(0x626E974D, 0xBE39A872), /* ~= 10^-266 */
        U64(0xCE5D73FF, 0x402D98E3), U64(0xFB0A3D21, 0x2DC8128F), /* ~= 10^-265 */
        U64(0x80FA687F, 0x881C7F8E), U64(0x7CE66634, 0xBC9D0B99), /* ~= 10^-264 */
        U64(0xA139029F, 0x6A239F72), U64(0x1C1FFFC1, 0xEBC44E80), /* ~= 10^-263 */
        U64(0xC9874347, 0x44AC874E), U64(0xA327FFB2, 0x66B56220), /* ~= 10^-262 */
        U64(0xFBE91419, 0x15D7A922), U64(0x4BF1FF9F, 0x0062BAA8), /* ~= 10^-261 */
        U64(0x9D71AC8F, 0xADA6C9B5), U64(0x6F773FC3, 0x603DB4A9), /* ~= 10^-260 */
        U64(0xC4CE17B3, 0x99107C22), U64(0xCB550FB4, 0x384D21D3), /* ~= 10^-259 */
        U64(0xF6019DA0, 0x7F549B2B), U64(0x7E2A53A1, 0x46606A48), /* ~= 10^-258 */
        U64(0x99C10284, 0x4F94E0FB), U64(0x2EDA7444, 0xCBFC426D), /* ~= 10^-257 */
        U64(0xC0314325, 0x637A1939), U64(0xFA911155, 0xFEFB5308), /* ~= 10^-256 */
        U64(0xF03D93EE, 0xBC589F88), U64(0x793555AB, 0x7EBA27CA), /* ~= 10^-255 */
        U64(0x96267C75, 0x35B763B5), U64(0x4BC1558B, 0x2F3458DE), /* ~= 10^-254 */
        U64(0xBBB01B92, 0x83253CA2), U64(0x9EB1AAED, 0xFB016F16), /* ~= 10^-253 */
        U64(0xEA9C2277, 0x23EE8BCB), U64(0x465E15A9, 0x79C1CADC), /* ~= 10^-252 */
        U64(0x92A1958A, 0x7675175F), U64(0x0BFACD89, 0xEC191EC9), /* ~= 10^-251 */
        U64(0xB749FAED, 0x14125D36), U64(0xCEF980EC, 0x671F667B), /* ~= 10^-250 */
        U64(0xE51C79A8, 0x5916F484), U64(0x82B7E127, 0x80E7401A), /* ~= 10^-249 */
        U64(0x8F31CC09, 0x37AE58D2), U64(0xD1B2ECB8, 0xB0908810), /* ~= 10^-248 */
        U64(0xB2FE3F0B, 0x8599EF07), U64(0x861FA7E6, 0xDCB4AA15), /* ~= 10^-247 */
        U64(0xDFBDCECE, 0x67006AC9), U64(0x67A791E0, 0x93E1D49A), /* ~= 10^-246 */
        U64(0x8BD6A141, 0x006042BD), U64(0xE0C8BB2C, 0x5C6D24E0), /* ~= 10^-245 */
        U64(0xAECC4991, 0x4078536D), U64(0x58FAE9F7, 0x73886E18), /* ~= 10^-244 */
        U64(0xDA7F5BF5, 0x90966848), U64(0xAF39A475, 0x506A899E), /* ~= 10^-243 */
        U64(0x888F9979, 0x7A5E012D), U64(0x6D8406C9, 0x52429603), /* ~= 10^-242 */
        U64(0xAAB37FD7, 0xD8F58178), U64(0xC8E5087B, 0xA6D33B83), /* ~= 10^-241 */
        U64(0xD5605FCD, 0xCF32E1D6), U64(0xFB1E4A9A, 0x90880A64), /* ~= 10^-240 */
        U64(0x855C3BE0, 0xA17FCD26), U64(0x5CF2EEA0, 0x9A55067F), /* ~= 10^-239 */
        U64(0xA6B34AD8, 0xC9DFC06F), U64(0xF42FAA48, 0xC0EA481E), /* ~= 10^-238 */
        U64(0xD0601D8E, 0xFC57B08B), U64(0xF13B94DA, 0xF124DA26), /* ~= 10^-237 */
        U64(0x823C1279, 0x5DB6CE57), U64(0x76C53D08, 0xD6B70858), /* ~= 10^-236 */
        U64(0xA2CB1717, 0xB52481ED), U64(0x54768C4B, 0x0C64CA6E), /* ~= 10^-235 */
        U64(0xCB7DDCDD, 0xA26DA268), U64(0xA9942F5D, 0xCF7DFD09), /* ~= 10^-234 */
        U64(0xFE5D5415, 0x0B090B02), U64(0xD3F93B35, 0x435D7C4C), /* ~= 10^-233 */
        U64(0x9EFA548D, 0x26E5A6E1), U64(0xC47BC501, 0x4A1A6DAF), /* ~= 10^-232 */
        U64(0xC6B8E9B0, 0x709F109A), U64(0x359AB641, 0x9CA1091B), /* ~= 10^-231 */
        U64(0xF867241C, 0x8CC6D4C0), U64(0xC30163D2, 0x03C94B62), /* ~= 10^-230 */
        U64(0x9B407691, 0xD7FC44F8), U64(0x79E0DE63, 0x425DCF1D), /* ~= 10^-229 */
        U64(0xC2109436, 0x4DFB5636), U64(0x985915FC, 0x12F542E4), /* ~= 10^-228 */
        U64(0xF294B943, 0xE17A2BC4), U64(0x3E6F5B7B, 0x17B2939D), /* ~= 10^-227 */
        U64(0x979CF3CA, 0x6CEC5B5A), U64(0xA705992C, 0xEECF9C42), /* ~= 10^-226 */
        U64(0xBD8430BD, 0x08277231), U64(0x50C6FF78, 0x2A838353), /* ~= 10^-225 */
        U64(0xECE53CEC, 0x4A314EBD), U64(0xA4F8BF56, 0x35246428), /* ~= 10^-224 */
        U64(0x940F4613, 0xAE5ED136), U64(0x871B7795, 0xE136BE99), /* ~= 10^-223 */
        U64(0xB9131798, 0x99F68584), U64(0x28E2557B, 0x59846E3F), /* ~= 10^-222 */
        U64(0xE757DD7E, 0xC07426E5), U64(0x331AEADA, 0x2FE589CF), /* ~= 10^-221 */
        U64(0x9096EA6F, 0x3848984F), U64(0x3FF0D2C8, 0x5DEF7621), /* ~= 10^-220 */
        U64(0xB4BCA50B, 0x065ABE63), U64(0x0FED077A, 0x756B53A9), /* ~= 10^-219 */
        U64(0xE1EBCE4D, 0xC7F16DFB), U64(0xD3E84959, 0x12C62894), /* ~= 10^-218 */
        U64(0x8D3360F0, 0x9CF6E4BD), U64(0x64712DD7, 0xABBBD95C), /* ~= 10^-217 */
        U64(0xB080392C, 0xC4349DEC), U64(0xBD8D794D, 0x96AACFB3), /* ~= 10^-216 */
        U64(0xDCA04777, 0xF541C567), U64(0xECF0D7A0, 0xFC5583A0), /* ~= 10^-215 */
        U64(0x89E42CAA, 0xF9491B60), U64(0xF41686C4, 0x9DB57244), /* ~= 10^-214 */
        U64(0xAC5D37D5, 0xB79B6239), U64(0x311C2875, 0xC522CED5), /* ~= 10^-213 */
        U64(0xD77485CB, 0x25823AC7), U64(0x7D633293, 0x366B828B), /* ~= 10^-212 */
        U64(0x86A8D39E, 0xF77164BC), U64(0xAE5DFF9C, 0x02033197), /* ~= 10^-211 */
        U64(0xA8530886, 0xB54DBDEB), U64(0xD9F57F83, 0x0283FDFC), /* ~= 10^-210 */
        U64(0xD267CAA8, 0x62A12D66), U64(0xD072DF63, 0xC324FD7B), /* ~= 10^-209 */
        U64(0x8380DEA9, 0x3DA4BC60), U64(0x4247CB9E, 0x59F71E6D), /* ~= 10^-208 */
        U64(0xA4611653, 0x8D0DEB78), U64(0x52D9BE85, 0xF074E608), /* ~= 10^-207 */
        U64(0xCD795BE8, 0x70516656), U64(0x67902E27, 0x6C921F8B), /* ~= 10^-206 */
        U64(0x806BD971, 0x4632DFF6), U64(0x00BA1CD8, 0xA3DB53B6), /* ~= 10^-205 */
        U64(0xA086CFCD, 0x97BF97F3), U64(0x80E8A40E, 0xCCD228A4), /* ~= 10^-204 */
        U64(0xC8A883C0, 0xFDAF7DF0), U64(0x6122CD12, 0x8006B2CD), /* ~= 10^-203 */
        U64(0xFAD2A4B1, 0x3D1B5D6C), U64(0x796B8057, 0x20085F81), /* ~= 10^-202 */
        U64(0x9CC3A6EE, 0xC6311A63), U64(0xCBE33036, 0x74053BB0), /* ~= 10^-201 */
        U64(0xC3F490AA, 0x77BD60FC), U64(0xBEDBFC44, 0x11068A9C), /* ~= 10^-200 */
        U64(0xF4F1B4D5, 0x15ACB93B), U64(0xEE92FB55, 0x15482D44), /* ~= 10^-199 */
        U64(0x99171105, 0x2D8BF3C5), U64(0x751BDD15, 0x2D4D1C4A), /* ~= 10^-198 */
        U64(0xBF5CD546, 0x78EEF0B6), U64(0xD262D45A, 0x78A0635D), /* ~= 10^-197 */
        U64(0xEF340A98, 0x172AACE4), U64(0x86FB8971, 0x16C87C34), /* ~= 10^-196 */
        U64(0x9580869F, 0x0E7AAC0E), U64(0xD45D35E6, 0xAE3D4DA0), /* ~= 10^-195 */
        U64(0xBAE0A846, 0xD2195712), U64(0x89748360, 0x59CCA109), /* ~= 10^-194 */
        U64(0xE998D258, 0x869FACD7), U64(0x2BD1A438, 0x703FC94B), /* ~= 10^-193 */
        U64(0x91FF8377, 0x5423CC06), U64(0x7B6306A3, 0x4627DDCF), /* ~= 10^-192 */
        U64(0xB67F6455, 0x292CBF08), U64(0x1A3BC84C, 0x17B1D542), /* ~= 10^-191 */
        U64(0xE41F3D6A, 0x7377EECA), U64(0x20CABA5F, 0x1D9E4A93), /* ~= 10^-190 */
        U64(0x8E938662, 0x882AF53E), U64(0x547EB47B, 0x7282EE9C), /* ~= 10^-189 */
        U64(0xB23867FB, 0x2A35B28D), U64(0xE99E619A, 0x4F23AA43), /* ~= 10^-188 */
        U64(0xDEC681F9, 0xF4C31F31), U64(0x6405FA00, 0xE2EC94D4), /* ~= 10^-187 */
        U64(0x8B3C113C, 0x38F9F37E), U64(0xDE83BC40, 0x8DD3DD04), /* ~= 10^-186 */
        U64(0xAE0B158B, 0x4738705E), U64(0x9624AB50, 0xB148D445), /* ~= 10^-185 */
        U64(0xD98DDAEE, 0x19068C76), U64(0x3BADD624, 0xDD9B0957), /* ~= 10^-184 */
        U64(0x87F8A8D4, 0xCFA417C9), U64(0xE54CA5D7, 0x0A80E5D6), /* ~= 10^-183 */
        U64(0xA9F6D30A, 0x038D1DBC), U64(0x5E9FCF4C, 0xCD211F4C), /* ~= 10^-182 */
        U64(0xD47487CC, 0x8470652B), U64(0x7647C320, 0x0069671F), /* ~= 10^-181 */
        U64(0x84C8D4DF, 0xD2C63F3B), U64(0x29ECD9F4, 0x0041E073), /* ~= 10^-180 */
        U64(0xA5FB0A17, 0xC777CF09), U64(0xF4681071, 0x00525890), /* ~= 10^-179 */
        U64(0xCF79CC9D, 0xB955C2CC), U64(0x7182148D, 0x4066EEB4), /* ~= 10^-178 */
        U64(0x81AC1FE2, 0x93D599BF), U64(0xC6F14CD8, 0x48405530), /* ~= 10^-177 */
        U64(0xA21727DB, 0x38CB002F), U64(0xB8ADA00E, 0x5A506A7C), /* ~= 10^-176 */
        U64(0xCA9CF1D2, 0x06FDC03B), U64(0xA6D90811, 0xF0E4851C), /* ~= 10^-175 */
        U64(0xFD442E46, 0x88BD304A), U64(0x908F4A16, 0x6D1DA663), /* ~= 10^-174 */
        U64(0x9E4A9CEC, 0x15763E2E), U64(0x9A598E4E, 0x043287FE), /* ~= 10^-173 */
        U64(0xC5DD4427, 0x1AD3CDBA), U64(0x40EFF1E1, 0x853F29FD), /* ~= 10^-172 */
        U64(0xF7549530, 0xE188C128), U64(0xD12BEE59, 0xE68EF47C), /* ~= 10^-171 */
        U64(0x9A94DD3E, 0x8CF578B9), U64(0x82BB74F8, 0x301958CE), /* ~= 10^-170 */
        U64(0xC13A148E, 0x3032D6E7), U64(0xE36A5236, 0x3C1FAF01), /* ~= 10^-169 */
        U64(0xF18899B1, 0xBC3F8CA1), U64(0xDC44E6C3, 0xCB279AC1), /* ~= 10^-168 */
        U64(0x96F5600F, 0x15A7B7E5), U64(0x29AB103A, 0x5EF8C0B9), /* ~= 10^-167 */
        U64(0xBCB2B812, 0xDB11A5DE), U64(0x7415D448, 0xF6B6F0E7), /* ~= 10^-166 */
        U64(0xEBDF6617, 0x91D60F56), U64(0x111B495B, 0x3464AD21), /* ~= 10^-165 */
        U64(0x936B9FCE, 0xBB25C995), U64(0xCAB10DD9, 0x00BEEC34), /* ~= 10^-164 */
        U64(0xB84687C2, 0x69EF3BFB), U64(0x3D5D514F, 0x40EEA742), /* ~= 10^-163 */
        U64(0xE65829B3, 0x046B0AFA), U64(0x0CB4A5A3, 0x112A5112), /* ~= 10^-162 */
        U64(0x8FF71A0F, 0xE2C2E6DC), U64(0x47F0E785, 0xEABA72AB), /* ~= 10^-161 */
        U64(0xB3F4E093, 0xDB73A093), U64(0x59ED2167, 0x65690F56), /* ~= 10^-160 */
        U64(0xE0F218B8, 0xD25088B8), U64(0x306869C1, 0x3EC3532C), /* ~= 10^-159 */
        U64(0x8C974F73, 0x83725573), U64(0x1E414218, 0xC73A13FB), /* ~= 10^-158 */
        U64(0xAFBD2350, 0x644EEACF), U64(0xE5D1929E, 0xF90898FA), /* ~= 10^-157 */
        U64(0xDBAC6C24, 0x7D62A583), U64(0xDF45F746, 0xB74ABF39), /* ~= 10^-156 */
        U64(0x894BC396, 0xCE5DA772), U64(0x6B8BBA8C, 0x328EB783), /* ~= 10^-155 */
        U64(0xAB9EB47C, 0x81F5114F), U64(0x066EA92F, 0x3F326564), /* ~= 10^-154 */
        U64(0xD686619B, 0xA27255A2), U64(0xC80A537B, 0x0EFEFEBD), /* ~= 10^-153 */
        U64(0x8613FD01, 0x45877585), U64(0xBD06742C, 0xE95F5F36), /* ~= 10^-152 */
        U64(0xA798FC41, 0x96E952E7), U64(0x2C481138, 0x23B73704), /* ~= 10^-151 */
        U64(0xD17F3B51, 0xFCA3A7A0), U64(0xF75A1586, 0x2CA504C5), /* ~= 10^-150 */
        U64(0x82EF8513, 0x3DE648C4), U64(0x9A984D73, 0xDBE722FB), /* ~= 10^-149 */
        U64(0xA3AB6658, 0x0D5FDAF5), U64(0xC13E60D0, 0xD2E0EBBA), /* ~= 10^-148 */
        U64(0xCC963FEE, 0x10B7D1B3), U64(0x318DF905, 0x079926A8), /* ~= 10^-147 */
        U64(0xFFBBCFE9, 0x94E5C61F), U64(0xFDF17746, 0x497F7052), /* ~= 10^-146 */
        U64(0x9FD561F1, 0xFD0F9BD3), U64(0xFEB6EA8B, 0xEDEFA633), /* ~= 10^-145 */
        U64(0xC7CABA6E, 0x7C5382C8), U64(0xFE64A52E, 0xE96B8FC0), /* ~= 10^-144 */
        U64(0xF9BD690A, 0x1B68637B), U64(0x3DFDCE7A, 0xA3C673B0), /* ~= 10^-143 */
        U64(0x9C1661A6, 0x51213E2D), U64(0x06BEA10C, 0xA65C084E), /* ~= 10^-142 */
        U64(0xC31BFA0F, 0xE5698DB8), U64(0x486E494F, 0xCFF30A62), /* ~= 10^-141 */
        U64(0xF3E2F893, 0xDEC3F126), U64(0x5A89DBA3, 0xC3EFCCFA), /* ~= 10^-140 */
        U64(0x986DDB5C, 0x6B3A76B7), U64(0xF8962946, 0x5A75E01C), /* ~= 10^-139 */
        U64(0xBE895233, 0x86091465), U64(0xF6BBB397, 0xF1135823), /* ~= 10^-138 */
        U64(0xEE2BA6C0, 0x678B597F), U64(0x746AA07D, 0xED582E2C), /* ~= 10^-137 */
        U64(0x94DB4838, 0x40B717EF), U64(0xA8C2A44E, 0xB4571CDC), /* ~= 10^-136 */
        U64(0xBA121A46, 0x50E4DDEB), U64(0x92F34D62, 0x616CE413), /* ~= 10^-135 */
        U64(0xE896A0D7, 0xE51E1566), U64(0x77B020BA, 0xF9C81D17), /* ~= 10^-134 */
        U64(0x915E2486, 0xEF32CD60), U64(0x0ACE1474, 0xDC1D122E), /* ~= 10^-133 */
        U64(0xB5B5ADA8, 0xAAFF80B8), U64(0x0D819992, 0x132456BA), /* ~= 10^-132 */
        U64(0xE3231912, 0xD5BF60E6), U64(0x10E1FFF6, 0x97ED6C69), /* ~= 10^-131 */
        U64(0x8DF5EFAB, 0xC5979C8F), U64(0xCA8D3FFA, 0x1EF463C1), /* ~= 10^-130 */
        U64(0xB1736B96, 0xB6FD83B3), U64(0xBD308FF8, 0xA6B17CB2), /* ~= 10^-129 */
        U64(0xDDD0467C, 0x64BCE4A0), U64(0xAC7CB3F6, 0xD05DDBDE), /* ~= 10^-128 */
        U64(0x8AA22C0D, 0xBEF60EE4), U64(0x6BCDF07A, 0x423AA96B), /* ~= 10^-127 */
        U64(0xAD4AB711, 0x2EB3929D), U64(0x86C16C98, 0xD2C953C6), /* ~= 10^-126 */
        U64(0xD89D64D5, 0x7A607744), U64(0xE871C7BF, 0x077BA8B7), /* ~= 10^-125 */
        U64(0x87625F05, 0x6C7C4A8B), U64(0x11471CD7, 0x64AD4972), /* ~= 10^-124 */
        U64(0xA93AF6C6, 0xC79B5D2D), U64(0xD598E40D, 0x3DD89BCF), /* ~= 10^-123 */
        U64(0xD389B478, 0x79823479), U64(0x4AFF1D10, 0x8D4EC2C3), /* ~= 10^-122 */
        U64(0x843610CB, 0x4BF160CB), U64(0xCEDF722A, 0x585139BA), /* ~= 10^-121 */
        U64(0xA54394FE, 0x1EEDB8FE), U64(0xC2974EB4, 0xEE658828), /* ~= 10^-120 */
        U64(0xCE947A3D, 0xA6A9273E), U64(0x733D2262, 0x29FEEA32), /* ~= 10^-119 */
        U64(0x811CCC66, 0x8829B887), U64(0x0806357D, 0x5A3F525F), /* ~= 10^-118 */
        U64(0xA163FF80, 0x2A3426A8), U64(0xCA07C2DC, 0xB0CF26F7), /* ~= 10^-117 */
        U64(0xC9BCFF60, 0x34C13052), U64(0xFC89B393, 0xDD02F0B5), /* ~= 10^-116 */
        U64(0xFC2C3F38, 0x41F17C67), U64(0xBBAC2078, 0xD443ACE2), /* ~= 10^-115 */
        U64(0x9D9BA783, 0x2936EDC0), U64(0xD54B944B, 0x84AA4C0D), /* ~= 10^-114 */
        U64(0xC5029163, 0xF384A931), U64(0x0A9E795E, 0x65D4DF11), /* ~= 10^-113 */
        U64(0xF64335BC, 0xF065D37D), U64(0x4D4617B5, 0xFF4A16D5), /* ~= 10^-112 */
        U64(0x99EA0196, 0x163FA42E), U64(0x504BCED1, 0xBF8E4E45), /* ~= 10^-111 */
        U64(0xC06481FB, 0x9BCF8D39), U64(0xE45EC286, 0x2F71E1D6), /* ~= 10^-110 */
        U64(0xF07DA27A, 0x82C37088), U64(0x5D767327, 0xBB4E5A4C), /* ~= 10^-109 */
        U64(0x964E858C, 0x91BA2655), U64(0x3A6A07F8, 0xD510F86F), /* ~= 10^-108 */
        U64(0xBBE226EF, 0xB628AFEA), U64(0x890489F7, 0x0A55368B), /* ~= 10^-107 */
        U64(0xEADAB0AB, 0xA3B2DBE5), U64(0x2B45AC74, 0xCCEA842E), /* ~= 10^-106 */
        U64(0x92C8AE6B, 0x464FC96F), U64(0x3B0B8BC9, 0x0012929D), /* ~= 10^-105 */
        U64(0xB77ADA06, 0x17E3BBCB), U64(0x09CE6EBB, 0x40173744), /* ~= 10^-104 */
        U64(0xE5599087, 0x9DDCAABD), U64(0xCC420A6A, 0x101D0515), /* ~= 10^-103 */
        U64(0x8F57FA54, 0xC2A9EAB6), U64(0x9FA94682, 0x4A12232D), /* ~= 10^-102 */
        U64(0xB32DF8E9, 0xF3546564), U64(0x47939822, 0xDC96ABF9), /* ~= 10^-101 */
        U64(0xDFF97724, 0x70297EBD), U64(0x59787E2B, 0x93BC56F7), /* ~= 10^-100 */
        U64(0x8BFBEA76, 0xC619EF36), U64(0x57EB4EDB, 0x3C55B65A), /* ~= 10^-99 */
        U64(0xAEFAE514, 0x77A06B03), U64(0xEDE62292, 0x0B6B23F1), /* ~= 10^-98 */
        U64(0xDAB99E59, 0x958885C4), U64(0xE95FAB36, 0x8E45ECED), /* ~= 10^-97 */
        U64(0x88B402F7, 0xFD75539B), U64(0x11DBCB02, 0x18EBB414), /* ~= 10^-96 */
        U64(0xAAE103B5, 0xFCD2A881), U64(0xD652BDC2, 0x9F26A119), /* ~= 10^-95 */
        U64(0xD59944A3, 0x7C0752A2), U64(0x4BE76D33, 0x46F0495F), /* ~= 10^-94 */
        U64(0x857FCAE6, 0x2D8493A5), U64(0x6F70A440, 0x0C562DDB), /* ~= 10^-93 */
        U64(0xA6DFBD9F, 0xB8E5B88E), U64(0xCB4CCD50, 0x0F6BB952), /* ~= 10^-92 */
        U64(0xD097AD07, 0xA71F26B2), U64(0x7E2000A4, 0x1346A7A7), /* ~= 10^-91 */
        U64(0x825ECC24, 0xC873782F), U64(0x8ED40066, 0x8C0C28C8), /* ~= 10^-90 */
        U64(0xA2F67F2D, 0xFA90563B), U64(0x72890080, 0x2F0F32FA), /* ~= 10^-89 */
        U64(0xCBB41EF9, 0x79346BCA), U64(0x4F2B40A0, 0x3AD2FFB9), /* ~= 10^-88 */
        U64(0xFEA126B7, 0xD78186BC), U64(0xE2F610C8, 0x4987BFA8), /* ~= 10^-87 */
        U64(0x9F24B832, 0xE6B0F436), U64(0x0DD9CA7D, 0x2DF4D7C9), /* ~= 10^-86 */
        U64(0xC6EDE63F, 0xA05D3143), U64(0x91503D1C, 0x79720DBB), /* ~= 10^-85 */
        U64(0xF8A95FCF, 0x88747D94), U64(0x75A44C63, 0x97CE912A), /* ~= 10^-84 */
        U64(0x9B69DBE1, 0xB548CE7C), U64(0xC986AFBE, 0x3EE11ABA), /* ~= 10^-83 */
        U64(0xC24452DA, 0x229B021B), U64(0xFBE85BAD, 0xCE996168), /* ~= 10^-82 */
        U64(0xF2D56790, 0xAB41C2A2), U64(0xFAE27299, 0x423FB9C3), /* ~= 10^-81 */
        U64(0x97C560BA, 0x6B0919A5), U64(0xDCCD879F, 0xC967D41A), /* ~= 10^-80 */
        U64(0xBDB6B8E9, 0x05CB600F), U64(0x5400E987, 0xBBC1C920), /* ~= 10^-79 */
        U64(0xED246723, 0x473E3813), U64(0x290123E9, 0xAAB23B68), /* ~= 10^-78 */
        U64(0x9436C076, 0x0C86E30B), U64(0xF9A0B672, 0x0AAF6521), /* ~= 10^-77 */
        U64(0xB9447093, 0x8FA89BCE), U64(0xF808E40E, 0x8D5B3E69), /* ~= 10^-76 */
        U64(0xE7958CB8, 0x7392C2C2), U64(0xB60B1D12, 0x30B20E04), /* ~= 10^-75 */
        U64(0x90BD77F3, 0x483BB9B9), U64(0xB1C6F22B, 0x5E6F48C2), /* ~= 10^-74 */
        U64(0xB4ECD5F0, 0x1A4AA828), U64(0x1E38AEB6, 0x360B1AF3), /* ~= 10^-73 */
        U64(0xE2280B6C, 0x20DD5232), U64(0x25C6DA63, 0xC38DE1B0), /* ~= 10^-72 */
        U64(0x8D590723, 0x948A535F), U64(0x579C487E, 0x5A38AD0E), /* ~= 10^-71 */
        U64(0xB0AF48EC, 0x79ACE837), U64(0x2D835A9D, 0xF0C6D851), /* ~= 10^-70 */
        U64(0xDCDB1B27, 0x98182244), U64(0xF8E43145, 0x6CF88E65), /* ~= 10^-69 */
        U64(0x8A08F0F8, 0xBF0F156B), U64(0x1B8E9ECB, 0x641B58FF), /* ~= 10^-68 */
        U64(0xAC8B2D36, 0xEED2DAC5), U64(0xE272467E, 0x3D222F3F), /* ~= 10^-67 */
        U64(0xD7ADF884, 0xAA879177), U64(0x5B0ED81D, 0xCC6ABB0F), /* ~= 10^-66 */
        U64(0x86CCBB52, 0xEA94BAEA), U64(0x98E94712, 0x9FC2B4E9), /* ~= 10^-65 */
        U64(0xA87FEA27, 0xA539E9A5), U64(0x3F2398D7, 0x47B36224), /* ~= 10^-64 */
        U64(0xD29FE4B1, 0x8E88640E), U64(0x8EEC7F0D, 0x19A03AAD), /* ~= 10^-63 */
        U64(0x83A3EEEE, 0xF9153E89), U64(0x1953CF68, 0x300424AC), /* ~= 10^-62 */
        U64(0xA48CEAAA, 0xB75A8E2B), U64(0x5FA8C342, 0x3C052DD7), /* ~= 10^-61 */
        U64(0xCDB02555, 0x653131B6), U64(0x3792F412, 0xCB06794D), /* ~= 10^-60 */
        U64(0x808E1755, 0x5F3EBF11), U64(0xE2BBD88B, 0xBEE40BD0), /* ~= 10^-59 */
        U64(0xA0B19D2A, 0xB70E6ED6), U64(0x5B6ACEAE, 0xAE9D0EC4), /* ~= 10^-58 */
        U64(0xC8DE0475, 0x64D20A8B), U64(0xF245825A, 0x5A445275), /* ~= 10^-57 */
        U64(0xFB158592, 0xBE068D2E), U64(0xEED6E2F0, 0xF0D56712), /* ~= 10^-56 */
        U64(0x9CED737B, 0xB6C4183D), U64(0x55464DD6, 0x9685606B), /* ~= 10^-55 */
        U64(0xC428D05A, 0xA4751E4C), U64(0xAA97E14C, 0x3C26B886), /* ~= 10^-54 */
        U64(0xF5330471, 0x4D9265DF), U64(0xD53DD99F, 0x4B3066A8), /* ~= 10^-53 */
        U64(0x993FE2C6, 0xD07B7FAB), U64(0xE546A803, 0x8EFE4029), /* ~= 10^-52 */
        U64(0xBF8FDB78, 0x849A5F96), U64(0xDE985204, 0x72BDD033), /* ~= 10^-51 */
        U64(0xEF73D256, 0xA5C0F77C), U64(0x963E6685, 0x8F6D4440), /* ~= 10^-50 */
        U64(0x95A86376, 0x27989AAD), U64(0xDDE70013, 0x79A44AA8), /* ~= 10^-49 */
        U64(0xBB127C53, 0xB17EC159), U64(0x5560C018, 0x580D5D52), /* ~= 10^-48 */
        U64(0xE9D71B68, 0x9DDE71AF), U64(0xAAB8F01E, 0x6E10B4A6), /* ~= 10^-47 */
        U64(0x92267121, 0x62AB070D), U64(0xCAB39613, 0x04CA70E8), /* ~= 10^-46 */
        U64(0xB6B00D69, 0xBB55C8D1), U64(0x3D607B97, 0xC5FD0D22), /* ~= 10^-45 */
        U64(0xE45C10C4, 0x2A2B3B05), U64(0x8CB89A7D, 0xB77C506A), /* ~= 10^-44 */
        U64(0x8EB98A7A, 0x9A5B04E3), U64(0x77F3608E, 0x92ADB242), /* ~= 10^-43 */
        U64(0xB267ED19, 0x40F1C61C), U64(0x55F038B2, 0x37591ED3), /* ~= 10^-42 */
        U64(0xDF01E85F, 0x912E37A3), U64(0x6B6C46DE, 0xC52F6688), /* ~= 10^-41 */
        U64(0x8B61313B, 0xBABCE2C6), U64(0x2323AC4B, 0x3B3DA015), /* ~= 10^-40 */
        U64(0xAE397D8A, 0xA96C1B77), U64(0xABEC975E, 0x0A0D081A), /* ~= 10^-39 */
        U64(0xD9C7DCED, 0x53C72255), U64(0x96E7BD35, 0x8C904A21), /* ~= 10^-38 */
        U64(0x881CEA14, 0x545C7575), U64(0x7E50D641, 0x77DA2E54), /* ~= 10^-37 */
        U64(0xAA242499, 0x697392D2), U64(0xDDE50BD1, 0xD5D0B9E9), /* ~= 10^-36 */
        U64(0xD4AD2DBF, 0xC3D07787), U64(0x955E4EC6, 0x4B44E864), /* ~= 10^-35 */
        U64(0x84EC3C97, 0xDA624AB4), U64(0xBD5AF13B, 0xEF0B113E), /* ~= 10^-34 */
        U64(0xA6274BBD, 0xD0FADD61), U64(0xECB1AD8A, 0xEACDD58E), /* ~= 10^-33 */
        U64(0xCFB11EAD, 0x453994BA), U64(0x67DE18ED, 0xA5814AF2), /* ~= 10^-32 */
        U64(0x81CEB32C, 0x4B43FCF4), U64(0x80EACF94, 0x8770CED7), /* ~= 10^-31 */
        U64(0xA2425FF7, 0x5E14FC31), U64(0xA1258379, 0xA94D028D), /* ~= 10^-30 */
        U64(0xCAD2F7F5, 0x359A3B3E), U64(0x096EE458, 0x13A04330), /* ~= 10^-29 */
        U64(0xFD87B5F2, 0x8300CA0D), U64(0x8BCA9D6E, 0x188853FC), /* ~= 10^-28 */
        U64(0x9E74D1B7, 0x91E07E48), U64(0x775EA264, 0xCF55347D), /* ~= 10^-27 */
        U64(0xC6120625, 0x76589DDA), U64(0x95364AFE, 0x032A819D), /* ~= 10^-26 */
        U64(0xF79687AE, 0xD3EEC551), U64(0x3A83DDBD, 0x83F52204), /* ~= 10^-25 */
        U64(0x9ABE14CD, 0x44753B52), U64(0xC4926A96, 0x72793542), /* ~= 10^-24 */
        U64(0xC16D9A00, 0x95928A27), U64(0x75B7053C, 0x0F178293), /* ~= 10^-23 */
        U64(0xF1C90080, 0xBAF72CB1), U64(0x5324C68B, 0x12DD6338), /* ~= 10^-22 */
        U64(0x971DA050, 0x74DA7BEE), U64(0xD3F6FC16, 0xEBCA5E03), /* ~= 10^-21 */
        U64(0xBCE50864, 0x92111AEA), U64(0x88F4BB1C, 0xA6BCF584), /* ~= 10^-20 */
        U64(0xEC1E4A7D, 0xB69561A5), U64(0x2B31E9E3, 0xD06C32E5), /* ~= 10^-19 */
        U64(0x9392EE8E, 0x921D5D07), U64(0x3AFF322E, 0x62439FCF), /* ~= 10^-18 */
        U64(0xB877AA32, 0x36A4B449), U64(0x09BEFEB9, 0xFAD487C2), /* ~= 10^-17 */
        U64(0xE69594BE, 0xC44DE15B), U64(0x4C2EBE68, 0x7989A9B3), /* ~= 10^-16 */
        U64(0x901D7CF7, 0x3AB0ACD9), U64(0x0F9D3701, 0x4BF60A10), /* ~= 10^-15 */
        U64(0xB424DC35, 0x095CD80F), U64(0x538484C1, 0x9EF38C94), /* ~= 10^-14 */
        U64(0xE12E1342, 0x4BB40E13), U64(0x2865A5F2, 0x06B06FB9), /* ~= 10^-13 */
        U64(0x8CBCCC09, 0x6F5088CB), U64(0xF93F87B7, 0x442E45D3), /* ~= 10^-12 */
        U64(0xAFEBFF0B, 0xCB24AAFE), U64(0xF78F69A5, 0x1539D748), /* ~= 10^-11 */
        U64(0xDBE6FECE, 0xBDEDD5BE), U64(0xB573440E, 0x5A884D1B), /* ~= 10^-10 */
        U64(0x89705F41, 0x36B4A597), U64(0x31680A88, 0xF8953030), /* ~= 10^-9 */
        U64(0xABCC7711, 0x8461CEFC), U64(0xFDC20D2B, 0x36BA7C3D), /* ~= 10^-8 */
        U64(0xD6BF94D5, 0xE57A42BC), U64(0x3D329076, 0x04691B4C), /* ~= 10^-7 */
        U64(0x8637BD05, 0xAF6C69B5), U64(0xA63F9A49, 0xC2C1B10F), /* ~= 10^-6 */
        U64(0xA7C5AC47, 0x1B478423), U64(0x0FCF80DC, 0x33721D53), /* ~= 10^-5 */
        U64(0xD1B71758, 0xE219652B), U64(0xD3C36113, 0x404EA4A8), /* ~= 10^-4 */
        U64(0x83126E97, 0x8D4FDF3B), U64(0x645A1CAC, 0x083126E9), /* ~= 10^-3 */
        U64(0xA3D70A3D, 0x70A3D70A), U64(0x3D70A3D7, 0x0A3D70A3), /* ~= 10^-2 */
        U64(0xCCCCCCCC, 0xCCCCCCCC), U64(0xCCCCCCCC, 0xCCCCCCCC), /* ~= 10^-1 */
        U64(0x80000000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^0 */
        U64(0xA0000000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^1 */
        U64(0xC8000000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^2 */
        U64(0xFA000000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^3 */
        U64(0x9C400000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^4 */
        U64(0xC3500000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^5 */
        U64(0xF4240000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^6 */
        U64(0x98968000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^7 */
        U64(0xBEBC2000, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^8 */
        U64(0xEE6B2800, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^9 */
        U64(0x9502F900, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^10 */
        U64(0xBA43B740, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^11 */
        U64(0xE8D4A510, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^12 */
        U64(0x9184E72A, 0x00000000), U64(0x00000000, 0x00000000), /* == 10^13 */
        U64(0xB5E620F4, 0x80000000), U64(0x00000000, 0x00000000), /* == 10^14 */
        U64(0xE35FA931, 0xA0000000), U64(0x00000000, 0x00000000), /* == 10^15 */
        U64(0x8E1BC9BF, 0x04000000), U64(0x00000000, 0x00000000), /* == 10^16 */
        U64(0xB1A2BC2E, 0xC5000000), U64(0x00000000, 0x00000000), /* == 10^17 */
        U64(0xDE0B6B3A, 0x76400000), U64(0x00000000, 0x00000000), /* == 10^18 */
        U64(0x8AC72304, 0x89E80000), U64(0x00000000, 0x00000000), /* == 10^19 */
        U64(0xAD78EBC5, 0xAC620000), U64(0x00000000, 0x00000000), /* == 10^20 */
        U64(0xD8D726B7, 0x177A8000), U64(0x00000000, 0x00000000), /* == 10^21 */
        U64(0x87867832, 0x6EAC9000), U64(0x00000000, 0x00000000), /* == 10^22 */
        U64(0xA968163F, 0x0A57B400), U64(0x00000000, 0x00000000), /* == 10^23 */
        U64(0xD3C21BCE, 0xCCEDA100), U64(0x00000000, 0x00000000), /* == 10^24 */
        U64(0x84595161, 0x401484A0), U64(0x00000000, 0x00000000), /* == 10^25 */
        U64(0xA56FA5B9, 0x9019A5C8), U64(0x00000000, 0x00000000), /* == 10^26 */
        U64(0xCECB8F27, 0xF4200F3A), U64(0x00000000, 0x00000000), /* == 10^27 */
        U64(0x813F3978, 0xF8940984), U64(0x40000000, 0x00000000), /* == 10^28 */
        U64(0xA18F07D7, 0x36B90BE5), U64(0x50000000, 0x00000000), /* == 10^29 */
        U64(0xC9F2C9CD, 0x04674EDE), U64(0xA4000000, 0x00000000), /* == 10^30 */
        U64(0xFC6F7C40, 0x45812296), U64(0x4D000000, 0x00000000), /* == 10^31 */
        U64(0x9DC5ADA8, 0x2B70B59D), U64(0xF0200000, 0x00000000), /* == 10^32 */
        U64(0xC5371912, 0x364CE305), U64(0x6C280000, 0x00000000), /* == 10^33 */
        U64(0xF684DF56, 0xC3E01BC6), U64(0xC7320000, 0x00000000), /* == 10^34 */
        U64(0x9A130B96, 0x3A6C115C), U64(0x3C7F4000, 0x00000000), /* == 10^35 */
        U64(0xC097CE7B, 0xC90715B3), U64(0x4B9F1000, 0x00000000), /* == 10^36 */
        U64(0xF0BDC21A, 0xBB48DB20), U64(0x1E86D400, 0x00000000), /* == 10^37 */
        U64(0x96769950, 0xB50D88F4), U64(0x13144480, 0x00000000), /* == 10^38 */
        U64(0xBC143FA4, 0xE250EB31), U64(0x17D955A0, 0x00000000), /* == 10^39 */
        U64(0xEB194F8E, 0x1AE525FD), U64(0x5DCFAB08, 0x00000000), /* == 10^40 */
        U64(0x92EFD1B8, 0xD0CF37BE), U64(0x5AA1CAE5, 0x00000000), /* == 10^41 */
        U64(0xB7ABC627, 0x050305AD), U64(0xF14A3D9E, 0x40000000), /* == 10^42 */
        U64(0xE596B7B0, 0xC643C719), U64(0x6D9CCD05, 0xD0000000), /* == 10^43 */
        U64(0x8F7E32CE, 0x7BEA5C6F), U64(0xE4820023, 0xA2000000), /* == 10^44 */
        U64(0xB35DBF82, 0x1AE4F38B), U64(0xDDA2802C, 0x8A800000), /* == 10^45 */
        U64(0xE0352F62, 0xA19E306E), U64(0xD50B2037, 0xAD200000), /* == 10^46 */
        U64(0x8C213D9D, 0xA502DE45), U64(0x4526F422, 0xCC340000), /* == 10^47 */
        U64(0xAF298D05, 0x0E4395D6), U64(0x9670B12B, 0x7F410000), /* == 10^48 */
        U64(0xDAF3F046, 0x51D47B4C), U64(0x3C0CDD76, 0x5F114000), /* == 10^49 */
        U64(0x88D8762B, 0xF324CD0F), U64(0xA5880A69, 0xFB6AC800), /* == 10^50 */
        U64(0xAB0E93B6, 0xEFEE0053), U64(0x8EEA0D04, 0x7A457A00), /* == 10^51 */
        U64(0xD5D238A4, 0xABE98068), U64(0x72A49045, 0x98D6D880), /* == 10^52 */
        U64(0x85A36366, 0xEB71F041), U64(0x47A6DA2B, 0x7F864750), /* == 10^53 */
        U64(0xA70C3C40, 0xA64E6C51), U64(0x999090B6, 0x5F67D924), /* == 10^54 */
        U64(0xD0CF4B50, 0xCFE20765), U64(0xFFF4B4E3, 0xF741CF6D), /* == 10^55 */
        U64(0x82818F12, 0x81ED449F), U64(0xBFF8F10E, 0x7A8921A4), /* ~= 10^56 */
        U64(0xA321F2D7, 0x226895C7), U64(0xAFF72D52, 0x192B6A0D), /* ~= 10^57 */
        U64(0xCBEA6F8C, 0xEB02BB39), U64(0x9BF4F8A6, 0x9F764490), /* ~= 10^58 */
        U64(0xFEE50B70, 0x25C36A08), U64(0x02F236D0, 0x4753D5B4), /* ~= 10^59 */
        U64(0x9F4F2726, 0x179A2245), U64(0x01D76242, 0x2C946590), /* ~= 10^60 */
        U64(0xC722F0EF, 0x9D80AAD6), U64(0x424D3AD2, 0xB7B97EF5), /* ~= 10^61 */
        U64(0xF8EBAD2B, 0x84E0D58B), U64(0xD2E08987, 0x65A7DEB2), /* ~= 10^62 */
        U64(0x9B934C3B, 0x330C8577), U64(0x63CC55F4, 0x9F88EB2F), /* ~= 10^63 */
        U64(0xC2781F49, 0xFFCFA6D5), U64(0x3CBF6B71, 0xC76B25FB), /* ~= 10^64 */
        U64(0xF316271C, 0x7FC3908A), U64(0x8BEF464E, 0x3945EF7A), /* ~= 10^65 */
        U64(0x97EDD871, 0xCFDA3A56), U64(0x97758BF0, 0xE3CBB5AC), /* ~= 10^66 */
        U64(0xBDE94E8E, 0x43D0C8EC), U64(0x3D52EEED, 0x1CBEA317), /* ~= 10^67 */
        U64(0xED63A231, 0xD4C4FB27), U64(0x4CA7AAA8, 0x63EE4BDD), /* ~= 10^68 */
        U64(0x945E455F, 0x24FB1CF8), U64(0x8FE8CAA9, 0x3E74EF6A), /* ~= 10^69 */
        U64(0xB975D6B6, 0xEE39E436), U64(0xB3E2FD53, 0x8E122B44), /* ~= 10^70 */
        U64(0xE7D34C64, 0xA9C85D44), U64(0x60DBBCA8, 0x7196B616), /* ~= 10^71 */
        U64(0x90E40FBE, 0xEA1D3A4A), U64(0xBC8955E9, 0x46FE31CD), /* ~= 10^72 */
        U64(0xB51D13AE, 0xA4A488DD), U64(0x6BABAB63, 0x98BDBE41), /* ~= 10^73 */
        U64(0xE264589A, 0x4DCDAB14), U64(0xC696963C, 0x7EED2DD1), /* ~= 10^74 */
        U64(0x8D7EB760, 0x70A08AEC), U64(0xFC1E1DE5, 0xCF543CA2), /* ~= 10^75 */
        U64(0xB0DE6538, 0x8CC8ADA8), U64(0x3B25A55F, 0x43294BCB), /* ~= 10^76 */
        U64(0xDD15FE86, 0xAFFAD912), U64(0x49EF0EB7, 0x13F39EBE), /* ~= 10^77 */
        U64(0x8A2DBF14, 0x2DFCC7AB), U64(0x6E356932, 0x6C784337), /* ~= 10^78 */
        U64(0xACB92ED9, 0x397BF996), U64(0x49C2C37F, 0x07965404), /* ~= 10^79 */
        U64(0xD7E77A8F, 0x87DAF7FB), U64(0xDC33745E, 0xC97BE906), /* ~= 10^80 */
        U64(0x86F0AC99, 0xB4E8DAFD), U64(0x69A028BB, 0x3DED71A3), /* ~= 10^81 */
        U64(0xA8ACD7C0, 0x222311BC), U64(0xC40832EA, 0x0D68CE0C), /* ~= 10^82 */
        U64(0xD2D80DB0, 0x2AABD62B), U64(0xF50A3FA4, 0x90C30190), /* ~= 10^83 */
        U64(0x83C7088E, 0x1AAB65DB), U64(0x792667C6, 0xDA79E0FA), /* ~= 10^84 */
        U64(0xA4B8CAB1, 0xA1563F52), U64(0x577001B8, 0x91185938), /* ~= 10^85 */
        U64(0xCDE6FD5E, 0x09ABCF26), U64(0xED4C0226, 0xB55E6F86), /* ~= 10^86 */
        U64(0x80B05E5A, 0xC60B6178), U64(0x544F8158, 0x315B05B4), /* ~= 10^87 */
        U64(0xA0DC75F1, 0x778E39D6), U64(0x696361AE, 0x3DB1C721), /* ~= 10^88 */
        U64(0xC913936D, 0xD571C84C), U64(0x03BC3A19, 0xCD1E38E9), /* ~= 10^89 */
        U64(0xFB587849, 0x4ACE3A5F), U64(0x04AB48A0, 0x4065C723), /* ~= 10^90 */
        U64(0x9D174B2D, 0xCEC0E47B), U64(0x62EB0D64, 0x283F9C76), /* ~= 10^91 */
        U64(0xC45D1DF9, 0x42711D9A), U64(0x3BA5D0BD, 0x324F8394), /* ~= 10^92 */
        U64(0xF5746577, 0x930D6500), U64(0xCA8F44EC, 0x7EE36479), /* ~= 10^93 */
        U64(0x9968BF6A, 0xBBE85F20), U64(0x7E998B13, 0xCF4E1ECB), /* ~= 10^94 */
        U64(0xBFC2EF45, 0x6AE276E8), U64(0x9E3FEDD8, 0xC321A67E), /* ~= 10^95 */
        U64(0xEFB3AB16, 0xC59B14A2), U64(0xC5CFE94E, 0xF3EA101E), /* ~= 10^96 */
        U64(0x95D04AEE, 0x3B80ECE5), U64(0xBBA1F1D1, 0x58724A12), /* ~= 10^97 */
        U64(0xBB445DA9, 0xCA61281F), U64(0x2A8A6E45, 0xAE8EDC97), /* ~= 10^98 */
        U64(0xEA157514, 0x3CF97226), U64(0xF52D09D7, 0x1A3293BD), /* ~= 10^99 */
        U64(0x924D692C, 0xA61BE758), U64(0x593C2626, 0x705F9C56), /* ~= 10^100 */
        U64(0xB6E0C377, 0xCFA2E12E), U64(0x6F8B2FB0, 0x0C77836C), /* ~= 10^101 */
        U64(0xE498F455, 0xC38B997A), U64(0x0B6DFB9C, 0x0F956447), /* ~= 10^102 */
        U64(0x8EDF98B5, 0x9A373FEC), U64(0x4724BD41, 0x89BD5EAC), /* ~= 10^103 */
        U64(0xB2977EE3, 0x00C50FE7), U64(0x58EDEC91, 0xEC2CB657), /* ~= 10^104 */
        U64(0xDF3D5E9B, 0xC0F653E1), U64(0x2F2967B6, 0x6737E3ED), /* ~= 10^105 */
        U64(0x8B865B21, 0x5899F46C), U64(0xBD79E0D2, 0x0082EE74), /* ~= 10^106 */
        U64(0xAE67F1E9, 0xAEC07187), U64(0xECD85906, 0x80A3AA11), /* ~= 10^107 */
        U64(0xDA01EE64, 0x1A708DE9), U64(0xE80E6F48, 0x20CC9495), /* ~= 10^108 */
        U64(0x884134FE, 0x908658B2), U64(0x3109058D, 0x147FDCDD), /* ~= 10^109 */
        U64(0xAA51823E, 0x34A7EEDE), U64(0xBD4B46F0, 0x599FD415), /* ~= 10^110 */
        U64(0xD4E5E2CD, 0xC1D1EA96), U64(0x6C9E18AC, 0x7007C91A), /* ~= 10^111 */
        U64(0x850FADC0, 0x9923329E), U64(0x03E2CF6B, 0xC604DDB0), /* ~= 10^112 */
        U64(0xA6539930, 0xBF6BFF45), U64(0x84DB8346, 0xB786151C), /* ~= 10^113 */
        U64(0xCFE87F7C, 0xEF46FF16), U64(0xE6126418, 0x65679A63), /* ~= 10^114 */
        U64(0x81F14FAE, 0x158C5F6E), U64(0x4FCB7E8F, 0x3F60C07E), /* ~= 10^115 */
        U64(0xA26DA399, 0x9AEF7749), U64(0xE3BE5E33, 0x0F38F09D), /* ~= 10^116 */
        U64(0xCB090C80, 0x01AB551C), U64(0x5CADF5BF, 0xD3072CC5), /* ~= 10^117 */
        U64(0xFDCB4FA0, 0x02162A63), U64(0x73D9732F, 0xC7C8F7F6), /* ~= 10^118 */
        U64(0x9E9F11C4, 0x014DDA7E), U64(0x2867E7FD, 0xDCDD9AFA), /* ~= 10^119 */
        U64(0xC646D635, 0x01A1511D), U64(0xB281E1FD, 0x541501B8), /* ~= 10^120 */
        U64(0xF7D88BC2, 0x4209A565), U64(0x1F225A7C, 0xA91A4226), /* ~= 10^121 */
        U64(0x9AE75759, 0x6946075F), U64(0x3375788D, 0xE9B06958), /* ~= 10^122 */
        U64(0xC1A12D2F, 0xC3978937), U64(0x0052D6B1, 0x641C83AE), /* ~= 10^123 */
        U64(0xF209787B, 0xB47D6B84), U64(0xC0678C5D, 0xBD23A49A), /* ~= 10^124 */
        U64(0x9745EB4D, 0x50CE6332), U64(0xF840B7BA, 0x963646E0), /* ~= 10^125 */
        U64(0xBD176620, 0xA501FBFF), U64(0xB650E5A9, 0x3BC3D898), /* ~= 10^126 */
        U64(0xEC5D3FA8, 0xCE427AFF), U64(0xA3E51F13, 0x8AB4CEBE), /* ~= 10^127 */
        U64(0x93BA47C9, 0x80E98CDF), U64(0xC66F336C, 0x36B10137), /* ~= 10^128 */
        U64(0xB8A8D9BB, 0xE123F017), U64(0xB80B0047, 0x445D4184), /* ~= 10^129 */
        U64(0xE6D3102A, 0xD96CEC1D), U64(0xA60DC059, 0x157491E5), /* ~= 10^130 */
        U64(0x9043EA1A, 0xC7E41392), U64(0x87C89837, 0xAD68DB2F), /* ~= 10^131 */
        U64(0xB454E4A1, 0x79DD1877), U64(0x29BABE45, 0x98C311FB), /* ~= 10^132 */
        U64(0xE16A1DC9, 0xD8545E94), U64(0xF4296DD6, 0xFEF3D67A), /* ~= 10^133 */
        U64(0x8CE2529E, 0x2734BB1D), U64(0x1899E4A6, 0x5F58660C), /* ~= 10^134 */
        U64(0xB01AE745, 0xB101E9E4), U64(0x5EC05DCF, 0xF72E7F8F), /* ~= 10^135 */
        U64(0xDC21A117, 0x1D42645D), U64(0x76707543, 0xF4FA1F73), /* ~= 10^136 */
        U64(0x899504AE, 0x72497EBA), U64(0x6A06494A, 0x791C53A8), /* ~= 10^137 */
        U64(0xABFA45DA, 0x0EDBDE69), U64(0x0487DB9D, 0x17636892), /* ~= 10^138 */
        U64(0xD6F8D750, 0x9292D603), U64(0x45A9D284, 0x5D3C42B6), /* ~= 10^139 */
        U64(0x865B8692, 0x5B9BC5C2), U64(0x0B8A2392, 0xBA45A9B2), /* ~= 10^140 */
        U64(0xA7F26836, 0xF282B732), U64(0x8E6CAC77, 0x68D7141E), /* ~= 10^141 */
        U64(0xD1EF0244, 0xAF2364FF), U64(0x3207D795, 0x430CD926), /* ~= 10^142 */
        U64(0x8335616A, 0xED761F1F), U64(0x7F44E6BD, 0x49E807B8), /* ~= 10^143 */
        U64(0xA402B9C5, 0xA8D3A6E7), U64(0x5F16206C, 0x9C6209A6), /* ~= 10^144 */
        U64(0xCD036837, 0x130890A1), U64(0x36DBA887, 0xC37A8C0F), /* ~= 10^145 */
        U64(0x80222122, 0x6BE55A64), U64(0xC2494954, 0xDA2C9789), /* ~= 10^146 */
        U64(0xA02AA96B, 0x06DEB0FD), U64(0xF2DB9BAA, 0x10B7BD6C), /* ~= 10^147 */
        U64(0xC83553C5, 0xC8965D3D), U64(0x6F928294, 0x94E5ACC7), /* ~= 10^148 */
        U64(0xFA42A8B7, 0x3ABBF48C), U64(0xCB772339, 0xBA1F17F9), /* ~= 10^149 */
        U64(0x9C69A972, 0x84B578D7), U64(0xFF2A7604, 0x14536EFB), /* ~= 10^150 */
        U64(0xC38413CF, 0x25E2D70D), U64(0xFEF51385, 0x19684ABA), /* ~= 10^151 */
        U64(0xF46518C2, 0xEF5B8CD1), U64(0x7EB25866, 0x5FC25D69), /* ~= 10^152 */
        U64(0x98BF2F79, 0xD5993802), U64(0xEF2F773F, 0xFBD97A61), /* ~= 10^153 */
        U64(0xBEEEFB58, 0x4AFF8603), U64(0xAAFB550F, 0xFACFD8FA), /* ~= 10^154 */
        U64(0xEEAABA2E, 0x5DBF6784), U64(0x95BA2A53, 0xF983CF38), /* ~= 10^155 */
        U64(0x952AB45C, 0xFA97A0B2), U64(0xDD945A74, 0x7BF26183), /* ~= 10^156 */
        U64(0xBA756174, 0x393D88DF), U64(0x94F97111, 0x9AEEF9E4), /* ~= 10^157 */
        U64(0xE912B9D1, 0x478CEB17), U64(0x7A37CD56, 0x01AAB85D), /* ~= 10^158 */
        U64(0x91ABB422, 0xCCB812EE), U64(0xAC62E055, 0xC10AB33A), /* ~= 10^159 */
        U64(0xB616A12B, 0x7FE617AA), U64(0x577B986B, 0x314D6009), /* ~= 10^160 */
        U64(0xE39C4976, 0x5FDF9D94), U64(0xED5A7E85, 0xFDA0B80B), /* ~= 10^161 */
        U64(0x8E41ADE9, 0xFBEBC27D), U64(0x14588F13, 0xBE847307), /* ~= 10^162 */
        U64(0xB1D21964, 0x7AE6B31C), U64(0x596EB2D8, 0xAE258FC8), /* ~= 10^163 */
        U64(0xDE469FBD, 0x99A05FE3), U64(0x6FCA5F8E, 0xD9AEF3BB), /* ~= 10^164 */
        U64(0x8AEC23D6, 0x80043BEE), U64(0x25DE7BB9, 0x480D5854), /* ~= 10^165 */
        U64(0xADA72CCC, 0x20054AE9), U64(0xAF561AA7, 0x9A10AE6A), /* ~= 10^166 */
        U64(0xD910F7FF, 0x28069DA4), U64(0x1B2BA151, 0x8094DA04), /* ~= 10^167 */
        U64(0x87AA9AFF, 0x79042286), U64(0x90FB44D2, 0xF05D0842), /* ~= 10^168 */
        U64(0xA99541BF, 0x57452B28), U64(0x353A1607, 0xAC744A53), /* ~= 10^169 */
        U64(0xD3FA922F, 0x2D1675F2), U64(0x42889B89, 0x97915CE8), /* ~= 10^170 */
        U64(0x847C9B5D, 0x7C2E09B7), U64(0x69956135, 0xFEBADA11), /* ~= 10^171 */
        U64(0xA59BC234, 0xDB398C25), U64(0x43FAB983, 0x7E699095), /* ~= 10^172 */
        U64(0xCF02B2C2, 0x1207EF2E), U64(0x94F967E4, 0x5E03F4BB), /* ~= 10^173 */
        U64(0x8161AFB9, 0x4B44F57D), U64(0x1D1BE0EE, 0xBAC278F5), /* ~= 10^174 */
        U64(0xA1BA1BA7, 0x9E1632DC), U64(0x6462D92A, 0x69731732), /* ~= 10^175 */
        U64(0xCA28A291, 0x859BBF93), U64(0x7D7B8F75, 0x03CFDCFE), /* ~= 10^176 */
        U64(0xFCB2CB35, 0xE702AF78), U64(0x5CDA7352, 0x44C3D43E), /* ~= 10^177 */
        U64(0x9DEFBF01, 0xB061ADAB), U64(0x3A088813, 0x6AFA64A7), /* ~= 10^178 */
        U64(0xC56BAEC2, 0x1C7A1916), U64(0x088AAA18, 0x45B8FDD0), /* ~= 10^179 */
        U64(0xF6C69A72, 0xA3989F5B), U64(0x8AAD549E, 0x57273D45), /* ~= 10^180 */
        U64(0x9A3C2087, 0xA63F6399), U64(0x36AC54E2, 0xF678864B), /* ~= 10^181 */
        U64(0xC0CB28A9, 0x8FCF3C7F), U64(0x84576A1B, 0xB416A7DD), /* ~= 10^182 */
        U64(0xF0FDF2D3, 0xF3C30B9F), U64(0x656D44A2, 0xA11C51D5), /* ~= 10^183 */
        U64(0x969EB7C4, 0x7859E743), U64(0x9F644AE5, 0xA4B1B325), /* ~= 10^184 */
        U64(0xBC4665B5, 0x96706114), U64(0x873D5D9F, 0x0DDE1FEE), /* ~= 10^185 */
        U64(0xEB57FF22, 0xFC0C7959), U64(0xA90CB506, 0xD155A7EA), /* ~= 10^186 */
        U64(0x9316FF75, 0xDD87CBD8), U64(0x09A7F124, 0x42D588F2), /* ~= 10^187 */
        U64(0xB7DCBF53, 0x54E9BECE), U64(0x0C11ED6D, 0x538AEB2F), /* ~= 10^188 */
        U64(0xE5D3EF28, 0x2A242E81), U64(0x8F1668C8, 0xA86DA5FA), /* ~= 10^189 */
        U64(0x8FA47579, 0x1A569D10), U64(0xF96E017D, 0x694487BC), /* ~= 10^190 */
        U64(0xB38D92D7, 0x60EC4455), U64(0x37C981DC, 0xC395A9AC), /* ~= 10^191 */
        U64(0xE070F78D, 0x3927556A), U64(0x85BBE253, 0xF47B1417), /* ~= 10^192 */
        U64(0x8C469AB8, 0x43B89562), U64(0x93956D74, 0x78CCEC8E), /* ~= 10^193 */
        U64(0xAF584166, 0x54A6BABB), U64(0x387AC8D1, 0x970027B2), /* ~= 10^194 */
        U64(0xDB2E51BF, 0xE9D0696A), U64(0x06997B05, 0xFCC0319E), /* ~= 10^195 */
        U64(0x88FCF317, 0xF22241E2), U64(0x441FECE3, 0xBDF81F03), /* ~= 10^196 */
        U64(0xAB3C2FDD, 0xEEAAD25A), U64(0xD527E81C, 0xAD7626C3), /* ~= 10^197 */
        U64(0xD60B3BD5, 0x6A5586F1), U64(0x8A71E223, 0xD8D3B074), /* ~= 10^198 */
        U64(0x85C70565, 0x62757456), U64(0xF6872D56, 0x67844E49), /* ~= 10^199 */
        U64(0xA738C6BE, 0xBB12D16C), U64(0xB428F8AC, 0x016561DB), /* ~= 10^200 */
        U64(0xD106F86E, 0x69D785C7), U64(0xE13336D7, 0x01BEBA52), /* ~= 10^201 */
        U64(0x82A45B45, 0x0226B39C), U64(0xECC00246, 0x61173473), /* ~= 10^202 */
        U64(0xA34D7216, 0x42B06084), U64(0x27F002D7, 0xF95D0190), /* ~= 10^203 */
        U64(0xCC20CE9B, 0xD35C78A5), U64(0x31EC038D, 0xF7B441F4), /* ~= 10^204 */
        U64(0xFF290242, 0xC83396CE), U64(0x7E670471, 0x75A15271), /* ~= 10^205 */
        U64(0x9F79A169, 0xBD203E41), U64(0x0F0062C6, 0xE984D386), /* ~= 10^206 */
        U64(0xC75809C4, 0x2C684DD1), U64(0x52C07B78, 0xA3E60868), /* ~= 10^207 */
        U64(0xF92E0C35, 0x37826145), U64(0xA7709A56, 0xCCDF8A82), /* ~= 10^208 */
        U64(0x9BBCC7A1, 0x42B17CCB), U64(0x88A66076, 0x400BB691), /* ~= 10^209 */
        U64(0xC2ABF989, 0x935DDBFE), U64(0x6ACFF893, 0xD00EA435), /* ~= 10^210 */
        U64(0xF356F7EB, 0xF83552FE), U64(0x0583F6B8, 0xC4124D43), /* ~= 10^211 */
        U64(0x98165AF3, 0x7B2153DE), U64(0xC3727A33, 0x7A8B704A), /* ~= 10^212 */
        U64(0xBE1BF1B0, 0x59E9A8D6), U64(0x744F18C0, 0x592E4C5C), /* ~= 10^213 */
        U64(0xEDA2EE1C, 0x7064130C), U64(0x1162DEF0, 0x6F79DF73), /* ~= 10^214 */
        U64(0x9485D4D1, 0xC63E8BE7), U64(0x8ADDCB56, 0x45AC2BA8), /* ~= 10^215 */
        U64(0xB9A74A06, 0x37CE2EE1), U64(0x6D953E2B, 0xD7173692), /* ~= 10^216 */
        U64(0xE8111C87, 0xC5C1BA99), U64(0xC8FA8DB6, 0xCCDD0437), /* ~= 10^217 */
        U64(0x910AB1D4, 0xDB9914A0), U64(0x1D9C9892, 0x400A22A2), /* ~= 10^218 */
        U64(0xB54D5E4A, 0x127F59C8), U64(0x2503BEB6, 0xD00CAB4B), /* ~= 10^219 */
        U64(0xE2A0B5DC, 0x971F303A), U64(0x2E44AE64, 0x840FD61D), /* ~= 10^220 */
        U64(0x8DA471A9, 0xDE737E24), U64(0x5CEAECFE, 0xD289E5D2), /* ~= 10^221 */
        U64(0xB10D8E14, 0x56105DAD), U64(0x7425A83E, 0x872C5F47), /* ~= 10^222 */
        U64(0xDD50F199, 0x6B947518), U64(0xD12F124E, 0x28F77719), /* ~= 10^223 */
        U64(0x8A5296FF, 0xE33CC92F), U64(0x82BD6B70, 0xD99AAA6F), /* ~= 10^224 */
        U64(0xACE73CBF, 0xDC0BFB7B), U64(0x636CC64D, 0x1001550B), /* ~= 10^225 */
        U64(0xD8210BEF, 0xD30EFA5A), U64(0x3C47F7E0, 0x5401AA4E), /* ~= 10^226 */
        U64(0x8714A775, 0xE3E95C78), U64(0x65ACFAEC, 0x34810A71), /* ~= 10^227 */
        U64(0xA8D9D153, 0x5CE3B396), U64(0x7F1839A7, 0x41A14D0D), /* ~= 10^228 */
        U64(0xD31045A8, 0x341CA07C), U64(0x1EDE4811, 0x1209A050), /* ~= 10^229 */
        U64(0x83EA2B89, 0x2091E44D), U64(0x934AED0A, 0xAB460432), /* ~= 10^230 */
        U64(0xA4E4B66B, 0x68B65D60), U64(0xF81DA84D, 0x5617853F), /* ~= 10^231 */
        U64(0xCE1DE406, 0x42E3F4B9), U64(0x36251260, 0xAB9D668E), /* ~= 10^232 */
        U64(0x80D2AE83, 0xE9CE78F3), U64(0xC1D72B7C, 0x6B426019), /* ~= 10^233 */
        U64(0xA1075A24, 0xE4421730), U64(0xB24CF65B, 0x8612F81F), /* ~= 10^234 */
        U64(0xC94930AE, 0x1D529CFC), U64(0xDEE033F2, 0x6797B627), /* ~= 10^235 */
        U64(0xFB9B7CD9, 0xA4A7443C), U64(0x169840EF, 0x017DA3B1), /* ~= 10^236 */
        U64(0x9D412E08, 0x06E88AA5), U64(0x8E1F2895, 0x60EE864E), /* ~= 10^237 */
        U64(0xC491798A, 0x08A2AD4E), U64(0xF1A6F2BA, 0xB92A27E2), /* ~= 10^238 */
        U64(0xF5B5D7EC, 0x8ACB58A2), U64(0xAE10AF69, 0x6774B1DB), /* ~= 10^239 */
        U64(0x9991A6F3, 0xD6BF1765), U64(0xACCA6DA1, 0xE0A8EF29), /* ~= 10^240 */
        U64(0xBFF610B0, 0xCC6EDD3F), U64(0x17FD090A, 0x58D32AF3), /* ~= 10^241 */
        U64(0xEFF394DC, 0xFF8A948E), U64(0xDDFC4B4C, 0xEF07F5B0), /* ~= 10^242 */
        U64(0x95F83D0A, 0x1FB69CD9), U64(0x4ABDAF10, 0x1564F98E), /* ~= 10^243 */
        U64(0xBB764C4C, 0xA7A4440F), U64(0x9D6D1AD4, 0x1ABE37F1), /* ~= 10^244 */
        U64(0xEA53DF5F, 0xD18D5513), U64(0x84C86189, 0x216DC5ED), /* ~= 10^245 */
        U64(0x92746B9B, 0xE2F8552C), U64(0x32FD3CF5, 0xB4E49BB4), /* ~= 10^246 */
        U64(0xB7118682, 0xDBB66A77), U64(0x3FBC8C33, 0x221DC2A1), /* ~= 10^247 */
        U64(0xE4D5E823, 0x92A40515), U64(0x0FABAF3F, 0xEAA5334A), /* ~= 10^248 */
        U64(0x8F05B116, 0x3BA6832D), U64(0x29CB4D87, 0xF2A7400E), /* ~= 10^249 */
        U64(0xB2C71D5B, 0xCA9023F8), U64(0x743E20E9, 0xEF511012), /* ~= 10^250 */
        U64(0xDF78E4B2, 0xBD342CF6), U64(0x914DA924, 0x6B255416), /* ~= 10^251 */
        U64(0x8BAB8EEF, 0xB6409C1A), U64(0x1AD089B6, 0xC2F7548E), /* ~= 10^252 */
        U64(0xAE9672AB, 0xA3D0C320), U64(0xA184AC24, 0x73B529B1), /* ~= 10^253 */
        U64(0xDA3C0F56, 0x8CC4F3E8), U64(0xC9E5D72D, 0x90A2741E), /* ~= 10^254 */
        U64(0x88658996, 0x17FB1871), U64(0x7E2FA67C, 0x7A658892), /* ~= 10^255 */
        U64(0xAA7EEBFB, 0x9DF9DE8D), U64(0xDDBB901B, 0x98FEEAB7), /* ~= 10^256 */
        U64(0xD51EA6FA, 0x85785631), U64(0x552A7422, 0x7F3EA565), /* ~= 10^257 */
        U64(0x8533285C, 0x936B35DE), U64(0xD53A8895, 0x8F87275F), /* ~= 10^258 */
        U64(0xA67FF273, 0xB8460356), U64(0x8A892ABA, 0xF368F137), /* ~= 10^259 */
        U64(0xD01FEF10, 0xA657842C), U64(0x2D2B7569, 0xB0432D85), /* ~= 10^260 */
        U64(0x8213F56A, 0x67F6B29B), U64(0x9C3B2962, 0x0E29FC73), /* ~= 10^261 */
        U64(0xA298F2C5, 0x01F45F42), U64(0x8349F3BA, 0x91B47B8F), /* ~= 10^262 */
        U64(0xCB3F2F76, 0x42717713), U64(0x241C70A9, 0x36219A73), /* ~= 10^263 */
        U64(0xFE0EFB53, 0xD30DD4D7), U64(0xED238CD3, 0x83AA0110), /* ~= 10^264 */
        U64(0x9EC95D14, 0x63E8A506), U64(0xF4363804, 0x324A40AA), /* ~= 10^265 */
        U64(0xC67BB459, 0x7CE2CE48), U64(0xB143C605, 0x3EDCD0D5), /* ~= 10^266 */
        U64(0xF81AA16F, 0xDC1B81DA), U64(0xDD94B786, 0x8E94050A), /* ~= 10^267 */
        U64(0x9B10A4E5, 0xE9913128), U64(0xCA7CF2B4, 0x191C8326), /* ~= 10^268 */
        U64(0xC1D4CE1F, 0x63F57D72), U64(0xFD1C2F61, 0x1F63A3F0), /* ~= 10^269 */
        U64(0xF24A01A7, 0x3CF2DCCF), U64(0xBC633B39, 0x673C8CEC), /* ~= 10^270 */
        U64(0x976E4108, 0x8617CA01), U64(0xD5BE0503, 0xE085D813), /* ~= 10^271 */
        U64(0xBD49D14A, 0xA79DBC82), U64(0x4B2D8644, 0xD8A74E18), /* ~= 10^272 */
        U64(0xEC9C459D, 0x51852BA2), U64(0xDDF8E7D6, 0x0ED1219E), /* ~= 10^273 */
        U64(0x93E1AB82, 0x52F33B45), U64(0xCABB90E5, 0xC942B503), /* ~= 10^274 */
        U64(0xB8DA1662, 0xE7B00A17), U64(0x3D6A751F, 0x3B936243), /* ~= 10^275 */
        U64(0xE7109BFB, 0xA19C0C9D), U64(0x0CC51267, 0x0A783AD4), /* ~= 10^276 */
        U64(0x906A617D, 0x450187E2), U64(0x27FB2B80, 0x668B24C5), /* ~= 10^277 */
        U64(0xB484F9DC, 0x9641E9DA), U64(0xB1F9F660, 0x802DEDF6), /* ~= 10^278 */
        U64(0xE1A63853, 0xBBD26451), U64(0x5E7873F8, 0xA0396973), /* ~= 10^279 */
        U64(0x8D07E334, 0x55637EB2), U64(0xDB0B487B, 0x6423E1E8), /* ~= 10^280 */
        U64(0xB049DC01, 0x6ABC5E5F), U64(0x91CE1A9A, 0x3D2CDA62), /* ~= 10^281 */
        U64(0xDC5C5301, 0xC56B75F7), U64(0x7641A140, 0xCC7810FB), /* ~= 10^282 */
        U64(0x89B9B3E1, 0x1B6329BA), U64(0xA9E904C8, 0x7FCB0A9D), /* ~= 10^283 */
        U64(0xAC2820D9, 0x623BF429), U64(0x546345FA, 0x9FBDCD44), /* ~= 10^284 */
        U64(0xD732290F, 0xBACAF133), U64(0xA97C1779, 0x47AD4095), /* ~= 10^285 */
        U64(0x867F59A9, 0xD4BED6C0), U64(0x49ED8EAB, 0xCCCC485D), /* ~= 10^286 */
        U64(0xA81F3014, 0x49EE8C70), U64(0x5C68F256, 0xBFFF5A74), /* ~= 10^287 */
        U64(0xD226FC19, 0x5C6A2F8C), U64(0x73832EEC, 0x6FFF3111), /* ~= 10^288 */
        U64(0x83585D8F, 0xD9C25DB7), U64(0xC831FD53, 0xC5FF7EAB), /* ~= 10^289 */
        U64(0xA42E74F3, 0xD032F525), U64(0xBA3E7CA8, 0xB77F5E55), /* ~= 10^290 */
        U64(0xCD3A1230, 0xC43FB26F), U64(0x28CE1BD2, 0xE55F35EB), /* ~= 10^291 */
        U64(0x80444B5E, 0x7AA7CF85), U64(0x7980D163, 0xCF5B81B3), /* ~= 10^292 */
        U64(0xA0555E36, 0x1951C366), U64(0xD7E105BC, 0xC332621F), /* ~= 10^293 */
        U64(0xC86AB5C3, 0x9FA63440), U64(0x8DD9472B, 0xF3FEFAA7), /* ~= 10^294 */
        U64(0xFA856334, 0x878FC150), U64(0xB14F98F6, 0xF0FEB951), /* ~= 10^295 */
        U64(0x9C935E00, 0xD4B9D8D2), U64(0x6ED1BF9A, 0x569F33D3), /* ~= 10^296 */
        U64(0xC3B83581, 0x09E84F07), U64(0x0A862F80, 0xEC4700C8), /* ~= 10^297 */
        U64(0xF4A642E1, 0x4C6262C8), U64(0xCD27BB61, 0x2758C0FA), /* ~= 10^298 */
        U64(0x98E7E9CC, 0xCFBD7DBD), U64(0x8038D51C, 0xB897789C), /* ~= 10^299 */
        U64(0xBF21E440, 0x03ACDD2C), U64(0xE0470A63, 0xE6BD56C3), /* ~= 10^300 */
        U64(0xEEEA5D50, 0x04981478), U64(0x1858CCFC, 0xE06CAC74), /* ~= 10^301 */
        U64(0x95527A52, 0x02DF0CCB), U64(0x0F37801E, 0x0C43EBC8), /* ~= 10^302 */
        U64(0xBAA718E6, 0x8396CFFD), U64(0xD3056025, 0x8F54E6BA), /* ~= 10^303 */
        U64(0xE950DF20, 0x247C83FD), U64(0x47C6B82E, 0xF32A2069), /* ~= 10^304 */
        U64(0x91D28B74, 0x16CDD27E), U64(0x4CDC331D, 0x57FA5441), /* ~= 10^305 */
        U64(0xB6472E51, 0x1C81471D), U64(0xE0133FE4, 0xADF8E952), /* ~= 10^306 */
        U64(0xE3D8F9E5, 0x63A198E5), U64(0x58180FDD, 0xD97723A6), /* ~= 10^307 */
        U64(0x8E679C2F, 0x5E44FF8F), U64(0x570F09EA, 0xA7EA7648), /* ~= 10^308 */
        U64(0xB201833B, 0x35D63F73), U64(0x2CD2CC65, 0x51E513DA), /* ~= 10^309 */
        U64(0xDE81E40A, 0x034BCF4F), U64(0xF8077F7E, 0xA65E58D1), /* ~= 10^310 */
        U64(0x8B112E86, 0x420F6191), U64(0xFB04AFAF, 0x27FAF782), /* ~= 10^311 */
        U64(0xADD57A27, 0xD29339F6), U64(0x79C5DB9A, 0xF1F9B563), /* ~= 10^312 */
        U64(0xD94AD8B1, 0xC7380874), U64(0x18375281, 0xAE7822BC), /* ~= 10^313 */
        U64(0x87CEC76F, 0x1C830548), U64(0x8F229391, 0x0D0B15B5), /* ~= 10^314 */
        U64(0xA9C2794A, 0xE3A3C69A), U64(0xB2EB3875, 0x504DDB22), /* ~= 10^315 */
        U64(0xD433179D, 0x9C8CB841), U64(0x5FA60692, 0xA46151EB), /* ~= 10^316 */
        U64(0x849FEEC2, 0x81D7F328), U64(0xDBC7C41B, 0xA6BCD333), /* ~= 10^317 */
        U64(0xA5C7EA73, 0x224DEFF3), U64(0x12B9B522, 0x906C0800), /* ~= 10^318 */
        U64(0xCF39E50F, 0xEAE16BEF), U64(0xD768226B, 0x34870A00), /* ~= 10^319 */
        U64(0x81842F29, 0xF2CCE375), U64(0xE6A11583, 0x00D46640), /* ~= 10^320 */
        U64(0xA1E53AF4, 0x6F801C53), U64(0x60495AE3, 0xC1097FD0), /* ~= 10^321 */
        U64(0xCA5E89B1, 0x8B602368), U64(0x385BB19C, 0xB14BDFC4), /* ~= 10^322 */
        U64(0xFCF62C1D, 0xEE382C42), U64(0x46729E03, 0xDD9ED7B5), /* ~= 10^323 */
        U64(0x9E19DB92, 0xB4E31BA9), U64(0x6C07A2C2, 0x6A8346D1)  /* ~= 10^324 */
    };
    const u64 M52 = (1ull << 52) - 1;
    const u64 M63 = (1ull << 63) - 1;
    const u64 M32 = (1ull << 32) - 1;
    const u64 E16 = 1e16;
    const u64 E15 = 1e15;
    const u64 _9E15 = 9e15;
    const double E_N309 = 1e-309;
    const u64 E_N309_U = *(u64 *)&E_N309;
    const u64 Inf_U = (0x7ffull << 52);
    const u64 Inf_E_N309_U = Inf_U - E_N309_U;
    const u64 Max_Nan = M63;

    // variable define
    M(vi_8);
    M(vi_abs_8);
    M(vi_abs_offset_8);
    u64 vi_abs_offset[All];
    // u64 vi_abs[All];
    M(sign_8);
    M(frac_8);
    M(exp_8);
    M(mantissa_8);
    __mmask8 normal_8[group_count];
    __mmask8 lower_boundary_is_closer_8[group_count];
    M(c_8);
    M(sig_bin_8);
    M(q_8);
    M(cb_8);
    M(cbl_8);
    M(cbr_8);
    M(k_8);
    M(nk_8);
    M(h_8);
    M(pow10_hi_8);
    M(pow10_lo_8);
    M(vbl_8);
    M(vb_8);
    M(vbr_8);
    M(lower_8);
    M(upper_8);
    M(s_8);
    M(tmp_high_8);
    M(tmp_low_8);
    M(sp_8);
    M(sp10_8);
    M(sp10_add10_8);
    M(sp10_mul4_8);
    M(sp10_add10_mul4_8);
    M(digit_out_8);
    M(s_mul4_8);
    __mmask8 mask_8[group_count];
    M(tmp1_8);
    M(tmp2_8);
    M(tmp3_8);
    M(e10_8);
    M(high9_8);
    M(low8_8);
    M(buf_ptr_8);
    char *buf_ptr[All];
    i64 e10[All];
    M(h1_8);
    M(D64_h1_8);
    M(D64_h_8);
    M(r1);
    M(r2);
    M(r3);
    M(r1_tmp);
    M(r2_tmp);
    M(r3_tmp);
    M(r1_vbl_8);
    M(r2_vbl_8);
    M(r3_vbl_8);
    M(r1_vb_8);
    M(r2_vb_8);
    M(r3_vb_8);
    M(r1_vbr_8);
    M(r2_vbr_8);
    M(r3_vbr_8);
    M(pow10_sl_h1_r1_8);
    M(pow10_sl_h1_r2_8);
    M(pow10_sl_h1_r3_8);
    M(pow10_sl_h_r1_8);
    M(pow10_sl_h_r2_8);
    M(pow10_sl_h_r3_8);
    M(sig_hi_8);
    M(sig_lo_8);
    __mmask8 check_is_digit16_8[group_count];
    u64 high9[All];
    u64 low8[All];
    u64 tz[All];
    u64 digit_out[All];

    // ===== calc digit_out and e10; result = digit_out * 10^e10  =====

    FORI vi_8[i] = _mm512_loadu_epi64(&v[i * group]);
    FORI vi_abs_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M63));                 // vi & M63
    FORI sign_8[i] = _mm512_srli_epi64(vi_8[i], 63);                                      // vi>>63
    FORI vi_abs_offset_8[i] = _mm512_sub_epi64(vi_abs_8[i], _mm512_set1_epi64(E_N309_U)); // vi_abs - *(u64*)&(1e-309)
    FORI _mm512_storeu_epi64(&vi_abs_offset[i * group], vi_abs_offset_8[i]);
    FORI buf_ptr_8[i] = _mm512_add_epi64(_mm512_loadu_epi64(&buffer[i * group]), sign_8[i]); // buf_ptr+=sign
    FORI _mm512_storeu_epi64(&buf_ptr[i * group], buf_ptr_8[i]);
    FORI frac_8[i] = _mm512_and_epi64(vi_8[i], _mm512_set1_epi64(M52));                                                                // vi & M52
    FORI exp_8[i] = _mm512_srli_epi64(vi_abs_8[i], 52);                                                                                // vi_abs >> 52
    FORI normal_8[i] = _mm512_cmpneq_epu64_mask(exp_8[i], _mm512_set1_epi64(0));                                                       // exp != 0
    FORI sig_bin_8[i] = _mm512_mask_blend_epi64(normal_8[i], frac_8[i], _mm512_or_epi64(frac_8[i], _mm512_set1_epi64(1ull << 52)));          // c = frac | (normal << 52);
    FORI q_8[i] = _mm512_mask_blend_epi64(normal_8[i], _mm512_set1_epi64(-1074), _mm512_sub_epi64(exp_8[i], _mm512_set1_epi64(1075))); // q = exp - 1074 - normal; // if normal exp - 1075 else -1074
    FORI lower_boundary_is_closer_8[i] = _mm512_cmpeq_epu64_mask(frac_8[i], _mm512_set1_epi64(0));                                     // lower_boundary_is_closer = (frac == 0);
    // FORI cb_8[i] = _mm512_slli_epi64(c_8[i], 2);                                                                                                          // 4 * c
    // FORI cbl_8[i] = _mm512_mask_sub_epi64(_mm512_sub_epi64(cb_8[i], _mm512_set1_epi64(2)), lower_boundary_is_closer_8[i], cb_8[i], _mm512_set1_epi64(1)); // 4 * c - 2 + lower_boundary_is_closer;
    //  FORI cbr_8[i] = _mm512_add_epi64(cb_8[i], _mm512_set1_epi64(2));                                                                                   // 4 * c + 2;
    FORI k_8[i] = _mm512_srai_epi64(_mm512_mask_sub_epi64(_mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(315653)),
                                                          lower_boundary_is_closer_8[i],
                                                          _mm512_mullo_epi64(q_8[i], _mm512_set1_epi64(315653)),
                                                          _mm512_set1_epi64(131237)),
                                    20);                           // k = (q * 1262611 - (lower_boundary_is_closer ? 524031 : 0)) >> 22;
    FORI nk_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(0), k_8[i]); //-k
    FORI h_8[i] = _mm512_add_epi64(_mm512_add_epi64(q_8[i], _mm512_set1_epi64(1)),
                                   _mm512_srai_epi64(_mm512_mullo_epi64(nk_8[i],
                                                                        _mm512_set1_epi64(1741647)),
                                                     19)); // h = q + FloorLog2Pow10(-k) + 1;

    //  yy_double algorithm full path ; require value not 0 , nan , inf

    //  irregular = (sig_bin == 0x10000000000000ull); // frac == 0  equal lower_boundary_is_closer_8
    //  k = (exp_bin * 315653 - (irregular ? 131237 : 0)) >> 20;
    //  h = exp_bin + ((k * -217707) >> 16) + 1;
    //  pow10_table_get_sig(-k, &p10_hi, &p10_lo);
    //  cb = sig_bin << (h);//[1,4]
    //  u128_mul(cb, p10_lo, &sig_hi, &sig_lo);//u64*u64
    //  u128_mul_add(cb, p10_hi, sig_hi, &sig_hi, &sig_lo);//u64*u64+u64
    //  ten = sig_hi / 10 * 10;//need two mul
    //  one = sig_hi - ten;
    //  c2 = (one << (64 - 4)) | (sig_lo >> 4);// (high , low) >> 4
    //  half_ulp = p10_hi >> (5 - h);
    //  const u64 t0 = ((u64)10 << (64 - 4));// 10<<60 , const
    //  t1 = c2 + half_ulp;//
    //  round_u1 = ((sig_lo == ((u64)1 << 63)) & sig_hi) | (sig_lo > ((u64)1 << 63));
    //  round_d0 = (half_ulp > c2) | ((half_ulp == c) > (sig_bin & 1));
    //  if(irregular){
    //      round_u1 = (half_ulp / 2 < (sig_lo >> 4)) | (sig_lo > ((u64)1 << 63)) ;
    //      round_d0 = (half_ulp / 2 >= c2);
    //  }
    //  round_u0 = (t1 == t0 - 1) | ( (t1 >= t0) > *(u64*)&k ) ? !(sig_bin & 1): (t1 >= t0)  ;
    //  *sig_dec = sig_hi + round_u1;
    //  if(round_d0)*sig_dec = ten;
    //  if(round_u0)*sig_dec = ten+10;
    //  *exp_dec = k;
    M(ten_8);
    M(hi_div10_8);
    M(one_8);
    M(half_ulp_8);
    M(t1_8);M(round_u1_8);
    M(round_d0_8);
    M(round_u1_irregular_8);
    M(round_d0_irregular_8);
    M(t1_ge_t0_8);
    M(round_u0_8);
    M(sig_dec_8);
    const __m512i t0_8 = _mm512_set1_epi64(10ull << 60);
    const __m512i t0_sub1_8 = _mm512_set1_epi64((10ull << 60) - 1);
    const __m512i E2_63_8 = _mm512_set1_epi64((u64)1 << 63);
    const __m512i ZERO_8 = _mm512_set1_epi64(0);
    const __m512i ONE_8 = _mm512_set1_epi64(1);

    FORI pow10_hi_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), &pow10_sig_table[343 * 2], sizeof(u64));// 2 * (-k)
    FORI pow10_lo_8[i] = _mm512_i64gather_epi64(_mm512_add_epi64(nk_8[i], nk_8[i]), &pow10_sig_table[343 * 2 + 1], sizeof(u64)); // 2 * (-k) + 1
    //the gather instruction is very slow
    FORI cb_8[i] = _mm512_sllv_epi64(sig_bin_8[i], h_8[i]); // cb = sig_bin << h;
    FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], cb_8[i], sig_hi_8[i], sig_lo_8[i], r3[i]); // r3 not use
    FORI avx512_u64_mul_u64_epu64(sig_hi_8[i], _mm512_set1_epi64(1844674407370955162ull), hi_div10_8[i], tmp_low_8[i]); // tmp_low_8 not use
    FORI ten_8[i] = _mm512_mullo_epi64(hi_div10_8[i], _mm512_set1_epi64(10));                                           // ten = sig_hi / 10 * 10;
    FORI one_8[i] = _mm512_sub_epi64(sig_hi_8[i], ten_8[i]);                                                            // one = sig_hi - ten;
    FORI c_8[i] = _mm512_or_epi64(_mm512_slli_epi64(one_8[i], 60), _mm512_srli_epi64(sig_lo_8[i], 4));// c = (one << (64 - 4)) | (sig_lo >> 4);
    FORI half_ulp_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], _mm512_sub_epi64(_mm512_set1_epi64(5), h_8[i]));// half_ulp = p10_hi >> (5 - h);
    FORI t1_8[i] = _mm512_add_epi64(c_8[i], half_ulp_8[i]);// t1 = c2 + half_ulp;
    // round_u1 = ((sig_lo == ((u64)1 << 63)) & sig_hi) | (sig_lo > ((u64)1 << 63));
    // FORI round_u1_8[i] = _mm512_or_epi64((_mm512_and_epi64( _mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(sig_lo_8[i], E2_63_8), ZERO_8, ONE_8),sig_hi_8[i])),
    //                                       _mm512_mask_blend_epi64(_mm512_cmpgt_epu64_mask(sig_lo_8[i], E2_63_8), ZERO_8, ONE_8));

    M(round_u1_8_tmp1);M(round_u1_8_tmp2);M(round_u1_8_tmp3);M(round_u1_8_tmp4);
    FORI round_u1_8_tmp1[i] = _mm512_and_epi64(_mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(sig_lo_8[i], E2_63_8), ZERO_8, ONE_8) , sig_hi_8[i]);
    // round_d0 = (half_ulp > c) | ((half_ulp == c) > (sig_bin & 1));
    // FORI round_d0_8[i] = _mm512_or_epi64(_mm512_mask_blend_epi64(_mm512_cmpgt_epu64_mask(half_ulp_8[i], c_8[i]), ZERO_8, ONE_8),
    //                                      _mm512_mask_blend_epi64(_mm512_cmpgt_epu64_mask(_mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(half_ulp_8[i], c_8[i]), ZERO_8, ONE_8), _mm512_and_epi64(sig_bin_8[i], ONE_8)), ZERO_8, ONE_8));
    __mmask8 round_d0_8_mask[group_count];
    // round_d0 = ((half_ulp >> irregular) > c) | ((half_ulp == c) > (sig_bin & 1));
    FORI round_d0_8_mask[i]=_mm512_cmpgt_epu64_mask(_mm512_mask_srli_epi64(half_ulp_8[i], lower_boundary_is_closer_8[i],half_ulp_8[i],1),c_8[i]) |
    _mm512_cmpgt_epu64_mask(_mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(half_ulp_8[i], c_8[i]), ZERO_8, ONE_8), _mm512_and_epi64(sig_bin_8[i], ONE_8)) ;
                                         //  if(irregular){
    //      round_u1 = (half_ulp / 2 < (sig_lo >> 4)) | (sig_lo > ((u64)1 << 63)) ;
    //      round_d0 = (half_ulp / 2 >= c);
    //  } 
    // 
    //round_u1 = ( irregular ?  (half_ulp / 2 < (sig_lo >> 4))
    //                       : ((sig_lo == ((u64)1 << 63)) & sig_hi)  
    //           )  |  (sig_lo > ((u64)1 << 63))
    FORI round_u1_8_tmp2[i] = _mm512_mask_blend_epi64(_mm512_cmplt_epu64_mask(_mm512_srli_epi64(half_ulp_8[i], 1), _mm512_srli_epi64(sig_lo_8[i], 4)), ZERO_8, ONE_8);
    FORI round_u1_8_tmp3[i] = _mm512_mask_blend_epi64(_mm512_cmpgt_epu64_mask(sig_lo_8[i], E2_63_8), ZERO_8, ONE_8);
    FORI round_u1_8_tmp4[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], round_u1_8_tmp1[i], round_u1_8_tmp2[i]) | round_u1_8_tmp3[i];
    //FORI round_u1_irregular_8[i] = _mm512_mask_blend_epi64(_mm512_cmplt_epu64_mask(_mm512_srli_epi64(half_ulp_8[i], 1), _mm512_srli_epi64(sig_lo_8[i], 4)) | _mm512_cmpgt_epu64_mask(sig_lo_8[i], E2_63_8), ZERO_8, ONE_8);
    //FORI round_d0_irregular_8[i] = _mm512_mask_blend_epi64(_mm512_cmpge_epu64_mask(_mm512_srli_epi64(half_ulp_8[i], 1), c_8[i]), ZERO_8, ONE_8);
    // round_u0 = (t1 == t0 - 1) | ( (t1 >= t0) > *(u64*)&k ) ? !(sig_bin & 1) : (t1 >= t0)  ;
    FORI t1_ge_t0_8[i] = _mm512_mask_blend_epi64(_mm512_cmpge_epu64_mask(t1_8[i], t0_8), ZERO_8, ONE_8);
    //FORI round_u0_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(t1_8[i], t0_sub1_8) | _mm512_cmpgt_epu64_mask(t1_ge_t0_8[i], k_8[i]), t1_ge_t0_8[i], _mm512_and_epi64(_mm512_add_epi64(sig_bin_8[i], ONE_8), ONE_8));
    FORI round_u0_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(t1_8[i], t0_sub1_8) | _mm512_cmpgt_epu64_mask(t1_ge_t0_8[i], k_8[i]), t1_ge_t0_8[i], _mm512_xor_epi64(_mm512_and_epi64(sig_bin_8[i], ONE_8), ONE_8));
    // round result
    //FORI sig_dec_8[i] = _mm512_add_epi64(sig_hi_8[i], _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], round_u1_8[i], round_u1_irregular_8[i]));                                                   //  *sig_dec = sig_hi + round_u1;
    FORI sig_dec_8[i] = _mm512_add_epi64(sig_hi_8[i] , round_u1_8_tmp4[i] );
    //FORI sig_dec_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(_mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], round_d0_8[i], round_d0_irregular_8[i]), ONE_8), sig_dec_8[i], ten_8[i]); //  if(round_d0)*sig_dec = ten;
    FORI sig_dec_8[i] = _mm512_mask_blend_epi64(round_d0_8_mask[i], sig_dec_8[i], ten_8[i]);
    FORI sig_dec_8[i] = _mm512_mask_blend_epi64(_mm512_cmpeq_epu64_mask(round_u0_8[i], ONE_8), sig_dec_8[i], _mm512_add_epi64(ten_8[i], _mm512_set1_epi64(10)));                                         //  if(round_u0)*sig_dec = ten+10;
    

    //return ;
    //     FORI vbr_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbr_8[i], h_8[i]));
    // #else
    //     FORI h1_8[i] = _mm512_add_epi64(h_8[i], _mm512_set1_epi64(1));       // h + 1
    //     FORI D64_h_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h_8[i]);   // D64_h = 64 - h;
    //     FORI D64_h1_8[i] = _mm512_sub_epi64(_mm512_set1_epi64(64), h1_8[i]); // D64_h1 = 64 - (h + 1)=63-h;
    //     // FORI vbl_8[i] = avx512_roundOdd(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]));
    //     // for(int i=0;i<group_count-1;++i)avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    //     // for(int i=group_count-1;i<group_count;++i)avx512_u128_mul_u64_epu64_2(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    //     FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cbl_8[i], h_8[i]), r1_vbl_8[i], r2_vbl_8[i], r3_vbl_8[i]);
    //     FORI vbl_8[i] = roundOdd(r1_vbl_8[i], r2_vbl_8[i]); // r1 | ( r2 > 1 );
    //     // cbl
    //     // cb = lower_boundary_is_closer_8 ? cbl + 1 : cbl + 2
    //     // cbr = cb + 2

    //     // FORI avx512_u128_mul_u64_epu64(pow10_hi_8[i], pow10_lo_8[i], _mm512_sllv_epi64(cb_8[i], h_8[i]), r1_8[i], r2_8[i], r3_8[i]);
    //     // FORI vb_8[i] = roundOdd(r1_8[i], r2_8[i]); // r1 | ( r2 > 1 );

    //     // pow10 << h
    //     FORI pow10_sl_h_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h_8[i]);                                                            // pow10_hi>>(64-h)
    //     FORI pow10_sl_h_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h_8[i])); // pow10_hi<<h | pow10_lo>>(64-h)
    //     FORI pow10_sl_h_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h_8[i]);                                                                // pow10_lo<<h

    //     // pow10 << (h+1)
    //     FORI pow10_sl_h1_r1_8[i] = _mm512_srlv_epi64(pow10_hi_8[i], D64_h1_8[i]);                                                             // pow10_hi>>(64-(h+1))
    //     FORI pow10_sl_h1_r2_8[i] = _mm512_or_epi64(_mm512_sllv_epi64(pow10_hi_8[i], h1_8[i]), _mm512_srlv_epi64(pow10_lo_8[i], D64_h1_8[i])); // pow10_hi<<(h+1) | pow10_lo>>(64-(h+1))
    //     FORI pow10_sl_h1_r3_8[i] = _mm512_sllv_epi64(pow10_lo_8[i], h1_8[i]);                                                                 // pow10_lo<<(h+1)

    //     // lower_boundary_is_closer ? (pow10 << h) : (pow10<<(h+1)) ;
    //     FORI r1_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r1_8[i], pow10_sl_h_r1_8[1]);
    //     FORI r2_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r2_8[i], pow10_sl_h_r2_8[1]);
    //     FORI r3_tmp[i] = _mm512_mask_blend_epi64(lower_boundary_is_closer_8[i], pow10_sl_h1_r3_8[i], pow10_sl_h_r3_8[1]);
    //     //FORI r1_tmp[i] = pow10_sl_h1_r1_8[i];
    //     //FORI r2_tmp[i] = pow10_sl_h1_r2_8[i];
    //     //FORI r3_tmp[i] = pow10_sl_h1_r3_8[i];

    //     // cb = cbl + 1 or cbl + 2; u192 + u192
    //     FORI r3_vb_8[i] = _mm512_add_epi64(r3_vbl_8[i], r3_tmp[i]);
    //     FORI r2_vb_8[i] = _mm512_add_epi64(r2_vbl_8[i], r2_tmp[i]);
    //     // remove next line can pass the check , can be faster but is all can be right ?  how to prove ?
    //     // FORI r2_vb_8[i] = _mm512_mask_add_epi64(r2_vb_8[i], _mm512_cmplt_epu64_mask(r3_vb_8[i], r3_vbl_8[i]), r2_vb_8[i], _mm512_set1_epi64(1)); // carry
    //     FORI r1_vb_8[i] = _mm512_add_epi64(r1_vbl_8[i], r1_tmp[i]);
    //     FORI r1_vb_8[i] = _mm512_mask_add_epi64(r1_vb_8[i], _mm512_cmplt_epu64_mask(r2_vb_8[i], r2_vbl_8[i]), r1_vb_8[i], _mm512_set1_epi64(1)); // carry
    //     //

    //     // cbr = cb + 2 ; u192 + u192
    //     FORI r3_vbr_8[i] = _mm512_add_epi64(r3_vb_8[i], pow10_sl_h1_r3_8[i]);
    //     FORI r2_vbr_8[i] = _mm512_add_epi64(r2_vb_8[i], pow10_sl_h1_r2_8[i]);
    //     // FORI r2_vbr_8[i] = _mm512_mask_add_epi64(r2_vbr_8[i], _mm512_cmplt_epu64_mask(r3_vbr_8[i], r3_vb_8[i]), r2_vbr_8[i], _mm512_set1_epi64(1)); // carry
    //     FORI r1_vbr_8[i] = _mm512_add_epi64(r1_vb_8[i], pow10_sl_h1_r1_8[i]);
    //     FORI r1_vbr_8[i] = _mm512_mask_add_epi64(r1_vbr_8[i], _mm512_cmplt_epu64_mask(r2_vbr_8[i], r2_vb_8[i]), r1_vbr_8[i], _mm512_set1_epi64(1)); // carry
    //     //
    //     FORI vb_8[i] = roundOdd(r1_vb_8[i], r2_vb_8[i]);    // r1 | ( r2 > 1 );
    //     FORI vbr_8[i] = roundOdd(r1_vbr_8[i], r2_vbr_8[i]); // r1 | ( r2 > 1 );
    // #endif

    //     FORI lower_8[i] = _mm512_add_epi64(vbl_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbl + (c & 1);
    //     FORI upper_8[i] = _mm512_sub_epi64(vbr_8[i], _mm512_and_epi64(c_8[i], _mm512_set1_epi64(1))); // vbr - (c & 1);
    //     FORI s_8[i] = _mm512_srli_epi64(vb_8[i], 2);                                                  // vb / 4 == vb >> 2
    //     // 18446744073709551612 = ceil(2**64 / 10)  ; 2**64 > 1e17*10
    //     // n / 10 = (n * 1844674407370955161) >> 64
    //     FORI avx512_u64_mul_u64_epu64(s_8[i], _mm512_set1_epi64(1844674407370955162ull), sp_8[i], tmp_low_8[i]); // sp = s / 10;
    //     FORI sp10_8[i] = _mm512_mullo_epi64(sp_8[i], _mm512_set1_epi64(10));                                     // sp10 = sp * 10;
    //     FORI sp10_add10_8[i] = _mm512_add_epi64(sp10_8[i], _mm512_set1_epi64(10));                               // sp * 10 + 10
    //     FORI sp10_mul4_8[i] = _mm512_slli_epi64(sp10_8[i], 2);                                                   // sp10 * 4
    //     FORI sp10_add10_mul4_8[i] = _mm512_slli_epi64(sp10_add10_8[i], 2);                                       // (sp10 + 10) * 4
    //     // u64 digit_out = s + (((4 * s) < std::min(lower, upper - 3)) | ((0b11001000 >> (vb & 7)) & 1));//s or s + 1
    //     // if (lower <= sp10 * 4)digit_out = sp10;
    //     // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;
    //     FORI digit_out_8[i] = s_8[i];
    //     // FORI s_mul4_8[i] = _mm512_slli_epi64(s_8[i], 2);                                                                                           // s * 4 == vb & (-4)
    //     FORI s_mul4_8[i] = _mm512_and_epi64(_mm512_set1_epi64(-4), vb_8[i]);
    //     // FORI s_mul4_8[i] = _mm512_andnot_epi64(_mm512_set1_epi64(3),vb_8[i]);
    //     FORI tmp1_8[i] = _mm512_srlv_epi64(_mm512_set1_epi64(0b11001000), _mm512_and_epi64(vb_8[i], _mm512_set1_epi64(7)));                        // ((0b11001000 >> (vb & 7))
    //     FORI mask_8[i] = _mm512_cmplt_epi64_mask(s_mul4_8[i], _mm512_min_epi64(lower_8[i], _mm512_sub_epi64(upper_8[i], _mm512_set1_epi64(3))));   // 4*s <= min(lower,upper-3)
    //     FORI tmp2_8[i] = _mm512_mask_blend_epi64(mask_8[i], _mm512_set1_epi64(0), _mm512_set1_epi64(1));                                           // if( 4*s <= min(lower,upper-3) ) tmp2 = 1;
    //     FORI tmp3_8[i] = _mm512_or_epi64(_mm512_and_epi64(tmp1_8[i], _mm512_set1_epi64(1)), tmp2_8[i]);                                            // tmp3 = (tmp1 & 1) | tmp2  ; // tmp3 = 0 or 1
    //     FORI digit_out_8[i] = _mm512_add_epi64(digit_out_8[i], tmp3_8[i]);                                                                         // s or s+1
    //     FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(lower_8[i], sp10_mul4_8[i]), digit_out_8[i], sp10_8[i]);             // if (lower <= sp10 * 4)digit_out = sp10;
    //     FORI digit_out_8[i] = _mm512_mask_blend_epi64(_mm512_cmple_epi64_mask(sp10_add10_mul4_8[i], upper_8[i]), digit_out_8[i], sp10_add10_8[i]); // if ((sp10 + 10) * 4 <= upper)digit_out = sp10 + 10;

    FORI digit_out_8[i] = sig_dec_8[i];

    const __m512i E15_8 = _mm512_set1_epi64(E15);
    const __m512i _9E15_8 = _mm512_set1_epi64(_9E15);                                                                                       // 1e16-1e15=9e15
    FORI check_is_digit16_8[i] = _mm512_cmplt_epu64_mask(_mm512_sub_epi64(digit_out_8[i], E15_8), _9E15_8);                                 // digit_out_8 in [1e15,1e16)
    FORI e10_8[i] = _mm512_add_epi64(k_8[i], _mm512_mask_blend_epi64(check_is_digit16_8[i], _mm512_set1_epi64(16), _mm512_set1_epi64(15))); // if(1e15 <= digit_out_8 < 1e16) k+=15; else k+=16;
    FORI digit_out_8[i] = _mm512_mask_mullo_epi64(digit_out_8[i], check_is_digit16_8[i], digit_out_8[i], _mm512_set1_epi64(10));            // if(1e15 <= digit_out_8 < 1e16) digit_out_8 *= 10;

    //  ===== calc digit_out and e10 end; =====
    // print digit_out and  e10
    FORI _mm512_storeu_epi64(&e10[i * group], e10_8[i]);
    FORI _mm512_storeu_epi64(&digit_out[i * group], digit_out_8[i]);
    FORI high9_8[i] = _mm512_cvttpd_epi64(_mm512_mul_pd(_mm512_cvt_roundepi64_pd(digit_out_8[i], _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC), // round down
                                                        _mm512_set1_pd(1e-8)));                                                              // 1e17/1e8 = 9 digit ; digit17 / digit8 = digit9
    FORI low8_8[i] = _mm512_sub_epi64(digit_out_8[i], _mm512_mullo_epi64(high9_8[i], _mm512_set1_epi64(1e8)));                               // 1e17%1e8 = 8 digit
    //  print all digit 17;
    FORI FORJ buffer[i * group + j][0] = '-';
#if 1
    const u64 *exp_ptr = &exp_result3[324];
    for (int i = 0; i < group_count / 2; ++i)
    {
#define FORJ4 for (int j = 0; j < 4; j++)
#define FORJ2 for (int j = 0; j < 2; j++)

        const __m512i DIGIT_ZERO_8 = _mm512_set1_epi64(0x3030303030303030ull); // '0' = 0x30 = 48
        const __m512i M24_16 = _mm512_set1_epi32((1 << 24) - 1);               // low 24 bit in 32 bit
        const __m512i L8_16 = _mm512_set1_epi32(0xFF000000u);                  // high 8 bit in 32bit
        // 17 = 1 + 8 + 8
        __m512i num1[2];
        __m512i num_low16[4];
        __m512i num1234_8[4];
        __m512i num5678_8[4];
        __m512i num5678_1234_merge_8[4];
        __m512i num_tmp[4];
        __m512i num_final[4] = {_mm512_set1_epi32(0)};
        __m512i tz_low16[4];
        __m512i tz_8[2];
        u64 num1_print[8 * 2];      // "1."
        u64 num_low16_print[8 * 4]; // low16 digtit
        u64 offset[8 * 2];          // 18-tz-(tz==16)

        FORJ2 num1[j] = _mm512_srli_epi64(_mm512_mullo_epi64(high9_8[i * 2 + j], _mm512_set1_epi64(1441151881)), 57);   // 1441151881 = 2**57 / 1e8
        FORJ2 _mm512_storeu_epi64(&num1_print[j * 8], _mm512_or_epi64(num1[j], _mm512_set1_epi64('.' * 256 + '0')));    // num1 | ('.' * 256 + '0')
        FORJ2 num_low16[j] = _mm512_sub_epi64(high9_8[i * 2 + j], _mm512_mullo_epi64(num1[j], _mm512_set1_epi64(1e8))); // num_2_9 = high9 - num1*1e8
        FORJ2 num_low16[2 + j] = low8_8[i * 2 + j];                                                                     // num_10_17 = low8

        FORJ4 num1234_8[j] = _mm512_srli_epi64(_mm512_mullo_epi64(num_low16[j], _mm512_set1_epi64(28147497672ull)), 48); // num1234 = num_low8 / 1e4 = num_low8 * 28147497672 >> 48
        FORJ4 num5678_8[j] = _mm512_sub_epi64(num_low16[j], _mm512_mullo_epi64(num1234_8[j], _mm512_set1_epi64(10000))); // num5678 = num_low8 - num1234*1e4
        FORJ4 num5678_1234_merge_8[j] = _mm512_or_epi64(_mm512_slli_epi64(num5678_8[j], 32), num1234_8[j]);
        // FORJ4 num5678_1234_merge_8[j] = _mm512_mask_shuffle_epi32(num1234_8[j], (__mmask16)0b1010101010101010, num5678_8[j], _MM_PERM_CAAA);//another way
        FORJ4 num_tmp[j] = _mm512_mullo_epi32(num5678_1234_merge_8[j], _mm512_set1_epi32(16778)); // num1234 / 1e3 = num1234 * 16778 >> 24
        for (int k = 0; k < 4; k++)
        {
            FORJ4 num_final[j] = _mm512_or_epi32(num_final[j], _mm512_srli_epi32(_mm512_and_epi32(num_tmp[j], L8_16), 24 - k * 8));
            FORJ4 num_tmp[j] = _mm512_mullo_epi32(_mm512_andnot_epi32(L8_16, num_tmp[j]), _mm512_set1_epi32(10)); // ((!L8) & num_tmp) * 10
            // FORJ4 num_tmp[j] = _mm512_mullo_epi32( _mm512_and_epi32( M24_16 , num_tmp[j] ) , _mm512_set1_epi32(10) );
        }
        FORJ4 _mm512_storeu_epi64(&num_low16_print[j * 8], _mm512_or_epi64(num_final[j], DIGIT_ZERO_8));
        // compute tail zero number , compute final buffer offset;
        FORJ4 tz_low16[j] = _mm512_srli_epi64(_mm512_lzcnt_epi64(num_final[j]), 3);                                                                           // lzcnt(final)>>3
        FORJ2 tz_8[j] = _mm512_mask_add_epi64(tz_low16[2 + j], _mm512_cmpeq_epi64_mask(tz_low16[2 + j], _mm512_set1_epi64(8)), tz_low16[2 + j], tz_low16[j]); // tz_low8 == 8 ? tz_low8+tz_2_9 : tz_low8
        FORJ2 _mm512_storeu_epi64(&tz[(i * 2 + j) * group], tz_8[j]);
        FORJ2 _mm512_storeu_epi64(&offset[j * 8], _mm512_mask_sub_epi64(_mm512_set1_epi64(1), _mm512_cmpneq_epi64_mask(tz_8[j], _mm512_set1_epi64(16)), _mm512_set1_epi64(18), tz_8[j])); // 18-tz-(tz==16)

        for (int j = 0; j < group; ++j)
        {
            char *buf_ptr1 = buf_ptr[i * 2 * group + j];
            *(u64 *)(buf_ptr1) = num1_print[j];                                                                                  // write 8 byte but only low 2 byte use;
            _mm_storeu_si128((__m128i *)(buf_ptr1 + 2), _mm_set_epi64x(num_low16_print[2 * 8 + j], num_low16_print[0 * 8 + j])); // write 16byte
            *(u64 *)(buf_ptr1 + offset[j]) = exp_ptr[e10[2 * i * group + j]];                                                    // remove tail zero

            char *buf_ptr2 = buf_ptr[(i * 2 + 1) * group + j];
            *(u64 *)(buf_ptr2) = num1_print[j + 8];
            _mm_storeu_si128((__m128i *)(buf_ptr2 + 2), _mm_set_epi64x(num_low16_print[3 * 8 + j], num_low16_print[1 * 8 + j])); // write 16byte
            *(u64 *)(buf_ptr2 + offset[8 + j]) = exp_ptr[e10[(2 * i + 1) * group + j]];
        }
    }
#endif

    // adjust { Nan , Inf , 0 , <1e-309 } double value , unlikely ,
    if (1)
        FORI FORJ
        {
            // if(vi_abs[i*group+j] - E_N309_U > (0x7ffull<<52) - E_N309_U)
            // if(vi_abs[i*group + j] == 0)memcpy(buf_ptr[i*group+j],"0\0",2);
            // if (vi_abs[i*group+j] - E_N309_U >= ( ((0x7ffull << 52)) - E_N309_U) ) // unlikely
            if (vi_abs_offset[i * group + j] >= (Inf_E_N309_U))
            {
                if (vi_abs_offset[i * group + j] <= (Max_Nan - E_N309_U))
                {
                    // memcpy(buf_ptr[i * group + j], vi_abs_offset[i * group + j] == Inf_E_N309_U ? "inf\0" : "nan\0", 4);
                    *(int *)buf_ptr[i * group + j] = vi_abs_offset[i * group + j] == Inf_E_N309_U ? *(int *)"inf\0" : *(int *)"nan\0";
                }
                else
                {
                    // adjust to shortest print
                    if (vi_abs_offset[i * group + j] == (0ull - E_N309_U))
                    {
                        //*(short *)buf_ptr[i * group + j] = '0';
                        *(int *)buf_ptr[i * group + j] = *(int*)"0.0";
                        continue;
                    }
                    u64 len = dec_length(digit_out[i * group + j]);
                    u64 tz_num = tz[i * group + j];
                    u64 lz_num = 17 - len; // lz_num >= 2
                    u64 signficant = 17 - tz_num - lz_num;
                    u64 start_pos = lz_num + 1;
                    if (signficant > 1ull)
                    {
                        buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        if (signficant <= 9)
                            *(i64 *)&buf_ptr[i * group + j][2] = *(i64 *)&buf_ptr[i * group + j][start_pos + 1];
                        else
                        {
                            *(u64 *)&buf_ptr[i * group + j][2] = *(u64 *)&buf_ptr[i * group + j][start_pos + 1];
                            *(u64 *)&buf_ptr[i * group + j][2 + 8] = *(u64 *)&buf_ptr[i * group + j][start_pos + 1 + 8];
                        }
                        *(u64 *)&buf_ptr[i * group + j][signficant + 1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    else
                    {
                        *(short *)&buf_ptr[i * group + j][0] = buf_ptr[i * group + j][start_pos];
                        *(u64 *)&buf_ptr[i * group + j][1] = exp_ptr[e10[i * group + j] - lz_num];
                    }
                    // printf("len = %llu lz = %llu tz = %llu signficant = %llu start_pos = %llu\n",len,lz_num,tz_num, signficant,start_pos);
                }
            }
        }
}

extern "C" void d2s_yy_32v(double *value, char **buffer) // icx
{
    d2s_yy_32v_impl(value, buffer);
}